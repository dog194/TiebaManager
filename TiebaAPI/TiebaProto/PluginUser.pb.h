// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PluginUser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PluginUser_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_PluginUser_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PluginUser_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PluginUser_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PluginUser_2eproto;
class PluginUser;
struct PluginUserDefaultTypeInternal;
extern PluginUserDefaultTypeInternal _PluginUser_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class PluginUser final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PluginUser) */ {
 public:
  inline PluginUser() : PluginUser(nullptr) {}
  ~PluginUser() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PluginUser(::google::protobuf::internal::ConstantInitialized);

  PluginUser(const PluginUser& from);
  PluginUser(PluginUser&& from) noexcept
    : PluginUser() {
    *this = ::std::move(from);
  }

  inline PluginUser& operator=(const PluginUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginUser& operator=(PluginUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginUser* internal_default_instance() {
    return reinterpret_cast<const PluginUser*>(
               &_PluginUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PluginUser& a, PluginUser& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginUser* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PluginUser>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PluginUser& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PluginUser& from) {
    PluginUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginUser* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PluginUser";
  }
  protected:
  explicit PluginUser(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameShowFieldNumber = 2,
    kUserPhotoFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kUserTypeFieldNumber = 3,
    kIsDownloadCardWhiteuserFieldNumber = 5,
  };
  // string user_name_show = 2;
  void clear_user_name_show() ;
  const std::string& user_name_show() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name_show(Arg_&& arg, Args_... args);
  std::string* mutable_user_name_show();
  PROTOBUF_NODISCARD std::string* release_user_name_show();
  void set_allocated_user_name_show(std::string* ptr);

  private:
  const std::string& _internal_user_name_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name_show(
      const std::string& value);
  std::string* _internal_mutable_user_name_show();

  public:
  // string user_photo = 4;
  void clear_user_photo() ;
  const std::string& user_photo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_photo(Arg_&& arg, Args_... args);
  std::string* mutable_user_photo();
  PROTOBUF_NODISCARD std::string* release_user_photo();
  void set_allocated_user_photo(std::string* ptr);

  private:
  const std::string& _internal_user_photo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_photo(
      const std::string& value);
  std::string* _internal_mutable_user_photo();

  public:
  // int64 user_id = 1;
  void clear_user_id() ;
  ::int64_t user_id() const;
  void set_user_id(::int64_t value);

  private:
  ::int64_t _internal_user_id() const;
  void _internal_set_user_id(::int64_t value);

  public:
  // int32 user_type = 3;
  void clear_user_type() ;
  ::int32_t user_type() const;
  void set_user_type(::int32_t value);

  private:
  ::int32_t _internal_user_type() const;
  void _internal_set_user_type(::int32_t value);

  public:
  // int32 is_download_card_whiteuser = 5;
  void clear_is_download_card_whiteuser() ;
  ::int32_t is_download_card_whiteuser() const;
  void set_is_download_card_whiteuser(::int32_t value);

  private:
  ::int32_t _internal_is_download_card_whiteuser() const;
  void _internal_set_is_download_card_whiteuser(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PluginUser)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr user_name_show_;
    ::google::protobuf::internal::ArenaStringPtr user_photo_;
    ::int64_t user_id_;
    ::int32_t user_type_;
    ::int32_t is_download_card_whiteuser_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PluginUser_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PluginUser

// int64 user_id = 1;
inline void PluginUser::clear_user_id() {
  _impl_.user_id_ = ::int64_t{0};
}
inline ::int64_t PluginUser::user_id() const {
  // @@protoc_insertion_point(field_get:PluginUser.user_id)
  return _internal_user_id();
}
inline void PluginUser::set_user_id(::int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:PluginUser.user_id)
}
inline ::int64_t PluginUser::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void PluginUser::_internal_set_user_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string user_name_show = 2;
inline void PluginUser::clear_user_name_show() {
  _impl_.user_name_show_.ClearToEmpty();
}
inline const std::string& PluginUser::user_name_show() const {
  // @@protoc_insertion_point(field_get:PluginUser.user_name_show)
  return _internal_user_name_show();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginUser::set_user_name_show(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_name_show_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PluginUser.user_name_show)
}
inline std::string* PluginUser::mutable_user_name_show() {
  std::string* _s = _internal_mutable_user_name_show();
  // @@protoc_insertion_point(field_mutable:PluginUser.user_name_show)
  return _s;
}
inline const std::string& PluginUser::_internal_user_name_show() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_name_show_.Get();
}
inline void PluginUser::_internal_set_user_name_show(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_name_show_.Set(value, GetArenaForAllocation());
}
inline std::string* PluginUser::_internal_mutable_user_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_name_show_.Mutable( GetArenaForAllocation());
}
inline std::string* PluginUser::release_user_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PluginUser.user_name_show)
  return _impl_.user_name_show_.Release();
}
inline void PluginUser::set_allocated_user_name_show(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_name_show_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_show_.IsDefault()) {
          _impl_.user_name_show_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PluginUser.user_name_show)
}

// int32 user_type = 3;
inline void PluginUser::clear_user_type() {
  _impl_.user_type_ = 0;
}
inline ::int32_t PluginUser::user_type() const {
  // @@protoc_insertion_point(field_get:PluginUser.user_type)
  return _internal_user_type();
}
inline void PluginUser::set_user_type(::int32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:PluginUser.user_type)
}
inline ::int32_t PluginUser::_internal_user_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_type_;
}
inline void PluginUser::_internal_set_user_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_type_ = value;
}

// string user_photo = 4;
inline void PluginUser::clear_user_photo() {
  _impl_.user_photo_.ClearToEmpty();
}
inline const std::string& PluginUser::user_photo() const {
  // @@protoc_insertion_point(field_get:PluginUser.user_photo)
  return _internal_user_photo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PluginUser::set_user_photo(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_photo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PluginUser.user_photo)
}
inline std::string* PluginUser::mutable_user_photo() {
  std::string* _s = _internal_mutable_user_photo();
  // @@protoc_insertion_point(field_mutable:PluginUser.user_photo)
  return _s;
}
inline const std::string& PluginUser::_internal_user_photo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_photo_.Get();
}
inline void PluginUser::_internal_set_user_photo(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_photo_.Set(value, GetArenaForAllocation());
}
inline std::string* PluginUser::_internal_mutable_user_photo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_photo_.Mutable( GetArenaForAllocation());
}
inline std::string* PluginUser::release_user_photo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PluginUser.user_photo)
  return _impl_.user_photo_.Release();
}
inline void PluginUser::set_allocated_user_photo(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_photo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_photo_.IsDefault()) {
          _impl_.user_photo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PluginUser.user_photo)
}

// int32 is_download_card_whiteuser = 5;
inline void PluginUser::clear_is_download_card_whiteuser() {
  _impl_.is_download_card_whiteuser_ = 0;
}
inline ::int32_t PluginUser::is_download_card_whiteuser() const {
  // @@protoc_insertion_point(field_get:PluginUser.is_download_card_whiteuser)
  return _internal_is_download_card_whiteuser();
}
inline void PluginUser::set_is_download_card_whiteuser(::int32_t value) {
  _internal_set_is_download_card_whiteuser(value);
  // @@protoc_insertion_point(field_set:PluginUser.is_download_card_whiteuser)
}
inline ::int32_t PluginUser::_internal_is_download_card_whiteuser() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_download_card_whiteuser_;
}
inline void PluginUser::_internal_set_is_download_card_whiteuser(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_download_card_whiteuser_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_PluginUser_2eproto_2epb_2eh
