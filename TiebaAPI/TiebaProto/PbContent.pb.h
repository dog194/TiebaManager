// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PbContent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PbContent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_PbContent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "TiebaPlusInfo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PbContent_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PbContent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PbContent_2eproto;
class PbContent;
struct PbContentDefaultTypeInternal;
extern PbContentDefaultTypeInternal _PbContent_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class PbContent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PbContent) */ {
 public:
  inline PbContent() : PbContent(nullptr) {}
  ~PbContent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PbContent(::google::protobuf::internal::ConstantInitialized);

  PbContent(const PbContent& from);
  PbContent(PbContent&& from) noexcept
    : PbContent() {
    *this = ::std::move(from);
  }

  inline PbContent& operator=(const PbContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbContent& operator=(PbContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbContent* internal_default_instance() {
    return reinterpret_cast<const PbContent*>(
               &_PbContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbContent& a, PbContent& b) {
    a.Swap(&b);
  }
  inline void Swap(PbContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbContent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PbContent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PbContent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PbContent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PbContent& from) {
    PbContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbContent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PbContent";
  }
  protected:
  explicit PbContent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kLinkFieldNumber = 3,
    kSrcFieldNumber = 4,
    kBsizeFieldNumber = 5,
    kBigSrcFieldNumber = 6,
    kBigSizeFieldNumber = 7,
    kCdnSrcFieldNumber = 8,
    kBigCdnSrcFieldNumber = 9,
    kImgtypeFieldNumber = 10,
    kVoiceMd5FieldNumber = 12,
    kPacketNameFieldNumber = 20,
    kPhonetypeFieldNumber = 21,
    kOriginSrcFieldNumber = 25,
    kTiebaplusInfoFieldNumber = 40,
    kTypeFieldNumber = 1,
    kDuringTimeFieldNumber = 13,
    kUidFieldNumber = 15,
    kIsSubFieldNumber = 14,
    kWidthFieldNumber = 18,
    kHeightFieldNumber = 19,
    kETypeFieldNumber = 24,
    kOriginSizeFieldNumber = 27,
  };
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // string link = 3;
  void clear_link() ;
  const std::string& link() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_link(Arg_&& arg, Args_... args);
  std::string* mutable_link();
  PROTOBUF_NODISCARD std::string* release_link();
  void set_allocated_link(std::string* ptr);

  private:
  const std::string& _internal_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link(
      const std::string& value);
  std::string* _internal_mutable_link();

  public:
  // string src = 4;
  void clear_src() ;
  const std::string& src() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_src(Arg_&& arg, Args_... args);
  std::string* mutable_src();
  PROTOBUF_NODISCARD std::string* release_src();
  void set_allocated_src(std::string* ptr);

  private:
  const std::string& _internal_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src(
      const std::string& value);
  std::string* _internal_mutable_src();

  public:
  // string bsize = 5;
  void clear_bsize() ;
  const std::string& bsize() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bsize(Arg_&& arg, Args_... args);
  std::string* mutable_bsize();
  PROTOBUF_NODISCARD std::string* release_bsize();
  void set_allocated_bsize(std::string* ptr);

  private:
  const std::string& _internal_bsize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bsize(
      const std::string& value);
  std::string* _internal_mutable_bsize();

  public:
  // string big_src = 6;
  void clear_big_src() ;
  const std::string& big_src() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_big_src(Arg_&& arg, Args_... args);
  std::string* mutable_big_src();
  PROTOBUF_NODISCARD std::string* release_big_src();
  void set_allocated_big_src(std::string* ptr);

  private:
  const std::string& _internal_big_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_big_src(
      const std::string& value);
  std::string* _internal_mutable_big_src();

  public:
  // string big_size = 7;
  void clear_big_size() ;
  const std::string& big_size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_big_size(Arg_&& arg, Args_... args);
  std::string* mutable_big_size();
  PROTOBUF_NODISCARD std::string* release_big_size();
  void set_allocated_big_size(std::string* ptr);

  private:
  const std::string& _internal_big_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_big_size(
      const std::string& value);
  std::string* _internal_mutable_big_size();

  public:
  // string cdn_src = 8;
  void clear_cdn_src() ;
  const std::string& cdn_src() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cdn_src(Arg_&& arg, Args_... args);
  std::string* mutable_cdn_src();
  PROTOBUF_NODISCARD std::string* release_cdn_src();
  void set_allocated_cdn_src(std::string* ptr);

  private:
  const std::string& _internal_cdn_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cdn_src(
      const std::string& value);
  std::string* _internal_mutable_cdn_src();

  public:
  // string big_cdn_src = 9;
  void clear_big_cdn_src() ;
  const std::string& big_cdn_src() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_big_cdn_src(Arg_&& arg, Args_... args);
  std::string* mutable_big_cdn_src();
  PROTOBUF_NODISCARD std::string* release_big_cdn_src();
  void set_allocated_big_cdn_src(std::string* ptr);

  private:
  const std::string& _internal_big_cdn_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_big_cdn_src(
      const std::string& value);
  std::string* _internal_mutable_big_cdn_src();

  public:
  // string imgtype = 10;
  void clear_imgtype() ;
  const std::string& imgtype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imgtype(Arg_&& arg, Args_... args);
  std::string* mutable_imgtype();
  PROTOBUF_NODISCARD std::string* release_imgtype();
  void set_allocated_imgtype(std::string* ptr);

  private:
  const std::string& _internal_imgtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgtype(
      const std::string& value);
  std::string* _internal_mutable_imgtype();

  public:
  // string voice_md5 = 12;
  void clear_voice_md5() ;
  const std::string& voice_md5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voice_md5(Arg_&& arg, Args_... args);
  std::string* mutable_voice_md5();
  PROTOBUF_NODISCARD std::string* release_voice_md5();
  void set_allocated_voice_md5(std::string* ptr);

  private:
  const std::string& _internal_voice_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voice_md5(
      const std::string& value);
  std::string* _internal_mutable_voice_md5();

  public:
  // string packet_name = 20;
  void clear_packet_name() ;
  const std::string& packet_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_packet_name(Arg_&& arg, Args_... args);
  std::string* mutable_packet_name();
  PROTOBUF_NODISCARD std::string* release_packet_name();
  void set_allocated_packet_name(std::string* ptr);

  private:
  const std::string& _internal_packet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packet_name(
      const std::string& value);
  std::string* _internal_mutable_packet_name();

  public:
  // string phonetype = 21;
  void clear_phonetype() ;
  const std::string& phonetype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonetype(Arg_&& arg, Args_... args);
  std::string* mutable_phonetype();
  PROTOBUF_NODISCARD std::string* release_phonetype();
  void set_allocated_phonetype(std::string* ptr);

  private:
  const std::string& _internal_phonetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonetype(
      const std::string& value);
  std::string* _internal_mutable_phonetype();

  public:
  // string origin_src = 25;
  void clear_origin_src() ;
  const std::string& origin_src() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin_src(Arg_&& arg, Args_... args);
  std::string* mutable_origin_src();
  PROTOBUF_NODISCARD std::string* release_origin_src();
  void set_allocated_origin_src(std::string* ptr);

  private:
  const std::string& _internal_origin_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_src(
      const std::string& value);
  std::string* _internal_mutable_origin_src();

  public:
  // .TiebaPlusInfo tiebaplus_info = 40;
  bool has_tiebaplus_info() const;
  void clear_tiebaplus_info() ;
  const ::TiebaPlusInfo& tiebaplus_info() const;
  PROTOBUF_NODISCARD ::TiebaPlusInfo* release_tiebaplus_info();
  ::TiebaPlusInfo* mutable_tiebaplus_info();
  void set_allocated_tiebaplus_info(::TiebaPlusInfo* value);
  void unsafe_arena_set_allocated_tiebaplus_info(::TiebaPlusInfo* value);
  ::TiebaPlusInfo* unsafe_arena_release_tiebaplus_info();

  private:
  const ::TiebaPlusInfo& _internal_tiebaplus_info() const;
  ::TiebaPlusInfo* _internal_mutable_tiebaplus_info();

  public:
  // uint32 type = 1;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // uint32 during_time = 13;
  void clear_during_time() ;
  ::uint32_t during_time() const;
  void set_during_time(::uint32_t value);

  private:
  ::uint32_t _internal_during_time() const;
  void _internal_set_during_time(::uint32_t value);

  public:
  // int64 uid = 15;
  void clear_uid() ;
  ::int64_t uid() const;
  void set_uid(::int64_t value);

  private:
  ::int64_t _internal_uid() const;
  void _internal_set_uid(::int64_t value);

  public:
  // uint32 is_sub = 14;
  void clear_is_sub() ;
  ::uint32_t is_sub() const;
  void set_is_sub(::uint32_t value);

  private:
  ::uint32_t _internal_is_sub() const;
  void _internal_set_is_sub(::uint32_t value);

  public:
  // uint32 width = 18;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 19;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // uint32 e_type = 24;
  void clear_e_type() ;
  ::uint32_t e_type() const;
  void set_e_type(::uint32_t value);

  private:
  ::uint32_t _internal_e_type() const;
  void _internal_set_e_type(::uint32_t value);

  public:
  // uint32 origin_size = 27;
  void clear_origin_size() ;
  ::uint32_t origin_size() const;
  void set_origin_size(::uint32_t value);

  private:
  ::uint32_t _internal_origin_size() const;
  void _internal_set_origin_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PbContent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 22, 1, 129, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr link_;
    ::google::protobuf::internal::ArenaStringPtr src_;
    ::google::protobuf::internal::ArenaStringPtr bsize_;
    ::google::protobuf::internal::ArenaStringPtr big_src_;
    ::google::protobuf::internal::ArenaStringPtr big_size_;
    ::google::protobuf::internal::ArenaStringPtr cdn_src_;
    ::google::protobuf::internal::ArenaStringPtr big_cdn_src_;
    ::google::protobuf::internal::ArenaStringPtr imgtype_;
    ::google::protobuf::internal::ArenaStringPtr voice_md5_;
    ::google::protobuf::internal::ArenaStringPtr packet_name_;
    ::google::protobuf::internal::ArenaStringPtr phonetype_;
    ::google::protobuf::internal::ArenaStringPtr origin_src_;
    ::TiebaPlusInfo* tiebaplus_info_;
    ::uint32_t type_;
    ::uint32_t during_time_;
    ::int64_t uid_;
    ::uint32_t is_sub_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t e_type_;
    ::uint32_t origin_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PbContent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PbContent

// uint32 type = 1;
inline void PbContent::clear_type() {
  _impl_.type_ = 0u;
}
inline ::uint32_t PbContent::type() const {
  // @@protoc_insertion_point(field_get:PbContent.type)
  return _internal_type();
}
inline void PbContent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PbContent.type)
}
inline ::uint32_t PbContent::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void PbContent::_internal_set_type(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string text = 2;
inline void PbContent::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& PbContent::text() const {
  // @@protoc_insertion_point(field_get:PbContent.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.text)
}
inline std::string* PbContent::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:PbContent.text)
  return _s;
}
inline const std::string& PbContent::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void PbContent::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.text)
  return _impl_.text_.Release();
}
inline void PbContent::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.text)
}

// string link = 3;
inline void PbContent::clear_link() {
  _impl_.link_.ClearToEmpty();
}
inline const std::string& PbContent::link() const {
  // @@protoc_insertion_point(field_get:PbContent.link)
  return _internal_link();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_link(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.link_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.link)
}
inline std::string* PbContent::mutable_link() {
  std::string* _s = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:PbContent.link)
  return _s;
}
inline const std::string& PbContent::_internal_link() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.link_.Get();
}
inline void PbContent::_internal_set_link(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.link_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_link() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.link_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_link() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.link)
  return _impl_.link_.Release();
}
inline void PbContent::set_allocated_link(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.link_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.link_.IsDefault()) {
          _impl_.link_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.link)
}

// string src = 4;
inline void PbContent::clear_src() {
  _impl_.src_.ClearToEmpty();
}
inline const std::string& PbContent::src() const {
  // @@protoc_insertion_point(field_get:PbContent.src)
  return _internal_src();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_src(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.src_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.src)
}
inline std::string* PbContent::mutable_src() {
  std::string* _s = _internal_mutable_src();
  // @@protoc_insertion_point(field_mutable:PbContent.src)
  return _s;
}
inline const std::string& PbContent::_internal_src() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.src_.Get();
}
inline void PbContent::_internal_set_src(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.src_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.src_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.src)
  return _impl_.src_.Release();
}
inline void PbContent::set_allocated_src(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.src_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.src_.IsDefault()) {
          _impl_.src_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.src)
}

// string bsize = 5;
inline void PbContent::clear_bsize() {
  _impl_.bsize_.ClearToEmpty();
}
inline const std::string& PbContent::bsize() const {
  // @@protoc_insertion_point(field_get:PbContent.bsize)
  return _internal_bsize();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_bsize(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bsize_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.bsize)
}
inline std::string* PbContent::mutable_bsize() {
  std::string* _s = _internal_mutable_bsize();
  // @@protoc_insertion_point(field_mutable:PbContent.bsize)
  return _s;
}
inline const std::string& PbContent::_internal_bsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bsize_.Get();
}
inline void PbContent::_internal_set_bsize(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bsize_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_bsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bsize_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_bsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.bsize)
  return _impl_.bsize_.Release();
}
inline void PbContent::set_allocated_bsize(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bsize_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bsize_.IsDefault()) {
          _impl_.bsize_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.bsize)
}

// string big_src = 6;
inline void PbContent::clear_big_src() {
  _impl_.big_src_.ClearToEmpty();
}
inline const std::string& PbContent::big_src() const {
  // @@protoc_insertion_point(field_get:PbContent.big_src)
  return _internal_big_src();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_big_src(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_src_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.big_src)
}
inline std::string* PbContent::mutable_big_src() {
  std::string* _s = _internal_mutable_big_src();
  // @@protoc_insertion_point(field_mutable:PbContent.big_src)
  return _s;
}
inline const std::string& PbContent::_internal_big_src() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.big_src_.Get();
}
inline void PbContent::_internal_set_big_src(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_src_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_big_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.big_src_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_big_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.big_src)
  return _impl_.big_src_.Release();
}
inline void PbContent::set_allocated_big_src(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.big_src_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.big_src_.IsDefault()) {
          _impl_.big_src_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.big_src)
}

// string big_size = 7;
inline void PbContent::clear_big_size() {
  _impl_.big_size_.ClearToEmpty();
}
inline const std::string& PbContent::big_size() const {
  // @@protoc_insertion_point(field_get:PbContent.big_size)
  return _internal_big_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_big_size(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_size_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.big_size)
}
inline std::string* PbContent::mutable_big_size() {
  std::string* _s = _internal_mutable_big_size();
  // @@protoc_insertion_point(field_mutable:PbContent.big_size)
  return _s;
}
inline const std::string& PbContent::_internal_big_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.big_size_.Get();
}
inline void PbContent::_internal_set_big_size(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_size_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_big_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.big_size_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_big_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.big_size)
  return _impl_.big_size_.Release();
}
inline void PbContent::set_allocated_big_size(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.big_size_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.big_size_.IsDefault()) {
          _impl_.big_size_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.big_size)
}

// string cdn_src = 8;
inline void PbContent::clear_cdn_src() {
  _impl_.cdn_src_.ClearToEmpty();
}
inline const std::string& PbContent::cdn_src() const {
  // @@protoc_insertion_point(field_get:PbContent.cdn_src)
  return _internal_cdn_src();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_cdn_src(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cdn_src_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.cdn_src)
}
inline std::string* PbContent::mutable_cdn_src() {
  std::string* _s = _internal_mutable_cdn_src();
  // @@protoc_insertion_point(field_mutable:PbContent.cdn_src)
  return _s;
}
inline const std::string& PbContent::_internal_cdn_src() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cdn_src_.Get();
}
inline void PbContent::_internal_set_cdn_src(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cdn_src_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_cdn_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cdn_src_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_cdn_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.cdn_src)
  return _impl_.cdn_src_.Release();
}
inline void PbContent::set_allocated_cdn_src(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cdn_src_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cdn_src_.IsDefault()) {
          _impl_.cdn_src_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.cdn_src)
}

// string big_cdn_src = 9;
inline void PbContent::clear_big_cdn_src() {
  _impl_.big_cdn_src_.ClearToEmpty();
}
inline const std::string& PbContent::big_cdn_src() const {
  // @@protoc_insertion_point(field_get:PbContent.big_cdn_src)
  return _internal_big_cdn_src();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_big_cdn_src(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_cdn_src_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.big_cdn_src)
}
inline std::string* PbContent::mutable_big_cdn_src() {
  std::string* _s = _internal_mutable_big_cdn_src();
  // @@protoc_insertion_point(field_mutable:PbContent.big_cdn_src)
  return _s;
}
inline const std::string& PbContent::_internal_big_cdn_src() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.big_cdn_src_.Get();
}
inline void PbContent::_internal_set_big_cdn_src(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_cdn_src_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_big_cdn_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.big_cdn_src_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_big_cdn_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.big_cdn_src)
  return _impl_.big_cdn_src_.Release();
}
inline void PbContent::set_allocated_big_cdn_src(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.big_cdn_src_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.big_cdn_src_.IsDefault()) {
          _impl_.big_cdn_src_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.big_cdn_src)
}

// string imgtype = 10;
inline void PbContent::clear_imgtype() {
  _impl_.imgtype_.ClearToEmpty();
}
inline const std::string& PbContent::imgtype() const {
  // @@protoc_insertion_point(field_get:PbContent.imgtype)
  return _internal_imgtype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_imgtype(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.imgtype_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.imgtype)
}
inline std::string* PbContent::mutable_imgtype() {
  std::string* _s = _internal_mutable_imgtype();
  // @@protoc_insertion_point(field_mutable:PbContent.imgtype)
  return _s;
}
inline const std::string& PbContent::_internal_imgtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.imgtype_.Get();
}
inline void PbContent::_internal_set_imgtype(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.imgtype_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_imgtype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.imgtype_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_imgtype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.imgtype)
  return _impl_.imgtype_.Release();
}
inline void PbContent::set_allocated_imgtype(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.imgtype_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imgtype_.IsDefault()) {
          _impl_.imgtype_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.imgtype)
}

// string voice_md5 = 12;
inline void PbContent::clear_voice_md5() {
  _impl_.voice_md5_.ClearToEmpty();
}
inline const std::string& PbContent::voice_md5() const {
  // @@protoc_insertion_point(field_get:PbContent.voice_md5)
  return _internal_voice_md5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_voice_md5(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voice_md5_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.voice_md5)
}
inline std::string* PbContent::mutable_voice_md5() {
  std::string* _s = _internal_mutable_voice_md5();
  // @@protoc_insertion_point(field_mutable:PbContent.voice_md5)
  return _s;
}
inline const std::string& PbContent::_internal_voice_md5() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voice_md5_.Get();
}
inline void PbContent::_internal_set_voice_md5(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voice_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_voice_md5() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.voice_md5_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_voice_md5() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.voice_md5)
  return _impl_.voice_md5_.Release();
}
inline void PbContent::set_allocated_voice_md5(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voice_md5_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voice_md5_.IsDefault()) {
          _impl_.voice_md5_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.voice_md5)
}

// uint32 during_time = 13;
inline void PbContent::clear_during_time() {
  _impl_.during_time_ = 0u;
}
inline ::uint32_t PbContent::during_time() const {
  // @@protoc_insertion_point(field_get:PbContent.during_time)
  return _internal_during_time();
}
inline void PbContent::set_during_time(::uint32_t value) {
  _internal_set_during_time(value);
  // @@protoc_insertion_point(field_set:PbContent.during_time)
}
inline ::uint32_t PbContent::_internal_during_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.during_time_;
}
inline void PbContent::_internal_set_during_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.during_time_ = value;
}

// uint32 is_sub = 14;
inline void PbContent::clear_is_sub() {
  _impl_.is_sub_ = 0u;
}
inline ::uint32_t PbContent::is_sub() const {
  // @@protoc_insertion_point(field_get:PbContent.is_sub)
  return _internal_is_sub();
}
inline void PbContent::set_is_sub(::uint32_t value) {
  _internal_set_is_sub(value);
  // @@protoc_insertion_point(field_set:PbContent.is_sub)
}
inline ::uint32_t PbContent::_internal_is_sub() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_sub_;
}
inline void PbContent::_internal_set_is_sub(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_sub_ = value;
}

// int64 uid = 15;
inline void PbContent::clear_uid() {
  _impl_.uid_ = ::int64_t{0};
}
inline ::int64_t PbContent::uid() const {
  // @@protoc_insertion_point(field_get:PbContent.uid)
  return _internal_uid();
}
inline void PbContent::set_uid(::int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:PbContent.uid)
}
inline ::int64_t PbContent::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void PbContent::_internal_set_uid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_ = value;
}

// uint32 width = 18;
inline void PbContent::clear_width() {
  _impl_.width_ = 0u;
}
inline ::uint32_t PbContent::width() const {
  // @@protoc_insertion_point(field_get:PbContent.width)
  return _internal_width();
}
inline void PbContent::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PbContent.width)
}
inline ::uint32_t PbContent::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void PbContent::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 19;
inline void PbContent::clear_height() {
  _impl_.height_ = 0u;
}
inline ::uint32_t PbContent::height() const {
  // @@protoc_insertion_point(field_get:PbContent.height)
  return _internal_height();
}
inline void PbContent::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PbContent.height)
}
inline ::uint32_t PbContent::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void PbContent::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// string packet_name = 20;
inline void PbContent::clear_packet_name() {
  _impl_.packet_name_.ClearToEmpty();
}
inline const std::string& PbContent::packet_name() const {
  // @@protoc_insertion_point(field_get:PbContent.packet_name)
  return _internal_packet_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_packet_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.packet_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.packet_name)
}
inline std::string* PbContent::mutable_packet_name() {
  std::string* _s = _internal_mutable_packet_name();
  // @@protoc_insertion_point(field_mutable:PbContent.packet_name)
  return _s;
}
inline const std::string& PbContent::_internal_packet_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packet_name_.Get();
}
inline void PbContent::_internal_set_packet_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.packet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_packet_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.packet_name_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_packet_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.packet_name)
  return _impl_.packet_name_.Release();
}
inline void PbContent::set_allocated_packet_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.packet_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.packet_name_.IsDefault()) {
          _impl_.packet_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.packet_name)
}

// string phonetype = 21;
inline void PbContent::clear_phonetype() {
  _impl_.phonetype_.ClearToEmpty();
}
inline const std::string& PbContent::phonetype() const {
  // @@protoc_insertion_point(field_get:PbContent.phonetype)
  return _internal_phonetype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_phonetype(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phonetype_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.phonetype)
}
inline std::string* PbContent::mutable_phonetype() {
  std::string* _s = _internal_mutable_phonetype();
  // @@protoc_insertion_point(field_mutable:PbContent.phonetype)
  return _s;
}
inline const std::string& PbContent::_internal_phonetype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phonetype_.Get();
}
inline void PbContent::_internal_set_phonetype(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phonetype_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_phonetype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.phonetype_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_phonetype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.phonetype)
  return _impl_.phonetype_.Release();
}
inline void PbContent::set_allocated_phonetype(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phonetype_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonetype_.IsDefault()) {
          _impl_.phonetype_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.phonetype)
}

// uint32 e_type = 24;
inline void PbContent::clear_e_type() {
  _impl_.e_type_ = 0u;
}
inline ::uint32_t PbContent::e_type() const {
  // @@protoc_insertion_point(field_get:PbContent.e_type)
  return _internal_e_type();
}
inline void PbContent::set_e_type(::uint32_t value) {
  _internal_set_e_type(value);
  // @@protoc_insertion_point(field_set:PbContent.e_type)
}
inline ::uint32_t PbContent::_internal_e_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.e_type_;
}
inline void PbContent::_internal_set_e_type(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.e_type_ = value;
}

// string origin_src = 25;
inline void PbContent::clear_origin_src() {
  _impl_.origin_src_.ClearToEmpty();
}
inline const std::string& PbContent::origin_src() const {
  // @@protoc_insertion_point(field_get:PbContent.origin_src)
  return _internal_origin_src();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PbContent::set_origin_src(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.origin_src_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PbContent.origin_src)
}
inline std::string* PbContent::mutable_origin_src() {
  std::string* _s = _internal_mutable_origin_src();
  // @@protoc_insertion_point(field_mutable:PbContent.origin_src)
  return _s;
}
inline const std::string& PbContent::_internal_origin_src() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_src_.Get();
}
inline void PbContent::_internal_set_origin_src(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.origin_src_.Set(value, GetArenaForAllocation());
}
inline std::string* PbContent::_internal_mutable_origin_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.origin_src_.Mutable( GetArenaForAllocation());
}
inline std::string* PbContent::release_origin_src() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.origin_src)
  return _impl_.origin_src_.Release();
}
inline void PbContent::set_allocated_origin_src(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.origin_src_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.origin_src_.IsDefault()) {
          _impl_.origin_src_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PbContent.origin_src)
}

// uint32 origin_size = 27;
inline void PbContent::clear_origin_size() {
  _impl_.origin_size_ = 0u;
}
inline ::uint32_t PbContent::origin_size() const {
  // @@protoc_insertion_point(field_get:PbContent.origin_size)
  return _internal_origin_size();
}
inline void PbContent::set_origin_size(::uint32_t value) {
  _internal_set_origin_size(value);
  // @@protoc_insertion_point(field_set:PbContent.origin_size)
}
inline ::uint32_t PbContent::_internal_origin_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_size_;
}
inline void PbContent::_internal_set_origin_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.origin_size_ = value;
}

// .TiebaPlusInfo tiebaplus_info = 40;
inline bool PbContent::has_tiebaplus_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tiebaplus_info_ != nullptr);
  return value;
}
inline const ::TiebaPlusInfo& PbContent::_internal_tiebaplus_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TiebaPlusInfo* p = _impl_.tiebaplus_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TiebaPlusInfo&>(::_TiebaPlusInfo_default_instance_);
}
inline const ::TiebaPlusInfo& PbContent::tiebaplus_info() const {
  // @@protoc_insertion_point(field_get:PbContent.tiebaplus_info)
  return _internal_tiebaplus_info();
}
inline void PbContent::unsafe_arena_set_allocated_tiebaplus_info(::TiebaPlusInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tiebaplus_info_);
  }
  _impl_.tiebaplus_info_ = reinterpret_cast<::TiebaPlusInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PbContent.tiebaplus_info)
}
inline ::TiebaPlusInfo* PbContent::release_tiebaplus_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TiebaPlusInfo* released = _impl_.tiebaplus_info_;
  _impl_.tiebaplus_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TiebaPlusInfo* PbContent::unsafe_arena_release_tiebaplus_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PbContent.tiebaplus_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TiebaPlusInfo* temp = _impl_.tiebaplus_info_;
  _impl_.tiebaplus_info_ = nullptr;
  return temp;
}
inline ::TiebaPlusInfo* PbContent::_internal_mutable_tiebaplus_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tiebaplus_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TiebaPlusInfo>(GetArenaForAllocation());
    _impl_.tiebaplus_info_ = reinterpret_cast<::TiebaPlusInfo*>(p);
  }
  return _impl_.tiebaplus_info_;
}
inline ::TiebaPlusInfo* PbContent::mutable_tiebaplus_info() {
  ::TiebaPlusInfo* _msg = _internal_mutable_tiebaplus_info();
  // @@protoc_insertion_point(field_mutable:PbContent.tiebaplus_info)
  return _msg;
}
inline void PbContent::set_allocated_tiebaplus_info(::TiebaPlusInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tiebaplus_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tiebaplus_info_ = reinterpret_cast<::TiebaPlusInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:PbContent.tiebaplus_info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_PbContent_2eproto_2epb_2eh
