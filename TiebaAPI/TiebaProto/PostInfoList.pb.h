// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PostInfoList.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PostInfoList_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_PostInfoList_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Media.pb.h"
#include "PollInfo.pb.h"
#include "PbContent.pb.h"
#include "Agree.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PostInfoList_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PostInfoList_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PostInfoList_2eproto;
class PostInfoList;
struct PostInfoListDefaultTypeInternal;
extern PostInfoListDefaultTypeInternal _PostInfoList_default_instance_;
class PostInfoList_PostInfoContent;
struct PostInfoList_PostInfoContentDefaultTypeInternal;
extern PostInfoList_PostInfoContentDefaultTypeInternal _PostInfoList_PostInfoContent_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class PostInfoList_PostInfoContent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PostInfoList.PostInfoContent) */ {
 public:
  inline PostInfoList_PostInfoContent() : PostInfoList_PostInfoContent(nullptr) {}
  ~PostInfoList_PostInfoContent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PostInfoList_PostInfoContent(::google::protobuf::internal::ConstantInitialized);

  PostInfoList_PostInfoContent(const PostInfoList_PostInfoContent& from);
  PostInfoList_PostInfoContent(PostInfoList_PostInfoContent&& from) noexcept
    : PostInfoList_PostInfoContent() {
    *this = ::std::move(from);
  }

  inline PostInfoList_PostInfoContent& operator=(const PostInfoList_PostInfoContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInfoList_PostInfoContent& operator=(PostInfoList_PostInfoContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostInfoList_PostInfoContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostInfoList_PostInfoContent* internal_default_instance() {
    return reinterpret_cast<const PostInfoList_PostInfoContent*>(
               &_PostInfoList_PostInfoContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PostInfoList_PostInfoContent& a, PostInfoList_PostInfoContent& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInfoList_PostInfoContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostInfoList_PostInfoContent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostInfoList_PostInfoContent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostInfoList_PostInfoContent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PostInfoList_PostInfoContent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PostInfoList_PostInfoContent& from) {
    PostInfoList_PostInfoContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInfoList_PostInfoContent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PostInfoList.PostInfoContent";
  }
  protected:
  explicit PostInfoList_PostInfoContent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostContentFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
    kPostTypeFieldNumber = 3,
    kPostIdFieldNumber = 4,
  };
  // repeated .PbContent post_content = 1;
  int post_content_size() const;
  private:
  int _internal_post_content_size() const;

  public:
  void clear_post_content() ;
  ::PbContent* mutable_post_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_post_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PbContent>& _internal_post_content() const;
  ::google::protobuf::RepeatedPtrField<::PbContent>* _internal_mutable_post_content();
  public:
  const ::PbContent& post_content(int index) const;
  ::PbContent* add_post_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      post_content() const;
  // uint64 create_time = 2;
  void clear_create_time() ;
  ::uint64_t create_time() const;
  void set_create_time(::uint64_t value);

  private:
  ::uint64_t _internal_create_time() const;
  void _internal_set_create_time(::uint64_t value);

  public:
  // uint64 post_type = 3;
  void clear_post_type() ;
  ::uint64_t post_type() const;
  void set_post_type(::uint64_t value);

  private:
  ::uint64_t _internal_post_type() const;
  void _internal_set_post_type(::uint64_t value);

  public:
  // uint64 post_id = 4;
  void clear_post_id() ;
  ::uint64_t post_id() const;
  void set_post_id(::uint64_t value);

  private:
  ::uint64_t _internal_post_id() const;
  void _internal_set_post_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:PostInfoList.PostInfoContent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::PbContent > post_content_;
    ::uint64_t create_time_;
    ::uint64_t post_type_;
    ::uint64_t post_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PostInfoList_2eproto;
};// -------------------------------------------------------------------

class PostInfoList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PostInfoList) */ {
 public:
  inline PostInfoList() : PostInfoList(nullptr) {}
  ~PostInfoList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PostInfoList(::google::protobuf::internal::ConstantInitialized);

  PostInfoList(const PostInfoList& from);
  PostInfoList(PostInfoList&& from) noexcept
    : PostInfoList() {
    *this = ::std::move(from);
  }

  inline PostInfoList& operator=(const PostInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostInfoList& operator=(PostInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostInfoList* internal_default_instance() {
    return reinterpret_cast<const PostInfoList*>(
               &_PostInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostInfoList& a, PostInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(PostInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostInfoList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PostInfoList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PostInfoList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PostInfoList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PostInfoList& from) {
    PostInfoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostInfoList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PostInfoList";
  }
  protected:
  explicit PostInfoList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PostInfoList_PostInfoContent PostInfoContent;

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 8,
    kMediaFieldNumber = 16,
    kFirstPostContentFieldNumber = 49,
    kForumNameFieldNumber = 6,
    kTitleFieldNumber = 7,
    kUserNameFieldNumber = 10,
    kUserPortraitFieldNumber = 19,
    kNameShowFieldNumber = 35,
    kPollInfoFieldNumber = 28,
    kAgreeFieldNumber = 40,
    kForumIdFieldNumber = 1,
    kThreadIdFieldNumber = 2,
    kPostIdFieldNumber = 3,
    kCreateTimeFieldNumber = 5,
    kReplyNumFieldNumber = 17,
    kUserIdFieldNumber = 18,
    kThreadTypeFieldNumber = 26,
    kFreqNumFieldNumber = 33,
    kShareNumFieldNumber = 39,
    kIsShareThreadFieldNumber = 44,
  };
  // repeated .PostInfoList.PostInfoContent content = 8;
  int content_size() const;
  private:
  int _internal_content_size() const;

  public:
  void clear_content() ;
  ::PostInfoList_PostInfoContent* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PostInfoList_PostInfoContent >*
      mutable_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PostInfoList_PostInfoContent>& _internal_content() const;
  ::google::protobuf::RepeatedPtrField<::PostInfoList_PostInfoContent>* _internal_mutable_content();
  public:
  const ::PostInfoList_PostInfoContent& content(int index) const;
  ::PostInfoList_PostInfoContent* add_content();
  const ::google::protobuf::RepeatedPtrField< ::PostInfoList_PostInfoContent >&
      content() const;
  // repeated .Media media = 16;
  int media_size() const;
  private:
  int _internal_media_size() const;

  public:
  void clear_media() ;
  ::Media* mutable_media(int index);
  ::google::protobuf::RepeatedPtrField< ::Media >*
      mutable_media();
  private:
  const ::google::protobuf::RepeatedPtrField<::Media>& _internal_media() const;
  ::google::protobuf::RepeatedPtrField<::Media>* _internal_mutable_media();
  public:
  const ::Media& media(int index) const;
  ::Media* add_media();
  const ::google::protobuf::RepeatedPtrField< ::Media >&
      media() const;
  // repeated .PbContent first_post_content = 49;
  int first_post_content_size() const;
  private:
  int _internal_first_post_content_size() const;

  public:
  void clear_first_post_content() ;
  ::PbContent* mutable_first_post_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_first_post_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PbContent>& _internal_first_post_content() const;
  ::google::protobuf::RepeatedPtrField<::PbContent>* _internal_mutable_first_post_content();
  public:
  const ::PbContent& first_post_content(int index) const;
  ::PbContent* add_first_post_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      first_post_content() const;
  // string forum_name = 6;
  void clear_forum_name() ;
  const std::string& forum_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forum_name(Arg_&& arg, Args_... args);
  std::string* mutable_forum_name();
  PROTOBUF_NODISCARD std::string* release_forum_name();
  void set_allocated_forum_name(std::string* ptr);

  private:
  const std::string& _internal_forum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forum_name(
      const std::string& value);
  std::string* _internal_mutable_forum_name();

  public:
  // string title = 7;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string user_name = 10;
  void clear_user_name() ;
  const std::string& user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* ptr);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string user_portrait = 19;
  void clear_user_portrait() ;
  const std::string& user_portrait() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_portrait(Arg_&& arg, Args_... args);
  std::string* mutable_user_portrait();
  PROTOBUF_NODISCARD std::string* release_user_portrait();
  void set_allocated_user_portrait(std::string* ptr);

  private:
  const std::string& _internal_user_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_portrait(
      const std::string& value);
  std::string* _internal_mutable_user_portrait();

  public:
  // string name_show = 35;
  void clear_name_show() ;
  const std::string& name_show() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_show(Arg_&& arg, Args_... args);
  std::string* mutable_name_show();
  PROTOBUF_NODISCARD std::string* release_name_show();
  void set_allocated_name_show(std::string* ptr);

  private:
  const std::string& _internal_name_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_show(
      const std::string& value);
  std::string* _internal_mutable_name_show();

  public:
  // .PollInfo poll_info = 28;
  bool has_poll_info() const;
  void clear_poll_info() ;
  const ::PollInfo& poll_info() const;
  PROTOBUF_NODISCARD ::PollInfo* release_poll_info();
  ::PollInfo* mutable_poll_info();
  void set_allocated_poll_info(::PollInfo* value);
  void unsafe_arena_set_allocated_poll_info(::PollInfo* value);
  ::PollInfo* unsafe_arena_release_poll_info();

  private:
  const ::PollInfo& _internal_poll_info() const;
  ::PollInfo* _internal_mutable_poll_info();

  public:
  // .Agree agree = 40;
  bool has_agree() const;
  void clear_agree() ;
  const ::Agree& agree() const;
  PROTOBUF_NODISCARD ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* value);
  void unsafe_arena_set_allocated_agree(::Agree* value);
  ::Agree* unsafe_arena_release_agree();

  private:
  const ::Agree& _internal_agree() const;
  ::Agree* _internal_mutable_agree();

  public:
  // uint64 forum_id = 1;
  void clear_forum_id() ;
  ::uint64_t forum_id() const;
  void set_forum_id(::uint64_t value);

  private:
  ::uint64_t _internal_forum_id() const;
  void _internal_set_forum_id(::uint64_t value);

  public:
  // uint64 thread_id = 2;
  void clear_thread_id() ;
  ::uint64_t thread_id() const;
  void set_thread_id(::uint64_t value);

  private:
  ::uint64_t _internal_thread_id() const;
  void _internal_set_thread_id(::uint64_t value);

  public:
  // uint64 post_id = 3;
  void clear_post_id() ;
  ::uint64_t post_id() const;
  void set_post_id(::uint64_t value);

  private:
  ::uint64_t _internal_post_id() const;
  void _internal_set_post_id(::uint64_t value);

  public:
  // uint32 create_time = 5;
  void clear_create_time() ;
  ::uint32_t create_time() const;
  void set_create_time(::uint32_t value);

  private:
  ::uint32_t _internal_create_time() const;
  void _internal_set_create_time(::uint32_t value);

  public:
  // uint32 reply_num = 17;
  void clear_reply_num() ;
  ::uint32_t reply_num() const;
  void set_reply_num(::uint32_t value);

  private:
  ::uint32_t _internal_reply_num() const;
  void _internal_set_reply_num(::uint32_t value);

  public:
  // int64 user_id = 18;
  void clear_user_id() ;
  ::int64_t user_id() const;
  void set_user_id(::int64_t value);

  private:
  ::int64_t _internal_user_id() const;
  void _internal_set_user_id(::int64_t value);

  public:
  // uint64 thread_type = 26;
  void clear_thread_type() ;
  ::uint64_t thread_type() const;
  void set_thread_type(::uint64_t value);

  private:
  ::uint64_t _internal_thread_type() const;
  void _internal_set_thread_type(::uint64_t value);

  public:
  // int32 freq_num = 33;
  void clear_freq_num() ;
  ::int32_t freq_num() const;
  void set_freq_num(::int32_t value);

  private:
  ::int32_t _internal_freq_num() const;
  void _internal_set_freq_num(::int32_t value);

  public:
  // int32 share_num = 39;
  void clear_share_num() ;
  ::int32_t share_num() const;
  void set_share_num(::int32_t value);

  private:
  ::int32_t _internal_share_num() const;
  void _internal_set_share_num(::int32_t value);

  public:
  // int32 is_share_thread = 44;
  void clear_is_share_thread() ;
  ::int32_t is_share_thread() const;
  void set_is_share_thread(::int32_t value);

  private:
  ::int32_t _internal_is_share_thread() const;
  void _internal_set_is_share_thread(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PostInfoList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 20, 5, 83, 9> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::PostInfoList_PostInfoContent > content_;
    ::google::protobuf::RepeatedPtrField< ::Media > media_;
    ::google::protobuf::RepeatedPtrField< ::PbContent > first_post_content_;
    ::google::protobuf::internal::ArenaStringPtr forum_name_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr user_name_;
    ::google::protobuf::internal::ArenaStringPtr user_portrait_;
    ::google::protobuf::internal::ArenaStringPtr name_show_;
    ::PollInfo* poll_info_;
    ::Agree* agree_;
    ::uint64_t forum_id_;
    ::uint64_t thread_id_;
    ::uint64_t post_id_;
    ::uint32_t create_time_;
    ::uint32_t reply_num_;
    ::int64_t user_id_;
    ::uint64_t thread_type_;
    ::int32_t freq_num_;
    ::int32_t share_num_;
    ::int32_t is_share_thread_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PostInfoList_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PostInfoList_PostInfoContent

// repeated .PbContent post_content = 1;
inline int PostInfoList_PostInfoContent::_internal_post_content_size() const {
  return _internal_post_content().size();
}
inline int PostInfoList_PostInfoContent::post_content_size() const {
  return _internal_post_content_size();
}
inline ::PbContent* PostInfoList_PostInfoContent::mutable_post_content(int index) {
  // @@protoc_insertion_point(field_mutable:PostInfoList.PostInfoContent.post_content)
  return _internal_mutable_post_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
PostInfoList_PostInfoContent::mutable_post_content() {
  // @@protoc_insertion_point(field_mutable_list:PostInfoList.PostInfoContent.post_content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_post_content();
}
inline const ::PbContent& PostInfoList_PostInfoContent::post_content(int index) const {
  // @@protoc_insertion_point(field_get:PostInfoList.PostInfoContent.post_content)
    return _internal_post_content().Get(index);
}
inline ::PbContent* PostInfoList_PostInfoContent::add_post_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PbContent* _add = _internal_mutable_post_content()->Add();
  // @@protoc_insertion_point(field_add:PostInfoList.PostInfoContent.post_content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
PostInfoList_PostInfoContent::post_content() const {
  // @@protoc_insertion_point(field_list:PostInfoList.PostInfoContent.post_content)
  return _internal_post_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PbContent>&
PostInfoList_PostInfoContent::_internal_post_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_content_;
}
inline ::google::protobuf::RepeatedPtrField<::PbContent>*
PostInfoList_PostInfoContent::_internal_mutable_post_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.post_content_;
}

// uint64 create_time = 2;
inline void PostInfoList_PostInfoContent::clear_create_time() {
  _impl_.create_time_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList_PostInfoContent::create_time() const {
  // @@protoc_insertion_point(field_get:PostInfoList.PostInfoContent.create_time)
  return _internal_create_time();
}
inline void PostInfoList_PostInfoContent::set_create_time(::uint64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:PostInfoList.PostInfoContent.create_time)
}
inline ::uint64_t PostInfoList_PostInfoContent::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.create_time_;
}
inline void PostInfoList_PostInfoContent::_internal_set_create_time(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_ = value;
}

// uint64 post_type = 3;
inline void PostInfoList_PostInfoContent::clear_post_type() {
  _impl_.post_type_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList_PostInfoContent::post_type() const {
  // @@protoc_insertion_point(field_get:PostInfoList.PostInfoContent.post_type)
  return _internal_post_type();
}
inline void PostInfoList_PostInfoContent::set_post_type(::uint64_t value) {
  _internal_set_post_type(value);
  // @@protoc_insertion_point(field_set:PostInfoList.PostInfoContent.post_type)
}
inline ::uint64_t PostInfoList_PostInfoContent::_internal_post_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_type_;
}
inline void PostInfoList_PostInfoContent::_internal_set_post_type(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_type_ = value;
}

// uint64 post_id = 4;
inline void PostInfoList_PostInfoContent::clear_post_id() {
  _impl_.post_id_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList_PostInfoContent::post_id() const {
  // @@protoc_insertion_point(field_get:PostInfoList.PostInfoContent.post_id)
  return _internal_post_id();
}
inline void PostInfoList_PostInfoContent::set_post_id(::uint64_t value) {
  _internal_set_post_id(value);
  // @@protoc_insertion_point(field_set:PostInfoList.PostInfoContent.post_id)
}
inline ::uint64_t PostInfoList_PostInfoContent::_internal_post_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_id_;
}
inline void PostInfoList_PostInfoContent::_internal_set_post_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_id_ = value;
}

// -------------------------------------------------------------------

// PostInfoList

// uint64 forum_id = 1;
inline void PostInfoList::clear_forum_id() {
  _impl_.forum_id_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList::forum_id() const {
  // @@protoc_insertion_point(field_get:PostInfoList.forum_id)
  return _internal_forum_id();
}
inline void PostInfoList::set_forum_id(::uint64_t value) {
  _internal_set_forum_id(value);
  // @@protoc_insertion_point(field_set:PostInfoList.forum_id)
}
inline ::uint64_t PostInfoList::_internal_forum_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_id_;
}
inline void PostInfoList::_internal_set_forum_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_id_ = value;
}

// uint64 thread_id = 2;
inline void PostInfoList::clear_thread_id() {
  _impl_.thread_id_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList::thread_id() const {
  // @@protoc_insertion_point(field_get:PostInfoList.thread_id)
  return _internal_thread_id();
}
inline void PostInfoList::set_thread_id(::uint64_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:PostInfoList.thread_id)
}
inline ::uint64_t PostInfoList::_internal_thread_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thread_id_;
}
inline void PostInfoList::_internal_set_thread_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.thread_id_ = value;
}

// uint64 post_id = 3;
inline void PostInfoList::clear_post_id() {
  _impl_.post_id_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList::post_id() const {
  // @@protoc_insertion_point(field_get:PostInfoList.post_id)
  return _internal_post_id();
}
inline void PostInfoList::set_post_id(::uint64_t value) {
  _internal_set_post_id(value);
  // @@protoc_insertion_point(field_set:PostInfoList.post_id)
}
inline ::uint64_t PostInfoList::_internal_post_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_id_;
}
inline void PostInfoList::_internal_set_post_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_id_ = value;
}

// uint32 create_time = 5;
inline void PostInfoList::clear_create_time() {
  _impl_.create_time_ = 0u;
}
inline ::uint32_t PostInfoList::create_time() const {
  // @@protoc_insertion_point(field_get:PostInfoList.create_time)
  return _internal_create_time();
}
inline void PostInfoList::set_create_time(::uint32_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:PostInfoList.create_time)
}
inline ::uint32_t PostInfoList::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.create_time_;
}
inline void PostInfoList::_internal_set_create_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_ = value;
}

// string forum_name = 6;
inline void PostInfoList::clear_forum_name() {
  _impl_.forum_name_.ClearToEmpty();
}
inline const std::string& PostInfoList::forum_name() const {
  // @@protoc_insertion_point(field_get:PostInfoList.forum_name)
  return _internal_forum_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostInfoList::set_forum_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PostInfoList.forum_name)
}
inline std::string* PostInfoList::mutable_forum_name() {
  std::string* _s = _internal_mutable_forum_name();
  // @@protoc_insertion_point(field_mutable:PostInfoList.forum_name)
  return _s;
}
inline const std::string& PostInfoList::_internal_forum_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_name_.Get();
}
inline void PostInfoList::_internal_set_forum_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PostInfoList::_internal_mutable_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.forum_name_.Mutable( GetArenaForAllocation());
}
inline std::string* PostInfoList::release_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.forum_name)
  return _impl_.forum_name_.Release();
}
inline void PostInfoList::set_allocated_forum_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forum_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.forum_name_.IsDefault()) {
          _impl_.forum_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.forum_name)
}

// string title = 7;
inline void PostInfoList::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& PostInfoList::title() const {
  // @@protoc_insertion_point(field_get:PostInfoList.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostInfoList::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PostInfoList.title)
}
inline std::string* PostInfoList::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PostInfoList.title)
  return _s;
}
inline const std::string& PostInfoList::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void PostInfoList::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* PostInfoList::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* PostInfoList::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.title)
  return _impl_.title_.Release();
}
inline void PostInfoList::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.title)
}

// repeated .PostInfoList.PostInfoContent content = 8;
inline int PostInfoList::_internal_content_size() const {
  return _internal_content().size();
}
inline int PostInfoList::content_size() const {
  return _internal_content_size();
}
inline void PostInfoList::clear_content() {
  _internal_mutable_content()->Clear();
}
inline ::PostInfoList_PostInfoContent* PostInfoList::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:PostInfoList.content)
  return _internal_mutable_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PostInfoList_PostInfoContent >*
PostInfoList::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:PostInfoList.content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_content();
}
inline const ::PostInfoList_PostInfoContent& PostInfoList::content(int index) const {
  // @@protoc_insertion_point(field_get:PostInfoList.content)
    return _internal_content().Get(index);
}
inline ::PostInfoList_PostInfoContent* PostInfoList::add_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PostInfoList_PostInfoContent* _add = _internal_mutable_content()->Add();
  // @@protoc_insertion_point(field_add:PostInfoList.content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PostInfoList_PostInfoContent >&
PostInfoList::content() const {
  // @@protoc_insertion_point(field_list:PostInfoList.content)
  return _internal_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PostInfoList_PostInfoContent>&
PostInfoList::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_;
}
inline ::google::protobuf::RepeatedPtrField<::PostInfoList_PostInfoContent>*
PostInfoList::_internal_mutable_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.content_;
}

// string user_name = 10;
inline void PostInfoList::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& PostInfoList::user_name() const {
  // @@protoc_insertion_point(field_get:PostInfoList.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostInfoList::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PostInfoList.user_name)
}
inline std::string* PostInfoList::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:PostInfoList.user_name)
  return _s;
}
inline const std::string& PostInfoList::_internal_user_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_name_.Get();
}
inline void PostInfoList::_internal_set_user_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PostInfoList::_internal_mutable_user_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* PostInfoList::release_user_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.user_name)
  return _impl_.user_name_.Release();
}
inline void PostInfoList::set_allocated_user_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.user_name)
}

// repeated .Media media = 16;
inline int PostInfoList::_internal_media_size() const {
  return _internal_media().size();
}
inline int PostInfoList::media_size() const {
  return _internal_media_size();
}
inline ::Media* PostInfoList::mutable_media(int index) {
  // @@protoc_insertion_point(field_mutable:PostInfoList.media)
  return _internal_mutable_media()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Media >*
PostInfoList::mutable_media() {
  // @@protoc_insertion_point(field_mutable_list:PostInfoList.media)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_media();
}
inline const ::Media& PostInfoList::media(int index) const {
  // @@protoc_insertion_point(field_get:PostInfoList.media)
    return _internal_media().Get(index);
}
inline ::Media* PostInfoList::add_media() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Media* _add = _internal_mutable_media()->Add();
  // @@protoc_insertion_point(field_add:PostInfoList.media)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Media >&
PostInfoList::media() const {
  // @@protoc_insertion_point(field_list:PostInfoList.media)
  return _internal_media();
}
inline const ::google::protobuf::RepeatedPtrField<::Media>&
PostInfoList::_internal_media() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.media_;
}
inline ::google::protobuf::RepeatedPtrField<::Media>*
PostInfoList::_internal_mutable_media() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.media_;
}

// uint32 reply_num = 17;
inline void PostInfoList::clear_reply_num() {
  _impl_.reply_num_ = 0u;
}
inline ::uint32_t PostInfoList::reply_num() const {
  // @@protoc_insertion_point(field_get:PostInfoList.reply_num)
  return _internal_reply_num();
}
inline void PostInfoList::set_reply_num(::uint32_t value) {
  _internal_set_reply_num(value);
  // @@protoc_insertion_point(field_set:PostInfoList.reply_num)
}
inline ::uint32_t PostInfoList::_internal_reply_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reply_num_;
}
inline void PostInfoList::_internal_set_reply_num(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reply_num_ = value;
}

// int64 user_id = 18;
inline void PostInfoList::clear_user_id() {
  _impl_.user_id_ = ::int64_t{0};
}
inline ::int64_t PostInfoList::user_id() const {
  // @@protoc_insertion_point(field_get:PostInfoList.user_id)
  return _internal_user_id();
}
inline void PostInfoList::set_user_id(::int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:PostInfoList.user_id)
}
inline ::int64_t PostInfoList::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void PostInfoList::_internal_set_user_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string user_portrait = 19;
inline void PostInfoList::clear_user_portrait() {
  _impl_.user_portrait_.ClearToEmpty();
}
inline const std::string& PostInfoList::user_portrait() const {
  // @@protoc_insertion_point(field_get:PostInfoList.user_portrait)
  return _internal_user_portrait();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostInfoList::set_user_portrait(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_portrait_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PostInfoList.user_portrait)
}
inline std::string* PostInfoList::mutable_user_portrait() {
  std::string* _s = _internal_mutable_user_portrait();
  // @@protoc_insertion_point(field_mutable:PostInfoList.user_portrait)
  return _s;
}
inline const std::string& PostInfoList::_internal_user_portrait() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_portrait_.Get();
}
inline void PostInfoList::_internal_set_user_portrait(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_portrait_.Set(value, GetArenaForAllocation());
}
inline std::string* PostInfoList::_internal_mutable_user_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_portrait_.Mutable( GetArenaForAllocation());
}
inline std::string* PostInfoList::release_user_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.user_portrait)
  return _impl_.user_portrait_.Release();
}
inline void PostInfoList::set_allocated_user_portrait(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_portrait_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_portrait_.IsDefault()) {
          _impl_.user_portrait_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.user_portrait)
}

// uint64 thread_type = 26;
inline void PostInfoList::clear_thread_type() {
  _impl_.thread_type_ = ::uint64_t{0u};
}
inline ::uint64_t PostInfoList::thread_type() const {
  // @@protoc_insertion_point(field_get:PostInfoList.thread_type)
  return _internal_thread_type();
}
inline void PostInfoList::set_thread_type(::uint64_t value) {
  _internal_set_thread_type(value);
  // @@protoc_insertion_point(field_set:PostInfoList.thread_type)
}
inline ::uint64_t PostInfoList::_internal_thread_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thread_type_;
}
inline void PostInfoList::_internal_set_thread_type(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.thread_type_ = value;
}

// .PollInfo poll_info = 28;
inline bool PostInfoList::has_poll_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_info_ != nullptr);
  return value;
}
inline const ::PollInfo& PostInfoList::_internal_poll_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PollInfo* p = _impl_.poll_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PollInfo&>(::_PollInfo_default_instance_);
}
inline const ::PollInfo& PostInfoList::poll_info() const {
  // @@protoc_insertion_point(field_get:PostInfoList.poll_info)
  return _internal_poll_info();
}
inline void PostInfoList::unsafe_arena_set_allocated_poll_info(::PollInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_info_);
  }
  _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PostInfoList.poll_info)
}
inline ::PollInfo* PostInfoList::release_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PollInfo* released = _impl_.poll_info_;
  _impl_.poll_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PollInfo* PostInfoList::unsafe_arena_release_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.poll_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PollInfo* temp = _impl_.poll_info_;
  _impl_.poll_info_ = nullptr;
  return temp;
}
inline ::PollInfo* PostInfoList::_internal_mutable_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.poll_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PollInfo>(GetArenaForAllocation());
    _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(p);
  }
  return _impl_.poll_info_;
}
inline ::PollInfo* PostInfoList::mutable_poll_info() {
  ::PollInfo* _msg = _internal_mutable_poll_info();
  // @@protoc_insertion_point(field_mutable:PostInfoList.poll_info)
  return _msg;
}
inline void PostInfoList::set_allocated_poll_info(::PollInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.poll_info)
}

// int32 freq_num = 33;
inline void PostInfoList::clear_freq_num() {
  _impl_.freq_num_ = 0;
}
inline ::int32_t PostInfoList::freq_num() const {
  // @@protoc_insertion_point(field_get:PostInfoList.freq_num)
  return _internal_freq_num();
}
inline void PostInfoList::set_freq_num(::int32_t value) {
  _internal_set_freq_num(value);
  // @@protoc_insertion_point(field_set:PostInfoList.freq_num)
}
inline ::int32_t PostInfoList::_internal_freq_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.freq_num_;
}
inline void PostInfoList::_internal_set_freq_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.freq_num_ = value;
}

// string name_show = 35;
inline void PostInfoList::clear_name_show() {
  _impl_.name_show_.ClearToEmpty();
}
inline const std::string& PostInfoList::name_show() const {
  // @@protoc_insertion_point(field_get:PostInfoList.name_show)
  return _internal_name_show();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PostInfoList::set_name_show(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_show_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PostInfoList.name_show)
}
inline std::string* PostInfoList::mutable_name_show() {
  std::string* _s = _internal_mutable_name_show();
  // @@protoc_insertion_point(field_mutable:PostInfoList.name_show)
  return _s;
}
inline const std::string& PostInfoList::_internal_name_show() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_show_.Get();
}
inline void PostInfoList::_internal_set_name_show(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_show_.Set(value, GetArenaForAllocation());
}
inline std::string* PostInfoList::_internal_mutable_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_show_.Mutable( GetArenaForAllocation());
}
inline std::string* PostInfoList::release_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.name_show)
  return _impl_.name_show_.Release();
}
inline void PostInfoList::set_allocated_name_show(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_show_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_show_.IsDefault()) {
          _impl_.name_show_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.name_show)
}

// int32 share_num = 39;
inline void PostInfoList::clear_share_num() {
  _impl_.share_num_ = 0;
}
inline ::int32_t PostInfoList::share_num() const {
  // @@protoc_insertion_point(field_get:PostInfoList.share_num)
  return _internal_share_num();
}
inline void PostInfoList::set_share_num(::int32_t value) {
  _internal_set_share_num(value);
  // @@protoc_insertion_point(field_set:PostInfoList.share_num)
}
inline ::int32_t PostInfoList::_internal_share_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.share_num_;
}
inline void PostInfoList::_internal_set_share_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.share_num_ = value;
}

// .Agree agree = 40;
inline bool PostInfoList::has_agree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.agree_ != nullptr);
  return value;
}
inline const ::Agree& PostInfoList::_internal_agree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Agree* p = _impl_.agree_;
  return p != nullptr ? *p : reinterpret_cast<const ::Agree&>(::_Agree_default_instance_);
}
inline const ::Agree& PostInfoList::agree() const {
  // @@protoc_insertion_point(field_get:PostInfoList.agree)
  return _internal_agree();
}
inline void PostInfoList::unsafe_arena_set_allocated_agree(::Agree* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }
  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PostInfoList.agree)
}
inline ::Agree* PostInfoList::release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Agree* released = _impl_.agree_;
  _impl_.agree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Agree* PostInfoList::unsafe_arena_release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PostInfoList.agree)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Agree* temp = _impl_.agree_;
  _impl_.agree_ = nullptr;
  return temp;
}
inline ::Agree* PostInfoList::_internal_mutable_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.agree_ == nullptr) {
    auto* p = CreateMaybeMessage<::Agree>(GetArenaForAllocation());
    _impl_.agree_ = reinterpret_cast<::Agree*>(p);
  }
  return _impl_.agree_;
}
inline ::Agree* PostInfoList::mutable_agree() {
  ::Agree* _msg = _internal_mutable_agree();
  // @@protoc_insertion_point(field_mutable:PostInfoList.agree)
  return _msg;
}
inline void PostInfoList::set_allocated_agree(::Agree* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  // @@protoc_insertion_point(field_set_allocated:PostInfoList.agree)
}

// int32 is_share_thread = 44;
inline void PostInfoList::clear_is_share_thread() {
  _impl_.is_share_thread_ = 0;
}
inline ::int32_t PostInfoList::is_share_thread() const {
  // @@protoc_insertion_point(field_get:PostInfoList.is_share_thread)
  return _internal_is_share_thread();
}
inline void PostInfoList::set_is_share_thread(::int32_t value) {
  _internal_set_is_share_thread(value);
  // @@protoc_insertion_point(field_set:PostInfoList.is_share_thread)
}
inline ::int32_t PostInfoList::_internal_is_share_thread() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_share_thread_;
}
inline void PostInfoList::_internal_set_is_share_thread(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_share_thread_ = value;
}

// repeated .PbContent first_post_content = 49;
inline int PostInfoList::_internal_first_post_content_size() const {
  return _internal_first_post_content().size();
}
inline int PostInfoList::first_post_content_size() const {
  return _internal_first_post_content_size();
}
inline ::PbContent* PostInfoList::mutable_first_post_content(int index) {
  // @@protoc_insertion_point(field_mutable:PostInfoList.first_post_content)
  return _internal_mutable_first_post_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
PostInfoList::mutable_first_post_content() {
  // @@protoc_insertion_point(field_mutable_list:PostInfoList.first_post_content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_first_post_content();
}
inline const ::PbContent& PostInfoList::first_post_content(int index) const {
  // @@protoc_insertion_point(field_get:PostInfoList.first_post_content)
    return _internal_first_post_content().Get(index);
}
inline ::PbContent* PostInfoList::add_first_post_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PbContent* _add = _internal_mutable_first_post_content()->Add();
  // @@protoc_insertion_point(field_add:PostInfoList.first_post_content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
PostInfoList::first_post_content() const {
  // @@protoc_insertion_point(field_list:PostInfoList.first_post_content)
  return _internal_first_post_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PbContent>&
PostInfoList::_internal_first_post_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.first_post_content_;
}
inline ::google::protobuf::RepeatedPtrField<::PbContent>*
PostInfoList::_internal_mutable_first_post_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.first_post_content_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_PostInfoList_2eproto_2epb_2eh
