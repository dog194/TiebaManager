// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PollInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PollInfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_PollInfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PollInfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PollInfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PollInfo_2eproto;
class PollInfo;
struct PollInfoDefaultTypeInternal;
extern PollInfoDefaultTypeInternal _PollInfo_default_instance_;
class PollInfo_PollOption;
struct PollInfo_PollOptionDefaultTypeInternal;
extern PollInfo_PollOptionDefaultTypeInternal _PollInfo_PollOption_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class PollInfo_PollOption final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PollInfo.PollOption) */ {
 public:
  inline PollInfo_PollOption() : PollInfo_PollOption(nullptr) {}
  ~PollInfo_PollOption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PollInfo_PollOption(::google::protobuf::internal::ConstantInitialized);

  PollInfo_PollOption(const PollInfo_PollOption& from);
  PollInfo_PollOption(PollInfo_PollOption&& from) noexcept
    : PollInfo_PollOption() {
    *this = ::std::move(from);
  }

  inline PollInfo_PollOption& operator=(const PollInfo_PollOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollInfo_PollOption& operator=(PollInfo_PollOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollInfo_PollOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollInfo_PollOption* internal_default_instance() {
    return reinterpret_cast<const PollInfo_PollOption*>(
               &_PollInfo_PollOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PollInfo_PollOption& a, PollInfo_PollOption& b) {
    a.Swap(&b);
  }
  inline void Swap(PollInfo_PollOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollInfo_PollOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PollInfo_PollOption* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PollInfo_PollOption>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PollInfo_PollOption& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PollInfo_PollOption& from) {
    PollInfo_PollOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollInfo_PollOption* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PollInfo.PollOption";
  }
  protected:
  explicit PollInfo_PollOption(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kNumFieldNumber = 2,
  };
  // string text = 3;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // int64 num = 2;
  void clear_num() ;
  ::int64_t num() const;
  void set_num(::int64_t value);

  private:
  ::int64_t _internal_num() const;
  void _internal_set_num(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:PollInfo.PollOption)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 32, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::int64_t num_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PollInfo_2eproto;
};// -------------------------------------------------------------------

class PollInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PollInfo) */ {
 public:
  inline PollInfo() : PollInfo(nullptr) {}
  ~PollInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PollInfo(::google::protobuf::internal::ConstantInitialized);

  PollInfo(const PollInfo& from);
  PollInfo(PollInfo&& from) noexcept
    : PollInfo() {
    *this = ::std::move(from);
  }

  inline PollInfo& operator=(const PollInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollInfo& operator=(PollInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollInfo* internal_default_instance() {
    return reinterpret_cast<const PollInfo*>(
               &_PollInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PollInfo& a, PollInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PollInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PollInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PollInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PollInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PollInfo& from) {
    PollInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PollInfo";
  }
  protected:
  explicit PollInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PollInfo_PollOption PollOption;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 9,
    kTitleFieldNumber = 12,
    kTotalNumFieldNumber = 3,
    kTotalPollFieldNumber = 11,
    kIsMultiFieldNumber = 2,
  };
  // repeated .PollInfo.PollOption options = 9;
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::PollInfo_PollOption* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField< ::PollInfo_PollOption >*
      mutable_options();
  private:
  const ::google::protobuf::RepeatedPtrField<::PollInfo_PollOption>& _internal_options() const;
  ::google::protobuf::RepeatedPtrField<::PollInfo_PollOption>* _internal_mutable_options();
  public:
  const ::PollInfo_PollOption& options(int index) const;
  ::PollInfo_PollOption* add_options();
  const ::google::protobuf::RepeatedPtrField< ::PollInfo_PollOption >&
      options() const;
  // string title = 12;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // int64 total_num = 3;
  void clear_total_num() ;
  ::int64_t total_num() const;
  void set_total_num(::int64_t value);

  private:
  ::int64_t _internal_total_num() const;
  void _internal_set_total_num(::int64_t value);

  public:
  // int64 total_poll = 11;
  void clear_total_poll() ;
  ::int64_t total_poll() const;
  void set_total_poll(::int64_t value);

  private:
  ::int64_t _internal_total_poll() const;
  void _internal_set_total_poll(::int64_t value);

  public:
  // int32 is_multi = 2;
  void clear_is_multi() ;
  ::int32_t is_multi() const;
  void set_is_multi(::int32_t value);

  private:
  ::int32_t _internal_is_multi() const;
  void _internal_set_is_multi(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PollInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 5, 1, 22, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::PollInfo_PollOption > options_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::int64_t total_num_;
    ::int64_t total_poll_;
    ::int32_t is_multi_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PollInfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PollInfo_PollOption

// int64 num = 2;
inline void PollInfo_PollOption::clear_num() {
  _impl_.num_ = ::int64_t{0};
}
inline ::int64_t PollInfo_PollOption::num() const {
  // @@protoc_insertion_point(field_get:PollInfo.PollOption.num)
  return _internal_num();
}
inline void PollInfo_PollOption::set_num(::int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PollInfo.PollOption.num)
}
inline ::int64_t PollInfo_PollOption::_internal_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline void PollInfo_PollOption::_internal_set_num(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_ = value;
}

// string text = 3;
inline void PollInfo_PollOption::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& PollInfo_PollOption::text() const {
  // @@protoc_insertion_point(field_get:PollInfo.PollOption.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PollInfo_PollOption::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PollInfo.PollOption.text)
}
inline std::string* PollInfo_PollOption::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:PollInfo.PollOption.text)
  return _s;
}
inline const std::string& PollInfo_PollOption::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void PollInfo_PollOption::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* PollInfo_PollOption::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* PollInfo_PollOption::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PollInfo.PollOption.text)
  return _impl_.text_.Release();
}
inline void PollInfo_PollOption::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PollInfo.PollOption.text)
}

// -------------------------------------------------------------------

// PollInfo

// int32 is_multi = 2;
inline void PollInfo::clear_is_multi() {
  _impl_.is_multi_ = 0;
}
inline ::int32_t PollInfo::is_multi() const {
  // @@protoc_insertion_point(field_get:PollInfo.is_multi)
  return _internal_is_multi();
}
inline void PollInfo::set_is_multi(::int32_t value) {
  _internal_set_is_multi(value);
  // @@protoc_insertion_point(field_set:PollInfo.is_multi)
}
inline ::int32_t PollInfo::_internal_is_multi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_multi_;
}
inline void PollInfo::_internal_set_is_multi(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_multi_ = value;
}

// int64 total_num = 3;
inline void PollInfo::clear_total_num() {
  _impl_.total_num_ = ::int64_t{0};
}
inline ::int64_t PollInfo::total_num() const {
  // @@protoc_insertion_point(field_get:PollInfo.total_num)
  return _internal_total_num();
}
inline void PollInfo::set_total_num(::int64_t value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:PollInfo.total_num)
}
inline ::int64_t PollInfo::_internal_total_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_num_;
}
inline void PollInfo::_internal_set_total_num(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_num_ = value;
}

// repeated .PollInfo.PollOption options = 9;
inline int PollInfo::_internal_options_size() const {
  return _internal_options().size();
}
inline int PollInfo::options_size() const {
  return _internal_options_size();
}
inline void PollInfo::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::PollInfo_PollOption* PollInfo::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:PollInfo.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PollInfo_PollOption >*
PollInfo::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:PollInfo.options)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_options();
}
inline const ::PollInfo_PollOption& PollInfo::options(int index) const {
  // @@protoc_insertion_point(field_get:PollInfo.options)
    return _internal_options().Get(index);
}
inline ::PollInfo_PollOption* PollInfo::add_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PollInfo_PollOption* _add = _internal_mutable_options()->Add();
  // @@protoc_insertion_point(field_add:PollInfo.options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PollInfo_PollOption >&
PollInfo::options() const {
  // @@protoc_insertion_point(field_list:PollInfo.options)
  return _internal_options();
}
inline const ::google::protobuf::RepeatedPtrField<::PollInfo_PollOption>&
PollInfo::_internal_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.options_;
}
inline ::google::protobuf::RepeatedPtrField<::PollInfo_PollOption>*
PollInfo::_internal_mutable_options() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.options_;
}

// int64 total_poll = 11;
inline void PollInfo::clear_total_poll() {
  _impl_.total_poll_ = ::int64_t{0};
}
inline ::int64_t PollInfo::total_poll() const {
  // @@protoc_insertion_point(field_get:PollInfo.total_poll)
  return _internal_total_poll();
}
inline void PollInfo::set_total_poll(::int64_t value) {
  _internal_set_total_poll(value);
  // @@protoc_insertion_point(field_set:PollInfo.total_poll)
}
inline ::int64_t PollInfo::_internal_total_poll() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_poll_;
}
inline void PollInfo::_internal_set_total_poll(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_poll_ = value;
}

// string title = 12;
inline void PollInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& PollInfo::title() const {
  // @@protoc_insertion_point(field_get:PollInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PollInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PollInfo.title)
}
inline std::string* PollInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PollInfo.title)
  return _s;
}
inline const std::string& PollInfo::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void PollInfo::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* PollInfo::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* PollInfo::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PollInfo.title)
  return _impl_.title_.Release();
}
inline void PollInfo::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PollInfo.title)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_PollInfo_2eproto_2epb_2eh
