// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleForum.proto

#include "SimpleForum.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR SimpleForum::SimpleForum(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.tab_info_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.id_)*/ ::int64_t{0},
      /*decltype(_impl_.member_num_)*/ 0,
      /*decltype(_impl_.post_num_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SimpleForumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleForumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleForumDefaultTypeInternal() {}
  union {
    SimpleForum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleForumDefaultTypeInternal _SimpleForum_default_instance_;
static ::_pb::Metadata file_level_metadata_SimpleForum_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_SimpleForum_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_SimpleForum_2eproto = nullptr;
const ::uint32_t TableStruct_SimpleForum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SimpleForum, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SimpleForum, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SimpleForum, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::SimpleForum, _impl_.member_num_),
    PROTOBUF_FIELD_OFFSET(::SimpleForum, _impl_.post_num_),
    PROTOBUF_FIELD_OFFSET(::SimpleForum, _impl_.tab_info_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::SimpleForum)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_SimpleForum_default_instance_._instance,
};
const char descriptor_table_protodef_SimpleForum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021SimpleForum.proto\032\020FrsTabInfo.proto\"l\n"
    "\013SimpleForum\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\022"
    "\n\nmember_num\030\014 \001(\005\022\020\n\010post_num\030\r \001(\005\022\035\n\010"
    "tab_info\030\017 \003(\0132\013.FrsTabInfob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_SimpleForum_2eproto_deps[1] =
    {
        &::descriptor_table_FrsTabInfo_2eproto,
};
static ::absl::once_flag descriptor_table_SimpleForum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SimpleForum_2eproto = {
    false,
    false,
    155,
    descriptor_table_protodef_SimpleForum_2eproto,
    "SimpleForum.proto",
    &descriptor_table_SimpleForum_2eproto_once,
    descriptor_table_SimpleForum_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_SimpleForum_2eproto::offsets,
    file_level_metadata_SimpleForum_2eproto,
    file_level_enum_descriptors_SimpleForum_2eproto,
    file_level_service_descriptors_SimpleForum_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SimpleForum_2eproto_getter() {
  return &descriptor_table_SimpleForum_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SimpleForum_2eproto(&descriptor_table_SimpleForum_2eproto);
// ===================================================================

class SimpleForum::_Internal {
 public:
};

void SimpleForum::clear_tab_info() {
  _internal_mutable_tab_info()->Clear();
}
SimpleForum::SimpleForum(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimpleForum)
}
SimpleForum::SimpleForum(const SimpleForum& from) : ::google::protobuf::Message() {
  SimpleForum* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tab_info_){from._impl_.tab_info_},
      decltype(_impl_.name_){},
      decltype(_impl_.id_){},
      decltype(_impl_.member_num_){},
      decltype(_impl_.post_num_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.post_num_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.post_num_));

  // @@protoc_insertion_point(copy_constructor:SimpleForum)
}
inline void SimpleForum::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tab_info_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.id_){::int64_t{0}},
      decltype(_impl_.member_num_){0},
      decltype(_impl_.post_num_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SimpleForum::~SimpleForum() {
  // @@protoc_insertion_point(destructor:SimpleForum)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SimpleForum::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tab_info_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}
void SimpleForum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SimpleForum::Clear() {
// @@protoc_insertion_point(message_clear_start:SimpleForum)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tab_info()->Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.post_num_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.post_num_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SimpleForum::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 24, 2> SimpleForum::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294944764,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SimpleForum_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SimpleForum, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 member_num = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SimpleForum, _impl_.member_num_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.member_num_)}},
    // int32 post_num = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SimpleForum, _impl_.post_num_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.post_num_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .FrsTabInfo tab_info = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.tab_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 member_num = 12;
    {PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.member_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 post_num = 13;
    {PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.post_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .FrsTabInfo tab_info = 15;
    {PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.tab_info_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::FrsTabInfo>()},
  }}, {{
    "\13\0\4\0\0\0\0\0"
    "SimpleForum"
    "name"
  }},
};

::uint8_t* SimpleForum::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpleForum)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SimpleForum.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 member_num = 12;
  if (this->_internal_member_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_member_num(), target);
  }

  // int32 post_num = 13;
  if (this->_internal_post_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_post_num(), target);
  }

  // repeated .FrsTabInfo tab_info = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tab_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_tab_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpleForum)
  return target;
}

::size_t SimpleForum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimpleForum)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FrsTabInfo tab_info = 15;
  total_size += 1UL * this->_internal_tab_info_size();
  for (const auto& msg : this->_internal_tab_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int32 member_num = 12;
  if (this->_internal_member_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_member_num());
  }

  // int32 post_num = 13;
  if (this->_internal_post_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_post_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SimpleForum::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SimpleForum::MergeImpl
};
const ::google::protobuf::Message::ClassData*SimpleForum::GetClassData() const { return &_class_data_; }


void SimpleForum::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SimpleForum*>(&to_msg);
  auto& from = static_cast<const SimpleForum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SimpleForum)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tab_info()->MergeFrom(from._internal_tab_info());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_member_num() != 0) {
    _this->_internal_set_member_num(from._internal_member_num());
  }
  if (from._internal_post_num() != 0) {
    _this->_internal_set_post_num(from._internal_post_num());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleForum::CopyFrom(const SimpleForum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimpleForum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SimpleForum::IsInitialized() const {
  return true;
}

void SimpleForum::InternalSwap(SimpleForum* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tab_info_.InternalSwap(&other->_impl_.tab_info_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.post_num_)
      + sizeof(SimpleForum::_impl_.post_num_)
      - PROTOBUF_FIELD_OFFSET(SimpleForum, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata SimpleForum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SimpleForum_2eproto_getter, &descriptor_table_SimpleForum_2eproto_once,
      file_level_metadata_SimpleForum_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
