// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class User_PrivSetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_PrivSets>
      _instance;
} _User_PrivSets_default_instance_;
class User_LikeForumInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_LikeForumInfo>
      _instance;
} _User_LikeForumInfo_default_instance_;
class User_UserVipInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_UserVipInfo>
      _instance;
} _User_UserVipInfo_default_instance_;
class User_NewGodInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_NewGodInfo>
      _instance;
} _User_NewGodInfo_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User>
      _instance;
} _User_default_instance_;
namespace protobuf_User_2eproto {
void InitDefaultsUser_PrivSetsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_User_PrivSets_default_instance_;
    new (ptr) ::User_PrivSets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::User_PrivSets::InitAsDefaultInstance();
}

void InitDefaultsUser_PrivSets() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUser_PrivSetsImpl);
}

void InitDefaultsUser_LikeForumInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_User_LikeForumInfo_default_instance_;
    new (ptr) ::User_LikeForumInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::User_LikeForumInfo::InitAsDefaultInstance();
}

void InitDefaultsUser_LikeForumInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUser_LikeForumInfoImpl);
}

void InitDefaultsUser_UserVipInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_User_UserVipInfo_default_instance_;
    new (ptr) ::User_UserVipInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::User_UserVipInfo::InitAsDefaultInstance();
}

void InitDefaultsUser_UserVipInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUser_UserVipInfoImpl);
}

void InitDefaultsUser_NewGodInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_User_NewGodInfo_default_instance_;
    new (ptr) ::User_NewGodInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::User_NewGodInfo::InitAsDefaultInstance();
}

void InitDefaultsUser_NewGodInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUser_NewGodInfoImpl);
}

void InitDefaultsUserImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_User_2eproto::InitDefaultsUser_PrivSets();
  protobuf_User_2eproto::InitDefaultsUser_LikeForumInfo();
  protobuf_User_2eproto::InitDefaultsUser_UserVipInfo();
  protobuf_User_2eproto::InitDefaultsUser_NewGodInfo();
  {
    void* ptr = &::_User_default_instance_;
    new (ptr) ::User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::User::InitAsDefaultInstance();
}

void InitDefaultsUser() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, like_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, post_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, friend__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, live_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, bazhu_show_inside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_PrivSets, bazhu_show_outside_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_LikeForumInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_LikeForumInfo, forum_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_LikeForumInfo, forum_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, v_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, s_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, e_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, ext_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, v_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, a_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, n_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_UserVipInfo, icon_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_NewGodInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_NewGodInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_NewGodInfo, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_NewGodInfo, field_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_NewGodInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User_NewGodInfo, type_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, name_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, portrait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, is_coreuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, is_bawu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, bawu_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, bduss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, post_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, tb_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, priv_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, is_friend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, likeforum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, is_guanfang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, vipinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, is_fans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, new_god_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, is_default_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::User, tieba_uid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::User_PrivSets)},
  { 14, -1, sizeof(::User_LikeForumInfo)},
  { 21, -1, sizeof(::User_UserVipInfo)},
  { 34, -1, sizeof(::User_NewGodInfo)},
  { 44, -1, sizeof(::User)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_User_PrivSets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_User_LikeForumInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_User_UserVipInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_User_NewGodInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_User_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "User.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nUser.proto\"\263\007\n\004User\022\n\n\002id\030\002 \001(\003\022\014\n\004nam"
      "e\030\003 \001(\t\022\021\n\tname_show\030\004 \001(\t\022\020\n\010portrait\030\005"
      " \001(\t\022\023\n\013is_coreuser\030\024 \001(\005\022\020\n\010level_id\030\027 "
      "\001(\005\022\017\n\007is_bawu\030\031 \001(\005\022\021\n\tbawu_type\030\032 \001(\t\022"
      "\r\n\005BDUSS\030\035 \001(\t\022\020\n\010post_num\030% \001(\005\022\016\n\006tb_a"
      "ge\030& \001(\t\022\016\n\006gender\030* \001(\005\022!\n\tpriv_sets\030- "
      "\001(\0132\016.User.PrivSets\022\021\n\tis_friend\030. \001(\005\022&"
      "\n\tlikeForum\030/ \003(\0132\023.User.LikeForumInfo\022\023"
      "\n\013is_guanfang\0304 \001(\005\022\"\n\007vipInfo\030= \001(\0132\021.U"
      "ser.UserVipInfo\022\017\n\007is_fans\030[ \001(\005\022&\n\014new_"
      "god_data\030e \001(\0132\020.User.NewGodInfo\022\031\n\021is_d"
      "efault_avatar\030j \001(\005\022\021\n\ttieba_uid\030x \001(\t\032\253"
      "\001\n\010PrivSets\022\020\n\010location\030\001 \001(\005\022\014\n\004like\030\002 "
      "\001(\005\022\r\n\005group\030\003 \001(\005\022\014\n\004post\030\004 \001(\005\022\016\n\006frie"
      "nd\030\005 \001(\005\022\014\n\004live\030\006 \001(\005\022\r\n\005reply\030\007 \001(\005\022\031\n"
      "\021bazhu_show_inside\030\010 \001(\005\022\032\n\022bazhu_show_o"
      "utside\030\t \001(\005\0325\n\rLikeForumInfo\022\022\n\nforum_n"
      "ame\030\001 \001(\t\022\020\n\010forum_id\030\002 \001(\004\032\227\001\n\013UserVipI"
      "nfo\022\020\n\010v_status\030\001 \001(\r\022\016\n\006s_time\030\002 \001(\r\022\016\n"
      "\006e_time\030\003 \001(\r\022\021\n\text_score\030\004 \001(\r\022\017\n\007v_le"
      "vel\030\005 \001(\r\022\017\n\007a_score\030\006 \001(\005\022\017\n\007n_score\030\007 "
      "\001(\r\022\020\n\010icon_url\030\010 \001(\t\032c\n\nNewGodInfo\022\016\n\006s"
      "tatus\030\001 \001(\005\022\020\n\010field_id\030\002 \001(\r\022\022\n\nfield_n"
      "ame\030\003 \001(\t\022\014\n\004type\030\004 \001(\r\022\021\n\ttype_name\030\005 \001"
      "(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 970);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_User_2eproto

// ===================================================================

void User_PrivSets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_PrivSets::kLocationFieldNumber;
const int User_PrivSets::kLikeFieldNumber;
const int User_PrivSets::kGroupFieldNumber;
const int User_PrivSets::kPostFieldNumber;
const int User_PrivSets::kFriendFieldNumber;
const int User_PrivSets::kLiveFieldNumber;
const int User_PrivSets::kReplyFieldNumber;
const int User_PrivSets::kBazhuShowInsideFieldNumber;
const int User_PrivSets::kBazhuShowOutsideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_PrivSets::User_PrivSets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_User_2eproto::InitDefaultsUser_PrivSets();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.PrivSets)
}
User_PrivSets::User_PrivSets(const User_PrivSets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&bazhu_show_outside_) -
    reinterpret_cast<char*>(&location_)) + sizeof(bazhu_show_outside_));
  // @@protoc_insertion_point(copy_constructor:User.PrivSets)
}

void User_PrivSets::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bazhu_show_outside_) -
      reinterpret_cast<char*>(&location_)) + sizeof(bazhu_show_outside_));
  _cached_size_ = 0;
}

User_PrivSets::~User_PrivSets() {
  // @@protoc_insertion_point(destructor:User.PrivSets)
  SharedDtor();
}

void User_PrivSets::SharedDtor() {
}

void User_PrivSets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_PrivSets::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_PrivSets& User_PrivSets::default_instance() {
  ::protobuf_User_2eproto::InitDefaultsUser_PrivSets();
  return *internal_default_instance();
}

User_PrivSets* User_PrivSets::New(::google::protobuf::Arena* arena) const {
  User_PrivSets* n = new User_PrivSets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_PrivSets::Clear() {
// @@protoc_insertion_point(message_clear_start:User.PrivSets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bazhu_show_outside_) -
      reinterpret_cast<char*>(&location_)) + sizeof(bazhu_show_outside_));
  _internal_metadata_.Clear();
}

bool User_PrivSets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.PrivSets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 like = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &like_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 post = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 friend = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 live = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reply = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bazhu_show_inside = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bazhu_show_inside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bazhu_show_outside = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bazhu_show_outside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.PrivSets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.PrivSets)
  return false;
#undef DO_
}

void User_PrivSets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.PrivSets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->location(), output);
  }

  // int32 like = 2;
  if (this->like() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->like(), output);
  }

  // int32 group = 3;
  if (this->group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group(), output);
  }

  // int32 post = 4;
  if (this->post() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->post(), output);
  }

  // int32 friend = 5;
  if (this->friend_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->friend_(), output);
  }

  // int32 live = 6;
  if (this->live() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->live(), output);
  }

  // int32 reply = 7;
  if (this->reply() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reply(), output);
  }

  // int32 bazhu_show_inside = 8;
  if (this->bazhu_show_inside() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bazhu_show_inside(), output);
  }

  // int32 bazhu_show_outside = 9;
  if (this->bazhu_show_outside() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bazhu_show_outside(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:User.PrivSets)
}

::google::protobuf::uint8* User_PrivSets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:User.PrivSets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->location(), target);
  }

  // int32 like = 2;
  if (this->like() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->like(), target);
  }

  // int32 group = 3;
  if (this->group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group(), target);
  }

  // int32 post = 4;
  if (this->post() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->post(), target);
  }

  // int32 friend = 5;
  if (this->friend_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->friend_(), target);
  }

  // int32 live = 6;
  if (this->live() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->live(), target);
  }

  // int32 reply = 7;
  if (this->reply() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reply(), target);
  }

  // int32 bazhu_show_inside = 8;
  if (this->bazhu_show_inside() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bazhu_show_inside(), target);
  }

  // int32 bazhu_show_outside = 9;
  if (this->bazhu_show_outside() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bazhu_show_outside(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.PrivSets)
  return target;
}

size_t User_PrivSets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User.PrivSets)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->location());
  }

  // int32 like = 2;
  if (this->like() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->like());
  }

  // int32 group = 3;
  if (this->group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group());
  }

  // int32 post = 4;
  if (this->post() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->post());
  }

  // int32 friend = 5;
  if (this->friend_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friend_());
  }

  // int32 live = 6;
  if (this->live() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->live());
  }

  // int32 reply = 7;
  if (this->reply() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reply());
  }

  // int32 bazhu_show_inside = 8;
  if (this->bazhu_show_inside() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bazhu_show_inside());
  }

  // int32 bazhu_show_outside = 9;
  if (this->bazhu_show_outside() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bazhu_show_outside());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_PrivSets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User.PrivSets)
  GOOGLE_DCHECK_NE(&from, this);
  const User_PrivSets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_PrivSets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User.PrivSets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User.PrivSets)
    MergeFrom(*source);
  }
}

void User_PrivSets::MergeFrom(const User_PrivSets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User.PrivSets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location() != 0) {
    set_location(from.location());
  }
  if (from.like() != 0) {
    set_like(from.like());
  }
  if (from.group() != 0) {
    set_group(from.group());
  }
  if (from.post() != 0) {
    set_post(from.post());
  }
  if (from.friend_() != 0) {
    set_friend_(from.friend_());
  }
  if (from.live() != 0) {
    set_live(from.live());
  }
  if (from.reply() != 0) {
    set_reply(from.reply());
  }
  if (from.bazhu_show_inside() != 0) {
    set_bazhu_show_inside(from.bazhu_show_inside());
  }
  if (from.bazhu_show_outside() != 0) {
    set_bazhu_show_outside(from.bazhu_show_outside());
  }
}

void User_PrivSets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User.PrivSets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_PrivSets::CopyFrom(const User_PrivSets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User.PrivSets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_PrivSets::IsInitialized() const {
  return true;
}

void User_PrivSets::Swap(User_PrivSets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_PrivSets::InternalSwap(User_PrivSets* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(like_, other->like_);
  swap(group_, other->group_);
  swap(post_, other->post_);
  swap(friend__, other->friend__);
  swap(live_, other->live_);
  swap(reply_, other->reply_);
  swap(bazhu_show_inside_, other->bazhu_show_inside_);
  swap(bazhu_show_outside_, other->bazhu_show_outside_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User_PrivSets::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User_LikeForumInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_LikeForumInfo::kForumNameFieldNumber;
const int User_LikeForumInfo::kForumIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_LikeForumInfo::User_LikeForumInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_User_2eproto::InitDefaultsUser_LikeForumInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.LikeForumInfo)
}
User_LikeForumInfo::User_LikeForumInfo(const User_LikeForumInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  forum_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.forum_name().size() > 0) {
    forum_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forum_name_);
  }
  forum_id_ = from.forum_id_;
  // @@protoc_insertion_point(copy_constructor:User.LikeForumInfo)
}

void User_LikeForumInfo::SharedCtor() {
  forum_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forum_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

User_LikeForumInfo::~User_LikeForumInfo() {
  // @@protoc_insertion_point(destructor:User.LikeForumInfo)
  SharedDtor();
}

void User_LikeForumInfo::SharedDtor() {
  forum_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User_LikeForumInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_LikeForumInfo::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_LikeForumInfo& User_LikeForumInfo::default_instance() {
  ::protobuf_User_2eproto::InitDefaultsUser_LikeForumInfo();
  return *internal_default_instance();
}

User_LikeForumInfo* User_LikeForumInfo::New(::google::protobuf::Arena* arena) const {
  User_LikeForumInfo* n = new User_LikeForumInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_LikeForumInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:User.LikeForumInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forum_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forum_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool User_LikeForumInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.LikeForumInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string forum_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_forum_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->forum_name().data(), static_cast<int>(this->forum_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.LikeForumInfo.forum_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forum_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forum_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.LikeForumInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.LikeForumInfo)
  return false;
#undef DO_
}

void User_LikeForumInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.LikeForumInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string forum_name = 1;
  if (this->forum_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forum_name().data(), static_cast<int>(this->forum_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.LikeForumInfo.forum_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->forum_name(), output);
  }

  // uint64 forum_id = 2;
  if (this->forum_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->forum_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:User.LikeForumInfo)
}

::google::protobuf::uint8* User_LikeForumInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:User.LikeForumInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string forum_name = 1;
  if (this->forum_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->forum_name().data(), static_cast<int>(this->forum_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.LikeForumInfo.forum_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->forum_name(), target);
  }

  // uint64 forum_id = 2;
  if (this->forum_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->forum_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.LikeForumInfo)
  return target;
}

size_t User_LikeForumInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User.LikeForumInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string forum_name = 1;
  if (this->forum_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->forum_name());
  }

  // uint64 forum_id = 2;
  if (this->forum_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forum_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_LikeForumInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User.LikeForumInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const User_LikeForumInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_LikeForumInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User.LikeForumInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User.LikeForumInfo)
    MergeFrom(*source);
  }
}

void User_LikeForumInfo::MergeFrom(const User_LikeForumInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User.LikeForumInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.forum_name().size() > 0) {

    forum_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.forum_name_);
  }
  if (from.forum_id() != 0) {
    set_forum_id(from.forum_id());
  }
}

void User_LikeForumInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User.LikeForumInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_LikeForumInfo::CopyFrom(const User_LikeForumInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User.LikeForumInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_LikeForumInfo::IsInitialized() const {
  return true;
}

void User_LikeForumInfo::Swap(User_LikeForumInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_LikeForumInfo::InternalSwap(User_LikeForumInfo* other) {
  using std::swap;
  forum_name_.Swap(&other->forum_name_);
  swap(forum_id_, other->forum_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User_LikeForumInfo::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User_UserVipInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_UserVipInfo::kVStatusFieldNumber;
const int User_UserVipInfo::kSTimeFieldNumber;
const int User_UserVipInfo::kETimeFieldNumber;
const int User_UserVipInfo::kExtScoreFieldNumber;
const int User_UserVipInfo::kVLevelFieldNumber;
const int User_UserVipInfo::kAScoreFieldNumber;
const int User_UserVipInfo::kNScoreFieldNumber;
const int User_UserVipInfo::kIconUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_UserVipInfo::User_UserVipInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_User_2eproto::InitDefaultsUser_UserVipInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.UserVipInfo)
}
User_UserVipInfo::User_UserVipInfo(const User_UserVipInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.icon_url().size() > 0) {
    icon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_url_);
  }
  ::memcpy(&v_status_, &from.v_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_score_) -
    reinterpret_cast<char*>(&v_status_)) + sizeof(n_score_));
  // @@protoc_insertion_point(copy_constructor:User.UserVipInfo)
}

void User_UserVipInfo::SharedCtor() {
  icon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&v_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_score_) -
      reinterpret_cast<char*>(&v_status_)) + sizeof(n_score_));
  _cached_size_ = 0;
}

User_UserVipInfo::~User_UserVipInfo() {
  // @@protoc_insertion_point(destructor:User.UserVipInfo)
  SharedDtor();
}

void User_UserVipInfo::SharedDtor() {
  icon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User_UserVipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_UserVipInfo::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_UserVipInfo& User_UserVipInfo::default_instance() {
  ::protobuf_User_2eproto::InitDefaultsUser_UserVipInfo();
  return *internal_default_instance();
}

User_UserVipInfo* User_UserVipInfo::New(::google::protobuf::Arena* arena) const {
  User_UserVipInfo* n = new User_UserVipInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_UserVipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:User.UserVipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&v_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_score_) -
      reinterpret_cast<char*>(&v_status_)) + sizeof(n_score_));
  _internal_metadata_.Clear();
}

bool User_UserVipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.UserVipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 v_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 s_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 e_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ext_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 v_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 a_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string icon_url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon_url().data(), static_cast<int>(this->icon_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.UserVipInfo.icon_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.UserVipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.UserVipInfo)
  return false;
#undef DO_
}

void User_UserVipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.UserVipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 v_status = 1;
  if (this->v_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->v_status(), output);
  }

  // uint32 s_time = 2;
  if (this->s_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->s_time(), output);
  }

  // uint32 e_time = 3;
  if (this->e_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e_time(), output);
  }

  // uint32 ext_score = 4;
  if (this->ext_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ext_score(), output);
  }

  // uint32 v_level = 5;
  if (this->v_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->v_level(), output);
  }

  // int32 a_score = 6;
  if (this->a_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a_score(), output);
  }

  // uint32 n_score = 7;
  if (this->n_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->n_score(), output);
  }

  // string icon_url = 8;
  if (this->icon_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon_url().data(), static_cast<int>(this->icon_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.UserVipInfo.icon_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->icon_url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:User.UserVipInfo)
}

::google::protobuf::uint8* User_UserVipInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:User.UserVipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 v_status = 1;
  if (this->v_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->v_status(), target);
  }

  // uint32 s_time = 2;
  if (this->s_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->s_time(), target);
  }

  // uint32 e_time = 3;
  if (this->e_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e_time(), target);
  }

  // uint32 ext_score = 4;
  if (this->ext_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ext_score(), target);
  }

  // uint32 v_level = 5;
  if (this->v_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->v_level(), target);
  }

  // int32 a_score = 6;
  if (this->a_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a_score(), target);
  }

  // uint32 n_score = 7;
  if (this->n_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->n_score(), target);
  }

  // string icon_url = 8;
  if (this->icon_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon_url().data(), static_cast<int>(this->icon_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.UserVipInfo.icon_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->icon_url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.UserVipInfo)
  return target;
}

size_t User_UserVipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User.UserVipInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string icon_url = 8;
  if (this->icon_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon_url());
  }

  // uint32 v_status = 1;
  if (this->v_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->v_status());
  }

  // uint32 s_time = 2;
  if (this->s_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->s_time());
  }

  // uint32 e_time = 3;
  if (this->e_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->e_time());
  }

  // uint32 ext_score = 4;
  if (this->ext_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ext_score());
  }

  // uint32 v_level = 5;
  if (this->v_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->v_level());
  }

  // int32 a_score = 6;
  if (this->a_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a_score());
  }

  // uint32 n_score = 7;
  if (this->n_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_UserVipInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User.UserVipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const User_UserVipInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_UserVipInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User.UserVipInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User.UserVipInfo)
    MergeFrom(*source);
  }
}

void User_UserVipInfo::MergeFrom(const User_UserVipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User.UserVipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon_url().size() > 0) {

    icon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_url_);
  }
  if (from.v_status() != 0) {
    set_v_status(from.v_status());
  }
  if (from.s_time() != 0) {
    set_s_time(from.s_time());
  }
  if (from.e_time() != 0) {
    set_e_time(from.e_time());
  }
  if (from.ext_score() != 0) {
    set_ext_score(from.ext_score());
  }
  if (from.v_level() != 0) {
    set_v_level(from.v_level());
  }
  if (from.a_score() != 0) {
    set_a_score(from.a_score());
  }
  if (from.n_score() != 0) {
    set_n_score(from.n_score());
  }
}

void User_UserVipInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User.UserVipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_UserVipInfo::CopyFrom(const User_UserVipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User.UserVipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_UserVipInfo::IsInitialized() const {
  return true;
}

void User_UserVipInfo::Swap(User_UserVipInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_UserVipInfo::InternalSwap(User_UserVipInfo* other) {
  using std::swap;
  icon_url_.Swap(&other->icon_url_);
  swap(v_status_, other->v_status_);
  swap(s_time_, other->s_time_);
  swap(e_time_, other->e_time_);
  swap(ext_score_, other->ext_score_);
  swap(v_level_, other->v_level_);
  swap(a_score_, other->a_score_);
  swap(n_score_, other->n_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User_UserVipInfo::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User_NewGodInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_NewGodInfo::kStatusFieldNumber;
const int User_NewGodInfo::kFieldIdFieldNumber;
const int User_NewGodInfo::kFieldNameFieldNumber;
const int User_NewGodInfo::kTypeFieldNumber;
const int User_NewGodInfo::kTypeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_NewGodInfo::User_NewGodInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_User_2eproto::InitDefaultsUser_NewGodInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.NewGodInfo)
}
User_NewGodInfo::User_NewGodInfo(const User_NewGodInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field_name().size() > 0) {
    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type_name().size() > 0) {
    type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:User.NewGodInfo)
}

void User_NewGodInfo::SharedCtor() {
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(type_));
  _cached_size_ = 0;
}

User_NewGodInfo::~User_NewGodInfo() {
  // @@protoc_insertion_point(destructor:User.NewGodInfo)
  SharedDtor();
}

void User_NewGodInfo::SharedDtor() {
  field_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User_NewGodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_NewGodInfo::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_NewGodInfo& User_NewGodInfo::default_instance() {
  ::protobuf_User_2eproto::InitDefaultsUser_NewGodInfo();
  return *internal_default_instance();
}

User_NewGodInfo* User_NewGodInfo::New(::google::protobuf::Arena* arena) const {
  User_NewGodInfo* n = new User_NewGodInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_NewGodInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:User.NewGodInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool User_NewGodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.NewGodInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 field_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.NewGodInfo.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type_name().data(), static_cast<int>(this->type_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.NewGodInfo.type_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.NewGodInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.NewGodInfo)
  return false;
#undef DO_
}

void User_NewGodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.NewGodInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // uint32 field_id = 2;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->field_id(), output);
  }

  // string field_name = 3;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.NewGodInfo.field_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->field_name(), output);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // string type_name = 5;
  if (this->type_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), static_cast<int>(this->type_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.NewGodInfo.type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:User.NewGodInfo)
}

::google::protobuf::uint8* User_NewGodInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:User.NewGodInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // uint32 field_id = 2;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->field_id(), target);
  }

  // string field_name = 3;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.NewGodInfo.field_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->field_name(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // string type_name = 5;
  if (this->type_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), static_cast<int>(this->type_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.NewGodInfo.type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.NewGodInfo)
  return target;
}

size_t User_NewGodInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User.NewGodInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string field_name = 3;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  // string type_name = 5;
  if (this->type_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // uint32 field_id = 2;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_NewGodInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User.NewGodInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const User_NewGodInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_NewGodInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User.NewGodInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User.NewGodInfo)
    MergeFrom(*source);
  }
}

void User_NewGodInfo::MergeFrom(const User_NewGodInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User.NewGodInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.type_name().size() > 0) {

    type_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_name_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void User_NewGodInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User.NewGodInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_NewGodInfo::CopyFrom(const User_NewGodInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User.NewGodInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_NewGodInfo::IsInitialized() const {
  return true;
}

void User_NewGodInfo::Swap(User_NewGodInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_NewGodInfo::InternalSwap(User_NewGodInfo* other) {
  using std::swap;
  field_name_.Swap(&other->field_name_);
  type_name_.Swap(&other->type_name_);
  swap(status_, other->status_);
  swap(field_id_, other->field_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User_NewGodInfo::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::_User_default_instance_._instance.get_mutable()->priv_sets_ = const_cast< ::User_PrivSets*>(
      ::User_PrivSets::internal_default_instance());
  ::_User_default_instance_._instance.get_mutable()->vipinfo_ = const_cast< ::User_UserVipInfo*>(
      ::User_UserVipInfo::internal_default_instance());
  ::_User_default_instance_._instance.get_mutable()->new_god_data_ = const_cast< ::User_NewGodInfo*>(
      ::User_NewGodInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kIdFieldNumber;
const int User::kNameFieldNumber;
const int User::kNameShowFieldNumber;
const int User::kPortraitFieldNumber;
const int User::kIsCoreuserFieldNumber;
const int User::kLevelIdFieldNumber;
const int User::kIsBawuFieldNumber;
const int User::kBawuTypeFieldNumber;
const int User::kBDUSSFieldNumber;
const int User::kPostNumFieldNumber;
const int User::kTbAgeFieldNumber;
const int User::kGenderFieldNumber;
const int User::kPrivSetsFieldNumber;
const int User::kIsFriendFieldNumber;
const int User::kLikeForumFieldNumber;
const int User::kIsGuanfangFieldNumber;
const int User::kVipInfoFieldNumber;
const int User::kIsFansFieldNumber;
const int User::kNewGodDataFieldNumber;
const int User::kIsDefaultAvatarFieldNumber;
const int User::kTiebaUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_User_2eproto::InitDefaultsUser();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      likeforum_(from.likeforum_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  name_show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name_show().size() > 0) {
    name_show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_show_);
  }
  portrait_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.portrait().size() > 0) {
    portrait_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portrait_);
  }
  bawu_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bawu_type().size() > 0) {
    bawu_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bawu_type_);
  }
  bduss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bduss().size() > 0) {
    bduss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bduss_);
  }
  tb_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tb_age().size() > 0) {
    tb_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tb_age_);
  }
  tieba_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tieba_uid().size() > 0) {
    tieba_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tieba_uid_);
  }
  if (from.has_priv_sets()) {
    priv_sets_ = new ::User_PrivSets(*from.priv_sets_);
  } else {
    priv_sets_ = NULL;
  }
  if (from.has_vipinfo()) {
    vipinfo_ = new ::User_UserVipInfo(*from.vipinfo_);
  } else {
    vipinfo_ = NULL;
  }
  if (from.has_new_god_data()) {
    new_god_data_ = new ::User_NewGodInfo(*from.new_god_data_);
  } else {
    new_god_data_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_fans_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_fans_));
  // @@protoc_insertion_point(copy_constructor:User)
}

void User::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bawu_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bduss_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tb_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tieba_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&priv_sets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_fans_) -
      reinterpret_cast<char*>(&priv_sets_)) + sizeof(is_fans_));
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_show_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bawu_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bduss_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tb_age_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tieba_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete priv_sets_;
  if (this != internal_default_instance()) delete vipinfo_;
  if (this != internal_default_instance()) delete new_god_data_;
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  ::protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  ::protobuf_User_2eproto::InitDefaultsUser();
  return *internal_default_instance();
}

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  likeforum_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bawu_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bduss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tb_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tieba_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && priv_sets_ != NULL) {
    delete priv_sets_;
  }
  priv_sets_ = NULL;
  if (GetArenaNoVirtual() == NULL && vipinfo_ != NULL) {
    delete vipinfo_;
  }
  vipinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_god_data_ != NULL) {
    delete new_god_data_;
  }
  new_god_data_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_fans_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_fans_));
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name_show = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_show()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name_show().data(), static_cast<int>(this->name_show().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.name_show"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string portrait = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->portrait().data(), static_cast<int>(this->portrait().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.portrait"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_coreuser = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_coreuser_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_bawu = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_bawu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bawu_type = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bawu_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bawu_type().data(), static_cast<int>(this->bawu_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.bawu_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string BDUSS = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bduss()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bduss().data(), static_cast<int>(this->bduss().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.BDUSS"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 post_num = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tb_age = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tb_age()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tb_age().data(), static_cast<int>(this->tb_age().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.tb_age"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gender = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .User.PrivSets priv_sets = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_priv_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_friend = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .User.LikeForumInfo likeForum = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_likeforum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_guanfang = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_guanfang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .User.UserVipInfo vipInfo = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vipinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_fans = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_fans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .User.NewGodInfo new_god_data = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_god_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_default_avatar = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 848 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_default_avatar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tieba_uid = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tieba_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tieba_uid().data(), static_cast<int>(this->tieba_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "User.tieba_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string name_show = 4;
  if (this->name_show().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_show().data(), static_cast<int>(this->name_show().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.name_show");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name_show(), output);
  }

  // string portrait = 5;
  if (this->portrait().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->portrait().data(), static_cast<int>(this->portrait().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->portrait(), output);
  }

  // int32 is_coreuser = 20;
  if (this->is_coreuser() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->is_coreuser(), output);
  }

  // int32 level_id = 23;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->level_id(), output);
  }

  // int32 is_bawu = 25;
  if (this->is_bawu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->is_bawu(), output);
  }

  // string bawu_type = 26;
  if (this->bawu_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bawu_type().data(), static_cast<int>(this->bawu_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.bawu_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->bawu_type(), output);
  }

  // string BDUSS = 29;
  if (this->bduss().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bduss().data(), static_cast<int>(this->bduss().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.BDUSS");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->bduss(), output);
  }

  // int32 post_num = 37;
  if (this->post_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->post_num(), output);
  }

  // string tb_age = 38;
  if (this->tb_age().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tb_age().data(), static_cast<int>(this->tb_age().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.tb_age");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->tb_age(), output);
  }

  // int32 gender = 42;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->gender(), output);
  }

  // .User.PrivSets priv_sets = 45;
  if (this->has_priv_sets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->priv_sets_, output);
  }

  // int32 is_friend = 46;
  if (this->is_friend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->is_friend(), output);
  }

  // repeated .User.LikeForumInfo likeForum = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->likeforum_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->likeforum(static_cast<int>(i)), output);
  }

  // int32 is_guanfang = 52;
  if (this->is_guanfang() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->is_guanfang(), output);
  }

  // .User.UserVipInfo vipInfo = 61;
  if (this->has_vipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *this->vipinfo_, output);
  }

  // int32 is_fans = 91;
  if (this->is_fans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->is_fans(), output);
  }

  // .User.NewGodInfo new_god_data = 101;
  if (this->has_new_god_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->new_god_data_, output);
  }

  // int32 is_default_avatar = 106;
  if (this->is_default_avatar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->is_default_avatar(), output);
  }

  // string tieba_uid = 120;
  if (this->tieba_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tieba_uid().data(), static_cast<int>(this->tieba_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.tieba_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->tieba_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string name_show = 4;
  if (this->name_show().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_show().data(), static_cast<int>(this->name_show().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.name_show");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name_show(), target);
  }

  // string portrait = 5;
  if (this->portrait().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->portrait().data(), static_cast<int>(this->portrait().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->portrait(), target);
  }

  // int32 is_coreuser = 20;
  if (this->is_coreuser() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->is_coreuser(), target);
  }

  // int32 level_id = 23;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->level_id(), target);
  }

  // int32 is_bawu = 25;
  if (this->is_bawu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->is_bawu(), target);
  }

  // string bawu_type = 26;
  if (this->bawu_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bawu_type().data(), static_cast<int>(this->bawu_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.bawu_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->bawu_type(), target);
  }

  // string BDUSS = 29;
  if (this->bduss().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bduss().data(), static_cast<int>(this->bduss().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.BDUSS");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->bduss(), target);
  }

  // int32 post_num = 37;
  if (this->post_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->post_num(), target);
  }

  // string tb_age = 38;
  if (this->tb_age().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tb_age().data(), static_cast<int>(this->tb_age().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.tb_age");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->tb_age(), target);
  }

  // int32 gender = 42;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->gender(), target);
  }

  // .User.PrivSets priv_sets = 45;
  if (this->has_priv_sets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        45, *this->priv_sets_, deterministic, target);
  }

  // int32 is_friend = 46;
  if (this->is_friend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->is_friend(), target);
  }

  // repeated .User.LikeForumInfo likeForum = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->likeforum_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        47, this->likeforum(static_cast<int>(i)), deterministic, target);
  }

  // int32 is_guanfang = 52;
  if (this->is_guanfang() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->is_guanfang(), target);
  }

  // .User.UserVipInfo vipInfo = 61;
  if (this->has_vipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61, *this->vipinfo_, deterministic, target);
  }

  // int32 is_fans = 91;
  if (this->is_fans() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(91, this->is_fans(), target);
  }

  // .User.NewGodInfo new_god_data = 101;
  if (this->has_new_god_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, *this->new_god_data_, deterministic, target);
  }

  // int32 is_default_avatar = 106;
  if (this->is_default_avatar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->is_default_avatar(), target);
  }

  // string tieba_uid = 120;
  if (this->tieba_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tieba_uid().data(), static_cast<int>(this->tieba_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "User.tieba_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->tieba_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .User.LikeForumInfo likeForum = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->likeforum_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->likeforum(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string name_show = 4;
  if (this->name_show().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_show());
  }

  // string portrait = 5;
  if (this->portrait().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->portrait());
  }

  // string bawu_type = 26;
  if (this->bawu_type().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bawu_type());
  }

  // string BDUSS = 29;
  if (this->bduss().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bduss());
  }

  // string tb_age = 38;
  if (this->tb_age().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tb_age());
  }

  // string tieba_uid = 120;
  if (this->tieba_uid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tieba_uid());
  }

  // .User.PrivSets priv_sets = 45;
  if (this->has_priv_sets()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->priv_sets_);
  }

  // .User.UserVipInfo vipInfo = 61;
  if (this->has_vipinfo()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vipinfo_);
  }

  // .User.NewGodInfo new_god_data = 101;
  if (this->has_new_god_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->new_god_data_);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int32 is_coreuser = 20;
  if (this->is_coreuser() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_coreuser());
  }

  // int32 level_id = 23;
  if (this->level_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level_id());
  }

  // int32 is_default_avatar = 106;
  if (this->is_default_avatar() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_default_avatar());
  }

  // int32 is_bawu = 25;
  if (this->is_bawu() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_bawu());
  }

  // int32 post_num = 37;
  if (this->post_num() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->post_num());
  }

  // int32 gender = 42;
  if (this->gender() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());
  }

  // int32 is_friend = 46;
  if (this->is_friend() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_friend());
  }

  // int32 is_guanfang = 52;
  if (this->is_guanfang() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_guanfang());
  }

  // int32 is_fans = 91;
  if (this->is_fans() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_fans());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  likeforum_.MergeFrom(from.likeforum_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.name_show().size() > 0) {

    name_show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_show_);
  }
  if (from.portrait().size() > 0) {

    portrait_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portrait_);
  }
  if (from.bawu_type().size() > 0) {

    bawu_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bawu_type_);
  }
  if (from.bduss().size() > 0) {

    bduss_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bduss_);
  }
  if (from.tb_age().size() > 0) {

    tb_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tb_age_);
  }
  if (from.tieba_uid().size() > 0) {

    tieba_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tieba_uid_);
  }
  if (from.has_priv_sets()) {
    mutable_priv_sets()->::User_PrivSets::MergeFrom(from.priv_sets());
  }
  if (from.has_vipinfo()) {
    mutable_vipinfo()->::User_UserVipInfo::MergeFrom(from.vipinfo());
  }
  if (from.has_new_god_data()) {
    mutable_new_god_data()->::User_NewGodInfo::MergeFrom(from.new_god_data());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.is_coreuser() != 0) {
    set_is_coreuser(from.is_coreuser());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.is_default_avatar() != 0) {
    set_is_default_avatar(from.is_default_avatar());
  }
  if (from.is_bawu() != 0) {
    set_is_bawu(from.is_bawu());
  }
  if (from.post_num() != 0) {
    set_post_num(from.post_num());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.is_friend() != 0) {
    set_is_friend(from.is_friend());
  }
  if (from.is_guanfang() != 0) {
    set_is_guanfang(from.is_guanfang());
  }
  if (from.is_fans() != 0) {
    set_is_fans(from.is_fans());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  likeforum_.InternalSwap(&other->likeforum_);
  name_.Swap(&other->name_);
  name_show_.Swap(&other->name_show_);
  portrait_.Swap(&other->portrait_);
  bawu_type_.Swap(&other->bawu_type_);
  bduss_.Swap(&other->bduss_);
  tb_age_.Swap(&other->tb_age_);
  tieba_uid_.Swap(&other->tieba_uid_);
  swap(priv_sets_, other->priv_sets_);
  swap(vipinfo_, other->vipinfo_);
  swap(new_god_data_, other->new_god_data_);
  swap(id_, other->id_);
  swap(is_coreuser_, other->is_coreuser_);
  swap(level_id_, other->level_id_);
  swap(is_default_avatar_, other->is_default_avatar_);
  swap(is_bawu_, other->is_bawu_);
  swap(post_num_, other->post_num_);
  swap(gender_, other->gender_);
  swap(is_friend_, other->is_friend_);
  swap(is_guanfang_, other->is_guanfang_);
  swap(is_fans_, other->is_fans_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_User_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_User_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
