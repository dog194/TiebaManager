// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Media_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Media_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Media_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Media_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Media_2eproto;
class Media;
struct MediaDefaultTypeInternal;
extern MediaDefaultTypeInternal _Media_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Media final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Media) */ {
 public:
  inline Media() : Media(nullptr) {}
  ~Media() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Media(::google::protobuf::internal::ConstantInitialized);

  Media(const Media& from);
  Media(Media&& from) noexcept
    : Media() {
    *this = ::std::move(from);
  }

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media& operator=(Media&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Media& default_instance() {
    return *internal_default_instance();
  }
  static inline const Media* internal_default_instance() {
    return reinterpret_cast<const Media*>(
               &_Media_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Media& a, Media& b) {
    a.Swap(&b);
  }
  inline void Swap(Media* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Media* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Media* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Media>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Media& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Media& from) {
    Media::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Media";
  }
  protected:
  explicit Media(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmallPicFieldNumber = 2,
    kBigPicFieldNumber = 3,
    kWaterPicFieldNumber = 4,
    kOriginPicFieldNumber = 15,
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kOriginSizeFieldNumber = 16,
  };
  // string small_pic = 2;
  void clear_small_pic() ;
  const std::string& small_pic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_small_pic(Arg_&& arg, Args_... args);
  std::string* mutable_small_pic();
  PROTOBUF_NODISCARD std::string* release_small_pic();
  void set_allocated_small_pic(std::string* ptr);

  private:
  const std::string& _internal_small_pic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_small_pic(
      const std::string& value);
  std::string* _internal_mutable_small_pic();

  public:
  // string big_pic = 3;
  void clear_big_pic() ;
  const std::string& big_pic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_big_pic(Arg_&& arg, Args_... args);
  std::string* mutable_big_pic();
  PROTOBUF_NODISCARD std::string* release_big_pic();
  void set_allocated_big_pic(std::string* ptr);

  private:
  const std::string& _internal_big_pic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_big_pic(
      const std::string& value);
  std::string* _internal_mutable_big_pic();

  public:
  // string water_pic = 4;
  void clear_water_pic() ;
  const std::string& water_pic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_water_pic(Arg_&& arg, Args_... args);
  std::string* mutable_water_pic();
  PROTOBUF_NODISCARD std::string* release_water_pic();
  void set_allocated_water_pic(std::string* ptr);

  private:
  const std::string& _internal_water_pic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_water_pic(
      const std::string& value);
  std::string* _internal_mutable_water_pic();

  public:
  // string origin_pic = 15;
  void clear_origin_pic() ;
  const std::string& origin_pic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin_pic(Arg_&& arg, Args_... args);
  std::string* mutable_origin_pic();
  PROTOBUF_NODISCARD std::string* release_origin_pic();
  void set_allocated_origin_pic(std::string* ptr);

  private:
  const std::string& _internal_origin_pic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_pic(
      const std::string& value);
  std::string* _internal_mutable_origin_pic();

  public:
  // int32 type = 1;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // uint32 width = 10;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 11;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // uint32 origin_size = 16;
  void clear_origin_size() ;
  ::uint32_t origin_size() const;
  void set_origin_size(::uint32_t value);

  private:
  ::uint32_t _internal_origin_size() const;
  void _internal_set_origin_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Media)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 8, 0, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr small_pic_;
    ::google::protobuf::internal::ArenaStringPtr big_pic_;
    ::google::protobuf::internal::ArenaStringPtr water_pic_;
    ::google::protobuf::internal::ArenaStringPtr origin_pic_;
    ::int32_t type_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t origin_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Media_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Media

// int32 type = 1;
inline void Media::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t Media::type() const {
  // @@protoc_insertion_point(field_get:Media.type)
  return _internal_type();
}
inline void Media::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Media.type)
}
inline ::int32_t Media::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void Media::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string small_pic = 2;
inline void Media::clear_small_pic() {
  _impl_.small_pic_.ClearToEmpty();
}
inline const std::string& Media::small_pic() const {
  // @@protoc_insertion_point(field_get:Media.small_pic)
  return _internal_small_pic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Media::set_small_pic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.small_pic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Media.small_pic)
}
inline std::string* Media::mutable_small_pic() {
  std::string* _s = _internal_mutable_small_pic();
  // @@protoc_insertion_point(field_mutable:Media.small_pic)
  return _s;
}
inline const std::string& Media::_internal_small_pic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.small_pic_.Get();
}
inline void Media::_internal_set_small_pic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.small_pic_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_small_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.small_pic_.Mutable( GetArenaForAllocation());
}
inline std::string* Media::release_small_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Media.small_pic)
  return _impl_.small_pic_.Release();
}
inline void Media::set_allocated_small_pic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.small_pic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.small_pic_.IsDefault()) {
          _impl_.small_pic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Media.small_pic)
}

// string big_pic = 3;
inline void Media::clear_big_pic() {
  _impl_.big_pic_.ClearToEmpty();
}
inline const std::string& Media::big_pic() const {
  // @@protoc_insertion_point(field_get:Media.big_pic)
  return _internal_big_pic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Media::set_big_pic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_pic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Media.big_pic)
}
inline std::string* Media::mutable_big_pic() {
  std::string* _s = _internal_mutable_big_pic();
  // @@protoc_insertion_point(field_mutable:Media.big_pic)
  return _s;
}
inline const std::string& Media::_internal_big_pic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.big_pic_.Get();
}
inline void Media::_internal_set_big_pic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.big_pic_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_big_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.big_pic_.Mutable( GetArenaForAllocation());
}
inline std::string* Media::release_big_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Media.big_pic)
  return _impl_.big_pic_.Release();
}
inline void Media::set_allocated_big_pic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.big_pic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.big_pic_.IsDefault()) {
          _impl_.big_pic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Media.big_pic)
}

// string water_pic = 4;
inline void Media::clear_water_pic() {
  _impl_.water_pic_.ClearToEmpty();
}
inline const std::string& Media::water_pic() const {
  // @@protoc_insertion_point(field_get:Media.water_pic)
  return _internal_water_pic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Media::set_water_pic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.water_pic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Media.water_pic)
}
inline std::string* Media::mutable_water_pic() {
  std::string* _s = _internal_mutable_water_pic();
  // @@protoc_insertion_point(field_mutable:Media.water_pic)
  return _s;
}
inline const std::string& Media::_internal_water_pic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.water_pic_.Get();
}
inline void Media::_internal_set_water_pic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.water_pic_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_water_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.water_pic_.Mutable( GetArenaForAllocation());
}
inline std::string* Media::release_water_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Media.water_pic)
  return _impl_.water_pic_.Release();
}
inline void Media::set_allocated_water_pic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.water_pic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.water_pic_.IsDefault()) {
          _impl_.water_pic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Media.water_pic)
}

// uint32 width = 10;
inline void Media::clear_width() {
  _impl_.width_ = 0u;
}
inline ::uint32_t Media::width() const {
  // @@protoc_insertion_point(field_get:Media.width)
  return _internal_width();
}
inline void Media::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Media.width)
}
inline ::uint32_t Media::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Media::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 11;
inline void Media::clear_height() {
  _impl_.height_ = 0u;
}
inline ::uint32_t Media::height() const {
  // @@protoc_insertion_point(field_get:Media.height)
  return _internal_height();
}
inline void Media::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Media.height)
}
inline ::uint32_t Media::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Media::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// string origin_pic = 15;
inline void Media::clear_origin_pic() {
  _impl_.origin_pic_.ClearToEmpty();
}
inline const std::string& Media::origin_pic() const {
  // @@protoc_insertion_point(field_get:Media.origin_pic)
  return _internal_origin_pic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Media::set_origin_pic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.origin_pic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Media.origin_pic)
}
inline std::string* Media::mutable_origin_pic() {
  std::string* _s = _internal_mutable_origin_pic();
  // @@protoc_insertion_point(field_mutable:Media.origin_pic)
  return _s;
}
inline const std::string& Media::_internal_origin_pic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_pic_.Get();
}
inline void Media::_internal_set_origin_pic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.origin_pic_.Set(value, GetArenaForAllocation());
}
inline std::string* Media::_internal_mutable_origin_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.origin_pic_.Mutable( GetArenaForAllocation());
}
inline std::string* Media::release_origin_pic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Media.origin_pic)
  return _impl_.origin_pic_.Release();
}
inline void Media::set_allocated_origin_pic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.origin_pic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.origin_pic_.IsDefault()) {
          _impl_.origin_pic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Media.origin_pic)
}

// uint32 origin_size = 16;
inline void Media::clear_origin_size() {
  _impl_.origin_size_ = 0u;
}
inline ::uint32_t Media::origin_size() const {
  // @@protoc_insertion_point(field_get:Media.origin_size)
  return _internal_origin_size();
}
inline void Media::set_origin_size(::uint32_t value) {
  _internal_set_origin_size(value);
  // @@protoc_insertion_point(field_set:Media.origin_size)
}
inline ::uint32_t Media::_internal_origin_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_size_;
}
inline void Media::_internal_set_origin_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.origin_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Media_2eproto_2epb_2eh
