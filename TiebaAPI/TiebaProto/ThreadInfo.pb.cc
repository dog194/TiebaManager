// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ThreadInfo.proto

#include "ThreadInfo.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR ThreadInfo_OriginThreadInfo::ThreadInfo_OriginThreadInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.content_)*/ {},
      /*decltype(_impl_.title_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.fname_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.tid_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.agree_)*/ nullptr,
      /*decltype(_impl_.poll_info_)*/ nullptr,
      /*decltype(_impl_.fid_)*/ ::int64_t{0},
      /*decltype(_impl_.thread_type_)*/ 0,
      /*decltype(_impl_.is_deleted_)*/ 0,
      /*decltype(_impl_.pid_)*/ ::int64_t{0},
      /*decltype(_impl_.reply_num_)*/ 0,
    } {}
struct ThreadInfo_OriginThreadInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadInfo_OriginThreadInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadInfo_OriginThreadInfoDefaultTypeInternal() {}
  union {
    ThreadInfo_OriginThreadInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadInfo_OriginThreadInfoDefaultTypeInternal _ThreadInfo_OriginThreadInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ThreadInfo_CustomState::ThreadInfo_CustomState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.content_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ThreadInfo_CustomStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadInfo_CustomStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadInfo_CustomStateDefaultTypeInternal() {}
  union {
    ThreadInfo_CustomState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadInfo_CustomStateDefaultTypeInternal _ThreadInfo_CustomState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ThreadInfo::ThreadInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.first_post_content_)*/ {},
      /*decltype(_impl_.title_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.last_time_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.pids_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.author_)*/ nullptr,
      /*decltype(_impl_.poll_info_)*/ nullptr,
      /*decltype(_impl_.agree_)*/ nullptr,
      /*decltype(_impl_.origin_thread_info_)*/ nullptr,
      /*decltype(_impl_.custom_state_)*/ nullptr,
      /*decltype(_impl_.id_)*/ ::int64_t{0},
      /*decltype(_impl_.tid_)*/ ::int64_t{0},
      /*decltype(_impl_.reply_num_)*/ 0,
      /*decltype(_impl_.view_num_)*/ 0,
      /*decltype(_impl_.last_time_int_)*/ 0,
      /*decltype(_impl_.thread_types_)*/ 0,
      /*decltype(_impl_.is_top_)*/ 0,
      /*decltype(_impl_.is_good_)*/ 0,
      /*decltype(_impl_.is_vote_)*/ 0,
      /*decltype(_impl_.is_global_top_)*/ 0,
      /*decltype(_impl_.fid_)*/ ::int64_t{0},
      /*decltype(_impl_.first_post_id_)*/ ::int64_t{0},
      /*decltype(_impl_.create_time_)*/ 0,
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_.post_id_)*/ ::int64_t{0},
      /*decltype(_impl_.author_id_)*/ ::int64_t{0},
      /*decltype(_impl_.is_ad_)*/ 0u,
      /*decltype(_impl_.is_godthread_recommend_)*/ 0,
      /*decltype(_impl_.is_god_)*/ 0,
      /*decltype(_impl_.is_share_thread_)*/ 0,
      /*decltype(_impl_.tab_id_)*/ 0,
      /*decltype(_impl_.is_deleted_)*/ 0,
      /*decltype(_impl_.is_frs_mask_)*/ 0,
    } {}
struct ThreadInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadInfoDefaultTypeInternal() {}
  union {
    ThreadInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadInfoDefaultTypeInternal _ThreadInfo_default_instance_;
static ::_pb::Metadata file_level_metadata_ThreadInfo_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ThreadInfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ThreadInfo_2eproto = nullptr;
const ::uint32_t TableStruct_ThreadInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.fname_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.tid_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.fid_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.thread_type_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.is_deleted_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.reply_num_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.agree_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.poll_info_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_OriginThreadInfo, _impl_.pid_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_CustomState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ThreadInfo_CustomState, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.tid_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.reply_num_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.view_num_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.last_time_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.last_time_int_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.thread_types_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_top_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_good_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_vote_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.author_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.fid_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.first_post_id_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_global_top_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.create_time_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.post_id_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.author_id_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_ad_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.pids_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.poll_info_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_godthread_recommend_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.agree_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_god_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.origin_thread_info_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.first_post_content_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_share_thread_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.tab_id_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_deleted_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.is_frs_mask_),
    PROTOBUF_FIELD_OFFSET(::ThreadInfo, _impl_.custom_state_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    2,
    ~0u,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 19, -1, sizeof(::ThreadInfo_OriginThreadInfo)},
        {30, -1, -1, sizeof(::ThreadInfo_CustomState)},
        {39, 79, -1, sizeof(::ThreadInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_ThreadInfo_OriginThreadInfo_default_instance_._instance,
    &::_ThreadInfo_CustomState_default_instance_._instance,
    &::_ThreadInfo_default_instance_._instance,
};
const char descriptor_table_protodef_ThreadInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020ThreadInfo.proto\032\nUser.proto\032\017PbConten"
    "t.proto\032\013Agree.proto\032\016PollInfo.proto\"\331\007\n"
    "\nThreadInfo\022\n\n\002id\030\001 \001(\003\022\013\n\003tid\030\002 \001(\003\022\r\n\005"
    "title\030\003 \001(\t\022\021\n\treply_num\030\004 \001(\005\022\020\n\010view_n"
    "um\030\005 \001(\005\022\021\n\tlast_time\030\006 \001(\t\022\025\n\rlast_time"
    "_int\030\007 \001(\005\022\024\n\014thread_types\030\010 \001(\005\022\016\n\006is_t"
    "op\030\t \001(\005\022\017\n\007is_good\030\n \001(\005\022\017\n\007is_vote\030\013 \001"
    "(\005\022\025\n\006author\030\022 \001(\0132\005.User\022\013\n\003fid\030\033 \001(\003\022\025"
    "\n\rfirst_post_id\030( \001(\003\022\025\n\ris_global_top\030*"
    " \001(\005\022\023\n\013create_time\030- \001(\005\022\017\n\007post_id\0304 \001"
    "(\003\022\014\n\004time\0305 \001(\005\022\021\n\tauthor_id\0308 \001(\003\022\r\n\005i"
    "s_ad\030; \001(\r\022\014\n\004pids\030= \001(\t\022\034\n\tpoll_info\030J "
    "\001(\0132\t.PollInfo\022\036\n\026is_godthread_recommend"
    "\030U \001(\005\022\025\n\005agree\030~ \001(\0132\006.Agree\022\017\n\006is_god\030"
    "\203\001 \001(\005\0229\n\022origin_thread_info\030\215\001 \001(\0132\034.Th"
    "readInfo.OriginThreadInfo\022\'\n\022first_post_"
    "content\030\216\001 \003(\0132\n.PbContent\022\030\n\017is_share_t"
    "hread\030\217\001 \001(\005\022\017\n\006tab_id\030\257\001 \001(\005\022\023\n\nis_dele"
    "ted\030\265\001 \001(\005\022\024\n\013is_frs_mask\030\306\001 \001(\005\022.\n\014cust"
    "om_state\030\324\001 \001(\0132\027.ThreadInfo.CustomState"
    "\032\345\001\n\020OriginThreadInfo\022\r\n\005title\030\001 \001(\t\022\r\n\005"
    "fname\030\004 \001(\t\022\013\n\003tid\030\005 \001(\t\022\013\n\003fid\030\007 \001(\003\022\023\n"
    "\013thread_type\030\010 \001(\005\022\022\n\nis_deleted\030\t \001(\005\022\033"
    "\n\007content\030\016 \003(\0132\n.PbContent\022\021\n\treply_num"
    "\030\020 \001(\005\022\025\n\005agree\030\023 \001(\0132\006.Agree\022\034\n\tpoll_in"
    "fo\030\025 \001(\0132\t.PollInfo\022\013\n\003pid\030\031 \001(\003\032\036\n\013Cust"
    "omState\022\017\n\007content\030\002 \001(\tb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ThreadInfo_2eproto_deps[4] =
    {
        &::descriptor_table_Agree_2eproto,
        &::descriptor_table_PbContent_2eproto,
        &::descriptor_table_PollInfo_2eproto,
        &::descriptor_table_User_2eproto,
};
static ::absl::once_flag descriptor_table_ThreadInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ThreadInfo_2eproto = {
    false,
    false,
    1072,
    descriptor_table_protodef_ThreadInfo_2eproto,
    "ThreadInfo.proto",
    &descriptor_table_ThreadInfo_2eproto_once,
    descriptor_table_ThreadInfo_2eproto_deps,
    4,
    3,
    schemas,
    file_default_instances,
    TableStruct_ThreadInfo_2eproto::offsets,
    file_level_metadata_ThreadInfo_2eproto,
    file_level_enum_descriptors_ThreadInfo_2eproto,
    file_level_service_descriptors_ThreadInfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ThreadInfo_2eproto_getter() {
  return &descriptor_table_ThreadInfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ThreadInfo_2eproto(&descriptor_table_ThreadInfo_2eproto);
// ===================================================================

class ThreadInfo_OriginThreadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ThreadInfo_OriginThreadInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_._has_bits_);
  static const ::Agree& agree(const ThreadInfo_OriginThreadInfo* msg);
  static void set_has_agree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PollInfo& poll_info(const ThreadInfo_OriginThreadInfo* msg);
  static void set_has_poll_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Agree& ThreadInfo_OriginThreadInfo::_Internal::agree(const ThreadInfo_OriginThreadInfo* msg) {
  return *msg->_impl_.agree_;
}
const ::PollInfo& ThreadInfo_OriginThreadInfo::_Internal::poll_info(const ThreadInfo_OriginThreadInfo* msg) {
  return *msg->_impl_.poll_info_;
}
void ThreadInfo_OriginThreadInfo::clear_content() {
  _internal_mutable_content()->Clear();
}
void ThreadInfo_OriginThreadInfo::clear_agree() {
  if (_impl_.agree_ != nullptr) _impl_.agree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThreadInfo_OriginThreadInfo::clear_poll_info() {
  if (_impl_.poll_info_ != nullptr) _impl_.poll_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ThreadInfo_OriginThreadInfo::ThreadInfo_OriginThreadInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ThreadInfo.OriginThreadInfo)
}
ThreadInfo_OriginThreadInfo::ThreadInfo_OriginThreadInfo(const ThreadInfo_OriginThreadInfo& from) : ::google::protobuf::Message() {
  ThreadInfo_OriginThreadInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){from._impl_.content_},
      decltype(_impl_.title_){},
      decltype(_impl_.fname_){},
      decltype(_impl_.tid_){},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.poll_info_){nullptr},
      decltype(_impl_.fid_){},
      decltype(_impl_.thread_type_){},
      decltype(_impl_.is_deleted_){},
      decltype(_impl_.pid_){},
      decltype(_impl_.reply_num_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.fname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fname().empty()) {
    _this->_impl_.fname_.Set(from._internal_fname(), _this->GetArenaForAllocation());
  }
  _impl_.tid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tid().empty()) {
    _this->_impl_.tid_.Set(from._internal_tid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.agree_ = new ::Agree(*from._impl_.agree_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.poll_info_ = new ::PollInfo(*from._impl_.poll_info_);
  }
  ::memcpy(&_impl_.fid_, &from._impl_.fid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.reply_num_) -
    reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.reply_num_));

  // @@protoc_insertion_point(copy_constructor:ThreadInfo.OriginThreadInfo)
}
inline void ThreadInfo_OriginThreadInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){arena},
      decltype(_impl_.title_){},
      decltype(_impl_.fname_){},
      decltype(_impl_.tid_){},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.poll_info_){nullptr},
      decltype(_impl_.fid_){::int64_t{0}},
      decltype(_impl_.thread_type_){0},
      decltype(_impl_.is_deleted_){0},
      decltype(_impl_.pid_){::int64_t{0}},
      decltype(_impl_.reply_num_){0},
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ThreadInfo_OriginThreadInfo::~ThreadInfo_OriginThreadInfo() {
  // @@protoc_insertion_point(destructor:ThreadInfo.OriginThreadInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ThreadInfo_OriginThreadInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.fname_.Destroy();
  _impl_.tid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.agree_;
  if (this != internal_default_instance()) delete _impl_.poll_info_;
}
void ThreadInfo_OriginThreadInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ThreadInfo_OriginThreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ThreadInfo.OriginThreadInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_content()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.fname_.ClearToEmpty();
  _impl_.tid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.agree_ != nullptr);
      _impl_.agree_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.poll_info_ != nullptr);
      _impl_.poll_info_->Clear();
    }
  }
  ::memset(&_impl_.fid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reply_num_) -
      reinterpret_cast<char*>(&_impl_.fid_)) + sizeof(_impl_.reply_num_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ThreadInfo_OriginThreadInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 3, 57, 2> ThreadInfo_OriginThreadInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_._has_bits_),
    0, // no _extensions_
    25, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4276837926,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ThreadInfo_OriginThreadInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 reply_num = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.reply_num_)}},
    // string title = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.title_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .Agree agree = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 0, 1, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.agree_)}},
    // string fname = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.fname_)}},
    // string tid = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.tid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int64 fid = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ThreadInfo_OriginThreadInfo, _impl_.fid_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.fid_)}},
    // int32 thread_type = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo_OriginThreadInfo, _impl_.thread_type_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.thread_type_)}},
    // int32 is_deleted = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo_OriginThreadInfo, _impl_.is_deleted_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.is_deleted_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .PbContent content = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.content_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string title = 1;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string fname = 4;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.fname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string tid = 5;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.tid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 fid = 7;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.fid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 thread_type = 8;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.thread_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 is_deleted = 9;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.is_deleted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .PbContent content = 14;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 reply_num = 16;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.reply_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Agree agree = 19;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.agree_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .PollInfo poll_info = 21;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.poll_info_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 pid = 25;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.pid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PbContent>()},
    {::_pbi::TcParser::GetTable<::Agree>()},
    {::_pbi::TcParser::GetTable<::PollInfo>()},
  }}, {{
    "\33\5\5\3\0\0\0\0\0\0\0\0\0\0\0\0"
    "ThreadInfo.OriginThreadInfo"
    "title"
    "fname"
    "tid"
  }},
};

::uint8_t* ThreadInfo_OriginThreadInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ThreadInfo.OriginThreadInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.OriginThreadInfo.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string fname = 4;
  if (!this->_internal_fname().empty()) {
    const std::string& _s = this->_internal_fname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.OriginThreadInfo.fname");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string tid = 5;
  if (!this->_internal_tid().empty()) {
    const std::string& _s = this->_internal_tid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.OriginThreadInfo.tid");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int64 fid = 7;
  if (this->_internal_fid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<7>(
            stream, this->_internal_fid(), target);
  }

  // int32 thread_type = 8;
  if (this->_internal_thread_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_thread_type(), target);
  }

  // int32 is_deleted = 9;
  if (this->_internal_is_deleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_is_deleted(), target);
  }

  // repeated .PbContent content = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 reply_num = 16;
  if (this->_internal_reply_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_reply_num(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Agree agree = 19;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::agree(this),
        _Internal::agree(this).GetCachedSize(), target, stream);
  }

  // .PollInfo poll_info = 21;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::poll_info(this),
        _Internal::poll_info(this).GetCachedSize(), target, stream);
  }

  // int64 pid = 25;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        25, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ThreadInfo.OriginThreadInfo)
  return target;
}

::size_t ThreadInfo_OriginThreadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ThreadInfo.OriginThreadInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PbContent content = 14;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->_internal_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string fname = 4;
  if (!this->_internal_fname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_fname());
  }

  // string tid = 5;
  if (!this->_internal_tid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .Agree agree = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.agree_);
    }

    // .PollInfo poll_info = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.poll_info_);
    }

  }
  // int64 fid = 7;
  if (this->_internal_fid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_fid());
  }

  // int32 thread_type = 8;
  if (this->_internal_thread_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_thread_type());
  }

  // int32 is_deleted = 9;
  if (this->_internal_is_deleted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_is_deleted());
  }

  // int64 pid = 25;
  if (this->_internal_pid() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_pid());
  }

  // int32 reply_num = 16;
  if (this->_internal_reply_num() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_reply_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ThreadInfo_OriginThreadInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ThreadInfo_OriginThreadInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*ThreadInfo_OriginThreadInfo::GetClassData() const { return &_class_data_; }


void ThreadInfo_OriginThreadInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ThreadInfo_OriginThreadInfo*>(&to_msg);
  auto& from = static_cast<const ThreadInfo_OriginThreadInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ThreadInfo.OriginThreadInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content()->MergeFrom(from._internal_content());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_fname().empty()) {
    _this->_internal_set_fname(from._internal_fname());
  }
  if (!from._internal_tid().empty()) {
    _this->_internal_set_tid(from._internal_tid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_agree()->::Agree::MergeFrom(
          from._internal_agree());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_poll_info()->::PollInfo::MergeFrom(
          from._internal_poll_info());
    }
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_thread_type() != 0) {
    _this->_internal_set_thread_type(from._internal_thread_type());
  }
  if (from._internal_is_deleted() != 0) {
    _this->_internal_set_is_deleted(from._internal_is_deleted());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_reply_num() != 0) {
    _this->_internal_set_reply_num(from._internal_reply_num());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadInfo_OriginThreadInfo::CopyFrom(const ThreadInfo_OriginThreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ThreadInfo.OriginThreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ThreadInfo_OriginThreadInfo::IsInitialized() const {
  return true;
}

void ThreadInfo_OriginThreadInfo::InternalSwap(ThreadInfo_OriginThreadInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fname_, lhs_arena,
                                       &other->_impl_.fname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tid_, lhs_arena,
                                       &other->_impl_.tid_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.reply_num_)
      + sizeof(ThreadInfo_OriginThreadInfo::_impl_.reply_num_)
      - PROTOBUF_FIELD_OFFSET(ThreadInfo_OriginThreadInfo, _impl_.agree_)>(
          reinterpret_cast<char*>(&_impl_.agree_),
          reinterpret_cast<char*>(&other->_impl_.agree_));
}

::google::protobuf::Metadata ThreadInfo_OriginThreadInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ThreadInfo_2eproto_getter, &descriptor_table_ThreadInfo_2eproto_once,
      file_level_metadata_ThreadInfo_2eproto[0]);
}
// ===================================================================

class ThreadInfo_CustomState::_Internal {
 public:
};

ThreadInfo_CustomState::ThreadInfo_CustomState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ThreadInfo.CustomState)
}
ThreadInfo_CustomState::ThreadInfo_CustomState(const ThreadInfo_CustomState& from) : ::google::protobuf::Message() {
  ThreadInfo_CustomState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:ThreadInfo.CustomState)
}
inline void ThreadInfo_CustomState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ThreadInfo_CustomState::~ThreadInfo_CustomState() {
  // @@protoc_insertion_point(destructor:ThreadInfo.CustomState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ThreadInfo_CustomState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}
void ThreadInfo_CustomState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ThreadInfo_CustomState::Clear() {
// @@protoc_insertion_point(message_clear_start:ThreadInfo.CustomState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ThreadInfo_CustomState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 38, 2> ThreadInfo_CustomState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967293,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ThreadInfo_CustomState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string content = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo_CustomState, _impl_.content_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string content = 2;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo_CustomState, _impl_.content_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\7\0\0\0\0\0\0"
    "ThreadInfo.CustomState"
    "content"
  }},
};

::uint8_t* ThreadInfo_CustomState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ThreadInfo.CustomState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.CustomState.content");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ThreadInfo.CustomState)
  return target;
}

::size_t ThreadInfo_CustomState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ThreadInfo.CustomState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ThreadInfo_CustomState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ThreadInfo_CustomState::MergeImpl
};
const ::google::protobuf::Message::ClassData*ThreadInfo_CustomState::GetClassData() const { return &_class_data_; }


void ThreadInfo_CustomState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ThreadInfo_CustomState*>(&to_msg);
  auto& from = static_cast<const ThreadInfo_CustomState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ThreadInfo.CustomState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadInfo_CustomState::CopyFrom(const ThreadInfo_CustomState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ThreadInfo.CustomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ThreadInfo_CustomState::IsInitialized() const {
  return true;
}

void ThreadInfo_CustomState::InternalSwap(ThreadInfo_CustomState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);
}

::google::protobuf::Metadata ThreadInfo_CustomState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ThreadInfo_2eproto_getter, &descriptor_table_ThreadInfo_2eproto_once,
      file_level_metadata_ThreadInfo_2eproto[1]);
}
// ===================================================================

class ThreadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ThreadInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_._has_bits_);
  static const ::User& author(const ThreadInfo* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PollInfo& poll_info(const ThreadInfo* msg);
  static void set_has_poll_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Agree& agree(const ThreadInfo* msg);
  static void set_has_agree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ThreadInfo_OriginThreadInfo& origin_thread_info(const ThreadInfo* msg);
  static void set_has_origin_thread_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ThreadInfo_CustomState& custom_state(const ThreadInfo* msg);
  static void set_has_custom_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::User& ThreadInfo::_Internal::author(const ThreadInfo* msg) {
  return *msg->_impl_.author_;
}
const ::PollInfo& ThreadInfo::_Internal::poll_info(const ThreadInfo* msg) {
  return *msg->_impl_.poll_info_;
}
const ::Agree& ThreadInfo::_Internal::agree(const ThreadInfo* msg) {
  return *msg->_impl_.agree_;
}
const ::ThreadInfo_OriginThreadInfo& ThreadInfo::_Internal::origin_thread_info(const ThreadInfo* msg) {
  return *msg->_impl_.origin_thread_info_;
}
const ::ThreadInfo_CustomState& ThreadInfo::_Internal::custom_state(const ThreadInfo* msg) {
  return *msg->_impl_.custom_state_;
}
void ThreadInfo::clear_author() {
  if (_impl_.author_ != nullptr) _impl_.author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThreadInfo::clear_poll_info() {
  if (_impl_.poll_info_ != nullptr) _impl_.poll_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThreadInfo::clear_agree() {
  if (_impl_.agree_ != nullptr) _impl_.agree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ThreadInfo::clear_first_post_content() {
  _internal_mutable_first_post_content()->Clear();
}
ThreadInfo::ThreadInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ThreadInfo)
}
ThreadInfo::ThreadInfo(const ThreadInfo& from) : ::google::protobuf::Message() {
  ThreadInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.first_post_content_){from._impl_.first_post_content_},
      decltype(_impl_.title_){},
      decltype(_impl_.last_time_){},
      decltype(_impl_.pids_){},
      decltype(_impl_.author_){nullptr},
      decltype(_impl_.poll_info_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.origin_thread_info_){nullptr},
      decltype(_impl_.custom_state_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.tid_){},
      decltype(_impl_.reply_num_){},
      decltype(_impl_.view_num_){},
      decltype(_impl_.last_time_int_){},
      decltype(_impl_.thread_types_){},
      decltype(_impl_.is_top_){},
      decltype(_impl_.is_good_){},
      decltype(_impl_.is_vote_){},
      decltype(_impl_.is_global_top_){},
      decltype(_impl_.fid_){},
      decltype(_impl_.first_post_id_){},
      decltype(_impl_.create_time_){},
      decltype(_impl_.time_){},
      decltype(_impl_.post_id_){},
      decltype(_impl_.author_id_){},
      decltype(_impl_.is_ad_){},
      decltype(_impl_.is_godthread_recommend_){},
      decltype(_impl_.is_god_){},
      decltype(_impl_.is_share_thread_){},
      decltype(_impl_.tab_id_){},
      decltype(_impl_.is_deleted_){},
      decltype(_impl_.is_frs_mask_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.last_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_time().empty()) {
    _this->_impl_.last_time_.Set(from._internal_last_time(), _this->GetArenaForAllocation());
  }
  _impl_.pids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pids_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pids().empty()) {
    _this->_impl_.pids_.Set(from._internal_pids(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.author_ = new ::User(*from._impl_.author_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.poll_info_ = new ::PollInfo(*from._impl_.poll_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.agree_ = new ::Agree(*from._impl_.agree_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.origin_thread_info_ = new ::ThreadInfo_OriginThreadInfo(*from._impl_.origin_thread_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.custom_state_ = new ::ThreadInfo_CustomState(*from._impl_.custom_state_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_frs_mask_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_frs_mask_));

  // @@protoc_insertion_point(copy_constructor:ThreadInfo)
}
inline void ThreadInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.first_post_content_){arena},
      decltype(_impl_.title_){},
      decltype(_impl_.last_time_){},
      decltype(_impl_.pids_){},
      decltype(_impl_.author_){nullptr},
      decltype(_impl_.poll_info_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.origin_thread_info_){nullptr},
      decltype(_impl_.custom_state_){nullptr},
      decltype(_impl_.id_){::int64_t{0}},
      decltype(_impl_.tid_){::int64_t{0}},
      decltype(_impl_.reply_num_){0},
      decltype(_impl_.view_num_){0},
      decltype(_impl_.last_time_int_){0},
      decltype(_impl_.thread_types_){0},
      decltype(_impl_.is_top_){0},
      decltype(_impl_.is_good_){0},
      decltype(_impl_.is_vote_){0},
      decltype(_impl_.is_global_top_){0},
      decltype(_impl_.fid_){::int64_t{0}},
      decltype(_impl_.first_post_id_){::int64_t{0}},
      decltype(_impl_.create_time_){0},
      decltype(_impl_.time_){0},
      decltype(_impl_.post_id_){::int64_t{0}},
      decltype(_impl_.author_id_){::int64_t{0}},
      decltype(_impl_.is_ad_){0u},
      decltype(_impl_.is_godthread_recommend_){0},
      decltype(_impl_.is_god_){0},
      decltype(_impl_.is_share_thread_){0},
      decltype(_impl_.tab_id_){0},
      decltype(_impl_.is_deleted_){0},
      decltype(_impl_.is_frs_mask_){0},
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pids_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ThreadInfo::~ThreadInfo() {
  // @@protoc_insertion_point(destructor:ThreadInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ThreadInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.first_post_content_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.last_time_.Destroy();
  _impl_.pids_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
  if (this != internal_default_instance()) delete _impl_.poll_info_;
  if (this != internal_default_instance()) delete _impl_.agree_;
  if (this != internal_default_instance()) delete _impl_.origin_thread_info_;
  if (this != internal_default_instance()) delete _impl_.custom_state_;
}
void ThreadInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ThreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ThreadInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_first_post_content()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.last_time_.ClearToEmpty();
  _impl_.pids_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.author_ != nullptr);
      _impl_.author_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.poll_info_ != nullptr);
      _impl_.poll_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.agree_ != nullptr);
      _impl_.agree_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.origin_thread_info_ != nullptr);
      _impl_.origin_thread_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.custom_state_ != nullptr);
      _impl_.custom_state_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_frs_mask_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_frs_mask_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ThreadInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 32, 6, 69, 27> ThreadInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_._has_bits_),
    0, // no _extensions_
    212, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4227725312,  // skipmap
    offsetof(decltype(_table_), field_entries),
    32,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ThreadInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ThreadInfo, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.id_)}},
    // int64 tid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ThreadInfo, _impl_.tid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.tid_)}},
    // string title = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.title_)}},
    // int32 reply_num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.reply_num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.reply_num_)}},
    // int32 view_num = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.view_num_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.view_num_)}},
    // string last_time = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.last_time_)}},
    // int32 last_time_int = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.last_time_int_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.last_time_int_)}},
    // int32 thread_types = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.thread_types_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.thread_types_)}},
    // int32 is_top = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.is_top_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_top_)}},
    // int32 is_good = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.is_good_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_good_)}},
    // int32 is_vote = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ThreadInfo, _impl_.is_vote_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_vote_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .User author = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 0, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.author_)}},
    // int32 is_god = 131;
    {::_pbi::TcParser::FastV32S2,
     {2200, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_god_)}},
    // int64 post_id = 52;
    {::_pbi::TcParser::FastV64S2,
     {928, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.post_id_)}},
    // int32 time = 53;
    {::_pbi::TcParser::FastV32S2,
     {936, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.time_)}},
    // int32 is_frs_mask = 198;
    {::_pbi::TcParser::FastV32S2,
     {3248, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_frs_mask_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int64 first_post_id = 40;
    {::_pbi::TcParser::FastV64S2,
     {704, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.first_post_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 is_global_top = 42;
    {::_pbi::TcParser::FastV32S2,
     {720, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_global_top_)}},
    // int64 fid = 27;
    {::_pbi::TcParser::FastV64S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.fid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 create_time = 45;
    {::_pbi::TcParser::FastV32S2,
     {744, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.create_time_)}},
    // .Agree agree = 126;
    {::_pbi::TcParser::FastMtS2,
     {2034, 2, 2, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.agree_)}},
    // int32 is_share_thread = 143;
    {::_pbi::TcParser::FastV32S2,
     {2296, 63, 0, PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_share_thread_)}},
  }}, {{
    40, 0, 11,
    53210, 13, 65494, 18, 57339, 21, 65535, 23, 65535, 23, 63423, 23,
    65311, 25, 65535, 28, 57215, 28, 49151, 30, 61439, 31,
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 tid = 2;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.tid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string title = 3;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 reply_num = 4;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.reply_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 view_num = 5;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.view_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string last_time = 6;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.last_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 last_time_int = 7;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.last_time_int_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 thread_types = 8;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.thread_types_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 is_top = 9;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_top_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 is_good = 10;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_good_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 is_vote = 11;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_vote_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .User author = 18;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.author_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 fid = 27;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.fid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 first_post_id = 40;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.first_post_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 is_global_top = 42;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_global_top_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 create_time = 45;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.create_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 post_id = 52;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.post_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 time = 53;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 author_id = 56;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.author_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint32 is_ad = 59;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_ad_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string pids = 61;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.pids_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .PollInfo poll_info = 74;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.poll_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 is_godthread_recommend = 85;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_godthread_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Agree agree = 126;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.agree_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 is_god = 131;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_god_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .ThreadInfo.OriginThreadInfo origin_thread_info = 141;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.origin_thread_info_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .PbContent first_post_content = 142;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.first_post_content_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 is_share_thread = 143;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_share_thread_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tab_id = 175;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.tab_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 is_deleted = 181;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_deleted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 is_frs_mask = 198;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_frs_mask_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .ThreadInfo.CustomState custom_state = 212;
    {PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.custom_state_), _Internal::kHasBitsOffset + 4, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::User>()},
    {::_pbi::TcParser::GetTable<::PollInfo>()},
    {::_pbi::TcParser::GetTable<::Agree>()},
    {::_pbi::TcParser::GetTable<::ThreadInfo_OriginThreadInfo>()},
    {::_pbi::TcParser::GetTable<::PbContent>()},
    {::_pbi::TcParser::GetTable<::ThreadInfo_CustomState>()},
  }}, {{
    "\12\0\0\5\0\0\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "ThreadInfo"
    "title"
    "last_time"
    "pids"
  }},
};

::uint8_t* ThreadInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ThreadInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int64 tid = 2;
  if (this->_internal_tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_tid(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.title");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 reply_num = 4;
  if (this->_internal_reply_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_reply_num(), target);
  }

  // int32 view_num = 5;
  if (this->_internal_view_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_view_num(), target);
  }

  // string last_time = 6;
  if (!this->_internal_last_time().empty()) {
    const std::string& _s = this->_internal_last_time();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.last_time");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // int32 last_time_int = 7;
  if (this->_internal_last_time_int() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_last_time_int(), target);
  }

  // int32 thread_types = 8;
  if (this->_internal_thread_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_thread_types(), target);
  }

  // int32 is_top = 9;
  if (this->_internal_is_top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_is_top(), target);
  }

  // int32 is_good = 10;
  if (this->_internal_is_good() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_is_good(), target);
  }

  // int32 is_vote = 11;
  if (this->_internal_is_vote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_is_vote(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .User author = 18;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // int64 fid = 27;
  if (this->_internal_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        27, this->_internal_fid(), target);
  }

  // int64 first_post_id = 40;
  if (this->_internal_first_post_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        40, this->_internal_first_post_id(), target);
  }

  // int32 is_global_top = 42;
  if (this->_internal_is_global_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        42, this->_internal_is_global_top(), target);
  }

  // int32 create_time = 45;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        45, this->_internal_create_time(), target);
  }

  // int64 post_id = 52;
  if (this->_internal_post_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        52, this->_internal_post_id(), target);
  }

  // int32 time = 53;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        53, this->_internal_time(), target);
  }

  // int64 author_id = 56;
  if (this->_internal_author_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        56, this->_internal_author_id(), target);
  }

  // uint32 is_ad = 59;
  if (this->_internal_is_ad() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        59, this->_internal_is_ad(), target);
  }

  // string pids = 61;
  if (!this->_internal_pids().empty()) {
    const std::string& _s = this->_internal_pids();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ThreadInfo.pids");
    target = stream->WriteStringMaybeAliased(61, _s, target);
  }

  // .PollInfo poll_info = 74;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::poll_info(this),
        _Internal::poll_info(this).GetCachedSize(), target, stream);
  }

  // int32 is_godthread_recommend = 85;
  if (this->_internal_is_godthread_recommend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        85, this->_internal_is_godthread_recommend(), target);
  }

  // .Agree agree = 126;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(126, _Internal::agree(this),
        _Internal::agree(this).GetCachedSize(), target, stream);
  }

  // int32 is_god = 131;
  if (this->_internal_is_god() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        131, this->_internal_is_god(), target);
  }

  // .ThreadInfo.OriginThreadInfo origin_thread_info = 141;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(141, _Internal::origin_thread_info(this),
        _Internal::origin_thread_info(this).GetCachedSize(), target, stream);
  }

  // repeated .PbContent first_post_content = 142;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_first_post_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_first_post_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(142, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 is_share_thread = 143;
  if (this->_internal_is_share_thread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        143, this->_internal_is_share_thread(), target);
  }

  // int32 tab_id = 175;
  if (this->_internal_tab_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        175, this->_internal_tab_id(), target);
  }

  // int32 is_deleted = 181;
  if (this->_internal_is_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        181, this->_internal_is_deleted(), target);
  }

  // int32 is_frs_mask = 198;
  if (this->_internal_is_frs_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        198, this->_internal_is_frs_mask(), target);
  }

  // .ThreadInfo.CustomState custom_state = 212;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(212, _Internal::custom_state(this),
        _Internal::custom_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ThreadInfo)
  return target;
}

::size_t ThreadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ThreadInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PbContent first_post_content = 142;
  total_size += 2UL * this->_internal_first_post_content_size();
  for (const auto& msg : this->_internal_first_post_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string last_time = 6;
  if (!this->_internal_last_time().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_last_time());
  }

  // string pids = 61;
  if (!this->_internal_pids().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_pids());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .User author = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.author_);
    }

    // .PollInfo poll_info = 74;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.poll_info_);
    }

    // .Agree agree = 126;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.agree_);
    }

    // .ThreadInfo.OriginThreadInfo origin_thread_info = 141;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.origin_thread_info_);
    }

    // .ThreadInfo.CustomState custom_state = 212;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.custom_state_);
    }

  }
  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 tid = 2;
  if (this->_internal_tid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_tid());
  }

  // int32 reply_num = 4;
  if (this->_internal_reply_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_reply_num());
  }

  // int32 view_num = 5;
  if (this->_internal_view_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_view_num());
  }

  // int32 last_time_int = 7;
  if (this->_internal_last_time_int() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_time_int());
  }

  // int32 thread_types = 8;
  if (this->_internal_thread_types() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_thread_types());
  }

  // int32 is_top = 9;
  if (this->_internal_is_top() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_is_top());
  }

  // int32 is_good = 10;
  if (this->_internal_is_good() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_is_good());
  }

  // int32 is_vote = 11;
  if (this->_internal_is_vote() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_is_vote());
  }

  // int32 is_global_top = 42;
  if (this->_internal_is_global_top() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_global_top());
  }

  // int64 fid = 27;
  if (this->_internal_fid() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_fid());
  }

  // int64 first_post_id = 40;
  if (this->_internal_first_post_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_first_post_id());
  }

  // int32 create_time = 45;
  if (this->_internal_create_time() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_create_time());
  }

  // int32 time = 53;
  if (this->_internal_time() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_time());
  }

  // int64 post_id = 52;
  if (this->_internal_post_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_post_id());
  }

  // int64 author_id = 56;
  if (this->_internal_author_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_author_id());
  }

  // uint32 is_ad = 59;
  if (this->_internal_is_ad() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_is_ad());
  }

  // int32 is_godthread_recommend = 85;
  if (this->_internal_is_godthread_recommend() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_godthread_recommend());
  }

  // int32 is_god = 131;
  if (this->_internal_is_god() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_god());
  }

  // int32 is_share_thread = 143;
  if (this->_internal_is_share_thread() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_share_thread());
  }

  // int32 tab_id = 175;
  if (this->_internal_tab_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_tab_id());
  }

  // int32 is_deleted = 181;
  if (this->_internal_is_deleted() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_deleted());
  }

  // int32 is_frs_mask = 198;
  if (this->_internal_is_frs_mask() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_frs_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ThreadInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ThreadInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*ThreadInfo::GetClassData() const { return &_class_data_; }


void ThreadInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ThreadInfo*>(&to_msg);
  auto& from = static_cast<const ThreadInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ThreadInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_first_post_content()->MergeFrom(from._internal_first_post_content());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_last_time().empty()) {
    _this->_internal_set_last_time(from._internal_last_time());
  }
  if (!from._internal_pids().empty()) {
    _this->_internal_set_pids(from._internal_pids());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_author()->::User::MergeFrom(
          from._internal_author());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_poll_info()->::PollInfo::MergeFrom(
          from._internal_poll_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_agree()->::Agree::MergeFrom(
          from._internal_agree());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_origin_thread_info()->::ThreadInfo_OriginThreadInfo::MergeFrom(
          from._internal_origin_thread_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_custom_state()->::ThreadInfo_CustomState::MergeFrom(
          from._internal_custom_state());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_tid() != 0) {
    _this->_internal_set_tid(from._internal_tid());
  }
  if (from._internal_reply_num() != 0) {
    _this->_internal_set_reply_num(from._internal_reply_num());
  }
  if (from._internal_view_num() != 0) {
    _this->_internal_set_view_num(from._internal_view_num());
  }
  if (from._internal_last_time_int() != 0) {
    _this->_internal_set_last_time_int(from._internal_last_time_int());
  }
  if (from._internal_thread_types() != 0) {
    _this->_internal_set_thread_types(from._internal_thread_types());
  }
  if (from._internal_is_top() != 0) {
    _this->_internal_set_is_top(from._internal_is_top());
  }
  if (from._internal_is_good() != 0) {
    _this->_internal_set_is_good(from._internal_is_good());
  }
  if (from._internal_is_vote() != 0) {
    _this->_internal_set_is_vote(from._internal_is_vote());
  }
  if (from._internal_is_global_top() != 0) {
    _this->_internal_set_is_global_top(from._internal_is_global_top());
  }
  if (from._internal_fid() != 0) {
    _this->_internal_set_fid(from._internal_fid());
  }
  if (from._internal_first_post_id() != 0) {
    _this->_internal_set_first_post_id(from._internal_first_post_id());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_post_id() != 0) {
    _this->_internal_set_post_id(from._internal_post_id());
  }
  if (from._internal_author_id() != 0) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (from._internal_is_ad() != 0) {
    _this->_internal_set_is_ad(from._internal_is_ad());
  }
  if (from._internal_is_godthread_recommend() != 0) {
    _this->_internal_set_is_godthread_recommend(from._internal_is_godthread_recommend());
  }
  if (from._internal_is_god() != 0) {
    _this->_internal_set_is_god(from._internal_is_god());
  }
  if (from._internal_is_share_thread() != 0) {
    _this->_internal_set_is_share_thread(from._internal_is_share_thread());
  }
  if (from._internal_tab_id() != 0) {
    _this->_internal_set_tab_id(from._internal_tab_id());
  }
  if (from._internal_is_deleted() != 0) {
    _this->_internal_set_is_deleted(from._internal_is_deleted());
  }
  if (from._internal_is_frs_mask() != 0) {
    _this->_internal_set_is_frs_mask(from._internal_is_frs_mask());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadInfo::CopyFrom(const ThreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ThreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ThreadInfo::IsInitialized() const {
  return true;
}

void ThreadInfo::InternalSwap(ThreadInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.first_post_content_.InternalSwap(&other->_impl_.first_post_content_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_time_, lhs_arena,
                                       &other->_impl_.last_time_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pids_, lhs_arena,
                                       &other->_impl_.pids_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.is_frs_mask_)
      + sizeof(ThreadInfo::_impl_.is_frs_mask_)
      - PROTOBUF_FIELD_OFFSET(ThreadInfo, _impl_.author_)>(
          reinterpret_cast<char*>(&_impl_.author_),
          reinterpret_cast<char*>(&other->_impl_.author_));
}

::google::protobuf::Metadata ThreadInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ThreadInfo_2eproto_getter, &descriptor_table_ThreadInfo_2eproto_once,
      file_level_metadata_ThreadInfo_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
