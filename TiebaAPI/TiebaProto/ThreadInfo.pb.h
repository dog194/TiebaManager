// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ThreadInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ThreadInfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ThreadInfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "User.pb.h"
#include "PbContent.pb.h"
#include "Agree.pb.h"
#include "PollInfo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ThreadInfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ThreadInfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ThreadInfo_2eproto;
class ThreadInfo;
struct ThreadInfoDefaultTypeInternal;
extern ThreadInfoDefaultTypeInternal _ThreadInfo_default_instance_;
class ThreadInfo_OriginThreadInfo;
struct ThreadInfo_OriginThreadInfoDefaultTypeInternal;
extern ThreadInfo_OriginThreadInfoDefaultTypeInternal _ThreadInfo_OriginThreadInfo_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class ThreadInfo_OriginThreadInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ThreadInfo.OriginThreadInfo) */ {
 public:
  inline ThreadInfo_OriginThreadInfo() : ThreadInfo_OriginThreadInfo(nullptr) {}
  ~ThreadInfo_OriginThreadInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ThreadInfo_OriginThreadInfo(::google::protobuf::internal::ConstantInitialized);

  ThreadInfo_OriginThreadInfo(const ThreadInfo_OriginThreadInfo& from);
  ThreadInfo_OriginThreadInfo(ThreadInfo_OriginThreadInfo&& from) noexcept
    : ThreadInfo_OriginThreadInfo() {
    *this = ::std::move(from);
  }

  inline ThreadInfo_OriginThreadInfo& operator=(const ThreadInfo_OriginThreadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadInfo_OriginThreadInfo& operator=(ThreadInfo_OriginThreadInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadInfo_OriginThreadInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadInfo_OriginThreadInfo* internal_default_instance() {
    return reinterpret_cast<const ThreadInfo_OriginThreadInfo*>(
               &_ThreadInfo_OriginThreadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThreadInfo_OriginThreadInfo& a, ThreadInfo_OriginThreadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadInfo_OriginThreadInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadInfo_OriginThreadInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadInfo_OriginThreadInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadInfo_OriginThreadInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ThreadInfo_OriginThreadInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ThreadInfo_OriginThreadInfo& from) {
    ThreadInfo_OriginThreadInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadInfo_OriginThreadInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ThreadInfo.OriginThreadInfo";
  }
  protected:
  explicit ThreadInfo_OriginThreadInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 14,
    kTitleFieldNumber = 1,
    kFnameFieldNumber = 4,
    kTidFieldNumber = 5,
    kAgreeFieldNumber = 19,
    kPollInfoFieldNumber = 21,
    kFidFieldNumber = 7,
    kThreadTypeFieldNumber = 8,
    kIsDeletedFieldNumber = 9,
    kPidFieldNumber = 25,
    kReplyNumFieldNumber = 16,
  };
  // repeated .PbContent content = 14;
  int content_size() const;
  private:
  int _internal_content_size() const;

  public:
  void clear_content() ;
  ::PbContent* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PbContent>& _internal_content() const;
  ::google::protobuf::RepeatedPtrField<::PbContent>* _internal_mutable_content();
  public:
  const ::PbContent& content(int index) const;
  ::PbContent* add_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      content() const;
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string fname = 4;
  void clear_fname() ;
  const std::string& fname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fname(Arg_&& arg, Args_... args);
  std::string* mutable_fname();
  PROTOBUF_NODISCARD std::string* release_fname();
  void set_allocated_fname(std::string* ptr);

  private:
  const std::string& _internal_fname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fname(
      const std::string& value);
  std::string* _internal_mutable_fname();

  public:
  // string tid = 5;
  void clear_tid() ;
  const std::string& tid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tid(Arg_&& arg, Args_... args);
  std::string* mutable_tid();
  PROTOBUF_NODISCARD std::string* release_tid();
  void set_allocated_tid(std::string* ptr);

  private:
  const std::string& _internal_tid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tid(
      const std::string& value);
  std::string* _internal_mutable_tid();

  public:
  // .Agree agree = 19;
  bool has_agree() const;
  void clear_agree() ;
  const ::Agree& agree() const;
  PROTOBUF_NODISCARD ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* value);
  void unsafe_arena_set_allocated_agree(::Agree* value);
  ::Agree* unsafe_arena_release_agree();

  private:
  const ::Agree& _internal_agree() const;
  ::Agree* _internal_mutable_agree();

  public:
  // .PollInfo poll_info = 21;
  bool has_poll_info() const;
  void clear_poll_info() ;
  const ::PollInfo& poll_info() const;
  PROTOBUF_NODISCARD ::PollInfo* release_poll_info();
  ::PollInfo* mutable_poll_info();
  void set_allocated_poll_info(::PollInfo* value);
  void unsafe_arena_set_allocated_poll_info(::PollInfo* value);
  ::PollInfo* unsafe_arena_release_poll_info();

  private:
  const ::PollInfo& _internal_poll_info() const;
  ::PollInfo* _internal_mutable_poll_info();

  public:
  // int64 fid = 7;
  void clear_fid() ;
  ::int64_t fid() const;
  void set_fid(::int64_t value);

  private:
  ::int64_t _internal_fid() const;
  void _internal_set_fid(::int64_t value);

  public:
  // int32 thread_type = 8;
  void clear_thread_type() ;
  ::int32_t thread_type() const;
  void set_thread_type(::int32_t value);

  private:
  ::int32_t _internal_thread_type() const;
  void _internal_set_thread_type(::int32_t value);

  public:
  // int32 is_deleted = 9;
  void clear_is_deleted() ;
  ::int32_t is_deleted() const;
  void set_is_deleted(::int32_t value);

  private:
  ::int32_t _internal_is_deleted() const;
  void _internal_set_is_deleted(::int32_t value);

  public:
  // int64 pid = 25;
  void clear_pid() ;
  ::int64_t pid() const;
  void set_pid(::int64_t value);

  private:
  ::int64_t _internal_pid() const;
  void _internal_set_pid(::int64_t value);

  public:
  // int32 reply_num = 16;
  void clear_reply_num() ;
  ::int32_t reply_num() const;
  void set_reply_num(::int32_t value);

  private:
  ::int32_t _internal_reply_num() const;
  void _internal_set_reply_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ThreadInfo.OriginThreadInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 3, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::PbContent > content_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr fname_;
    ::google::protobuf::internal::ArenaStringPtr tid_;
    ::Agree* agree_;
    ::PollInfo* poll_info_;
    ::int64_t fid_;
    ::int32_t thread_type_;
    ::int32_t is_deleted_;
    ::int64_t pid_;
    ::int32_t reply_num_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ThreadInfo_2eproto;
};// -------------------------------------------------------------------

class ThreadInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ThreadInfo) */ {
 public:
  inline ThreadInfo() : ThreadInfo(nullptr) {}
  ~ThreadInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ThreadInfo(::google::protobuf::internal::ConstantInitialized);

  ThreadInfo(const ThreadInfo& from);
  ThreadInfo(ThreadInfo&& from) noexcept
    : ThreadInfo() {
    *this = ::std::move(from);
  }

  inline ThreadInfo& operator=(const ThreadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadInfo& operator=(ThreadInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadInfo* internal_default_instance() {
    return reinterpret_cast<const ThreadInfo*>(
               &_ThreadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThreadInfo& a, ThreadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ThreadInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ThreadInfo& from) {
    ThreadInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ThreadInfo";
  }
  protected:
  explicit ThreadInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ThreadInfo_OriginThreadInfo OriginThreadInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kFirstPostContentFieldNumber = 142,
    kTitleFieldNumber = 3,
    kLastTimeFieldNumber = 6,
    kPidsFieldNumber = 61,
    kAuthorFieldNumber = 18,
    kPollInfoFieldNumber = 74,
    kAgreeFieldNumber = 126,
    kOriginThreadInfoFieldNumber = 141,
    kIdFieldNumber = 1,
    kTidFieldNumber = 2,
    kReplyNumFieldNumber = 4,
    kViewNumFieldNumber = 5,
    kLastTimeIntFieldNumber = 7,
    kThreadTypesFieldNumber = 8,
    kIsTopFieldNumber = 9,
    kIsGoodFieldNumber = 10,
    kIsVoteFieldNumber = 11,
    kIsGlobalTopFieldNumber = 42,
    kFidFieldNumber = 27,
    kFirstPostIdFieldNumber = 40,
    kCreateTimeFieldNumber = 45,
    kTimeFieldNumber = 53,
    kPostIdFieldNumber = 52,
    kAuthorIdFieldNumber = 56,
    kIsAdFieldNumber = 59,
    kIsGodthreadRecommendFieldNumber = 85,
    kIsGodFieldNumber = 131,
    kIsShareThreadFieldNumber = 143,
    kTabIdFieldNumber = 175,
    kIsDeletedFieldNumber = 181,
    kIsFrsMaskFieldNumber = 198,
  };
  // repeated .PbContent first_post_content = 142;
  int first_post_content_size() const;
  private:
  int _internal_first_post_content_size() const;

  public:
  void clear_first_post_content() ;
  ::PbContent* mutable_first_post_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_first_post_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PbContent>& _internal_first_post_content() const;
  ::google::protobuf::RepeatedPtrField<::PbContent>* _internal_mutable_first_post_content();
  public:
  const ::PbContent& first_post_content(int index) const;
  ::PbContent* add_first_post_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      first_post_content() const;
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string last_time = 6;
  void clear_last_time() ;
  const std::string& last_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_time(Arg_&& arg, Args_... args);
  std::string* mutable_last_time();
  PROTOBUF_NODISCARD std::string* release_last_time();
  void set_allocated_last_time(std::string* ptr);

  private:
  const std::string& _internal_last_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_time(
      const std::string& value);
  std::string* _internal_mutable_last_time();

  public:
  // string pids = 61;
  void clear_pids() ;
  const std::string& pids() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pids(Arg_&& arg, Args_... args);
  std::string* mutable_pids();
  PROTOBUF_NODISCARD std::string* release_pids();
  void set_allocated_pids(std::string* ptr);

  private:
  const std::string& _internal_pids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pids(
      const std::string& value);
  std::string* _internal_mutable_pids();

  public:
  // .User author = 18;
  bool has_author() const;
  void clear_author() ;
  const ::User& author() const;
  PROTOBUF_NODISCARD ::User* release_author();
  ::User* mutable_author();
  void set_allocated_author(::User* value);
  void unsafe_arena_set_allocated_author(::User* value);
  ::User* unsafe_arena_release_author();

  private:
  const ::User& _internal_author() const;
  ::User* _internal_mutable_author();

  public:
  // .PollInfo poll_info = 74;
  bool has_poll_info() const;
  void clear_poll_info() ;
  const ::PollInfo& poll_info() const;
  PROTOBUF_NODISCARD ::PollInfo* release_poll_info();
  ::PollInfo* mutable_poll_info();
  void set_allocated_poll_info(::PollInfo* value);
  void unsafe_arena_set_allocated_poll_info(::PollInfo* value);
  ::PollInfo* unsafe_arena_release_poll_info();

  private:
  const ::PollInfo& _internal_poll_info() const;
  ::PollInfo* _internal_mutable_poll_info();

  public:
  // .Agree agree = 126;
  bool has_agree() const;
  void clear_agree() ;
  const ::Agree& agree() const;
  PROTOBUF_NODISCARD ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* value);
  void unsafe_arena_set_allocated_agree(::Agree* value);
  ::Agree* unsafe_arena_release_agree();

  private:
  const ::Agree& _internal_agree() const;
  ::Agree* _internal_mutable_agree();

  public:
  // .ThreadInfo.OriginThreadInfo origin_thread_info = 141;
  bool has_origin_thread_info() const;
  void clear_origin_thread_info() ;
  const ::ThreadInfo_OriginThreadInfo& origin_thread_info() const;
  PROTOBUF_NODISCARD ::ThreadInfo_OriginThreadInfo* release_origin_thread_info();
  ::ThreadInfo_OriginThreadInfo* mutable_origin_thread_info();
  void set_allocated_origin_thread_info(::ThreadInfo_OriginThreadInfo* value);
  void unsafe_arena_set_allocated_origin_thread_info(::ThreadInfo_OriginThreadInfo* value);
  ::ThreadInfo_OriginThreadInfo* unsafe_arena_release_origin_thread_info();

  private:
  const ::ThreadInfo_OriginThreadInfo& _internal_origin_thread_info() const;
  ::ThreadInfo_OriginThreadInfo* _internal_mutable_origin_thread_info();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 tid = 2;
  void clear_tid() ;
  ::int64_t tid() const;
  void set_tid(::int64_t value);

  private:
  ::int64_t _internal_tid() const;
  void _internal_set_tid(::int64_t value);

  public:
  // int32 reply_num = 4;
  void clear_reply_num() ;
  ::int32_t reply_num() const;
  void set_reply_num(::int32_t value);

  private:
  ::int32_t _internal_reply_num() const;
  void _internal_set_reply_num(::int32_t value);

  public:
  // int32 view_num = 5;
  void clear_view_num() ;
  ::int32_t view_num() const;
  void set_view_num(::int32_t value);

  private:
  ::int32_t _internal_view_num() const;
  void _internal_set_view_num(::int32_t value);

  public:
  // int32 last_time_int = 7;
  void clear_last_time_int() ;
  ::int32_t last_time_int() const;
  void set_last_time_int(::int32_t value);

  private:
  ::int32_t _internal_last_time_int() const;
  void _internal_set_last_time_int(::int32_t value);

  public:
  // int32 thread_types = 8;
  void clear_thread_types() ;
  ::int32_t thread_types() const;
  void set_thread_types(::int32_t value);

  private:
  ::int32_t _internal_thread_types() const;
  void _internal_set_thread_types(::int32_t value);

  public:
  // int32 is_top = 9;
  void clear_is_top() ;
  ::int32_t is_top() const;
  void set_is_top(::int32_t value);

  private:
  ::int32_t _internal_is_top() const;
  void _internal_set_is_top(::int32_t value);

  public:
  // int32 is_good = 10;
  void clear_is_good() ;
  ::int32_t is_good() const;
  void set_is_good(::int32_t value);

  private:
  ::int32_t _internal_is_good() const;
  void _internal_set_is_good(::int32_t value);

  public:
  // int32 is_vote = 11;
  void clear_is_vote() ;
  ::int32_t is_vote() const;
  void set_is_vote(::int32_t value);

  private:
  ::int32_t _internal_is_vote() const;
  void _internal_set_is_vote(::int32_t value);

  public:
  // int32 is_global_top = 42;
  void clear_is_global_top() ;
  ::int32_t is_global_top() const;
  void set_is_global_top(::int32_t value);

  private:
  ::int32_t _internal_is_global_top() const;
  void _internal_set_is_global_top(::int32_t value);

  public:
  // int64 fid = 27;
  void clear_fid() ;
  ::int64_t fid() const;
  void set_fid(::int64_t value);

  private:
  ::int64_t _internal_fid() const;
  void _internal_set_fid(::int64_t value);

  public:
  // int64 first_post_id = 40;
  void clear_first_post_id() ;
  ::int64_t first_post_id() const;
  void set_first_post_id(::int64_t value);

  private:
  ::int64_t _internal_first_post_id() const;
  void _internal_set_first_post_id(::int64_t value);

  public:
  // int32 create_time = 45;
  void clear_create_time() ;
  ::int32_t create_time() const;
  void set_create_time(::int32_t value);

  private:
  ::int32_t _internal_create_time() const;
  void _internal_set_create_time(::int32_t value);

  public:
  // int32 time = 53;
  void clear_time() ;
  ::int32_t time() const;
  void set_time(::int32_t value);

  private:
  ::int32_t _internal_time() const;
  void _internal_set_time(::int32_t value);

  public:
  // int64 post_id = 52;
  void clear_post_id() ;
  ::int64_t post_id() const;
  void set_post_id(::int64_t value);

  private:
  ::int64_t _internal_post_id() const;
  void _internal_set_post_id(::int64_t value);

  public:
  // int64 author_id = 56;
  void clear_author_id() ;
  ::int64_t author_id() const;
  void set_author_id(::int64_t value);

  private:
  ::int64_t _internal_author_id() const;
  void _internal_set_author_id(::int64_t value);

  public:
  // uint32 is_ad = 59;
  void clear_is_ad() ;
  ::uint32_t is_ad() const;
  void set_is_ad(::uint32_t value);

  private:
  ::uint32_t _internal_is_ad() const;
  void _internal_set_is_ad(::uint32_t value);

  public:
  // int32 is_godthread_recommend = 85;
  void clear_is_godthread_recommend() ;
  ::int32_t is_godthread_recommend() const;
  void set_is_godthread_recommend(::int32_t value);

  private:
  ::int32_t _internal_is_godthread_recommend() const;
  void _internal_set_is_godthread_recommend(::int32_t value);

  public:
  // int32 is_god = 131;
  void clear_is_god() ;
  ::int32_t is_god() const;
  void set_is_god(::int32_t value);

  private:
  ::int32_t _internal_is_god() const;
  void _internal_set_is_god(::int32_t value);

  public:
  // int32 is_share_thread = 143;
  void clear_is_share_thread() ;
  ::int32_t is_share_thread() const;
  void set_is_share_thread(::int32_t value);

  private:
  ::int32_t _internal_is_share_thread() const;
  void _internal_set_is_share_thread(::int32_t value);

  public:
  // int32 tab_id = 175;
  void clear_tab_id() ;
  ::int32_t tab_id() const;
  void set_tab_id(::int32_t value);

  private:
  ::int32_t _internal_tab_id() const;
  void _internal_set_tab_id(::int32_t value);

  public:
  // int32 is_deleted = 181;
  void clear_is_deleted() ;
  ::int32_t is_deleted() const;
  void set_is_deleted(::int32_t value);

  private:
  ::int32_t _internal_is_deleted() const;
  void _internal_set_is_deleted(::int32_t value);

  public:
  // int32 is_frs_mask = 198;
  void clear_is_frs_mask() ;
  ::int32_t is_frs_mask() const;
  void set_is_frs_mask(::int32_t value);

  private:
  ::int32_t _internal_is_frs_mask() const;
  void _internal_set_is_frs_mask(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ThreadInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 31, 5, 61, 25> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::PbContent > first_post_content_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr last_time_;
    ::google::protobuf::internal::ArenaStringPtr pids_;
    ::User* author_;
    ::PollInfo* poll_info_;
    ::Agree* agree_;
    ::ThreadInfo_OriginThreadInfo* origin_thread_info_;
    ::int64_t id_;
    ::int64_t tid_;
    ::int32_t reply_num_;
    ::int32_t view_num_;
    ::int32_t last_time_int_;
    ::int32_t thread_types_;
    ::int32_t is_top_;
    ::int32_t is_good_;
    ::int32_t is_vote_;
    ::int32_t is_global_top_;
    ::int64_t fid_;
    ::int64_t first_post_id_;
    ::int32_t create_time_;
    ::int32_t time_;
    ::int64_t post_id_;
    ::int64_t author_id_;
    ::uint32_t is_ad_;
    ::int32_t is_godthread_recommend_;
    ::int32_t is_god_;
    ::int32_t is_share_thread_;
    ::int32_t tab_id_;
    ::int32_t is_deleted_;
    ::int32_t is_frs_mask_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ThreadInfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ThreadInfo_OriginThreadInfo

// string title = 1;
inline void ThreadInfo_OriginThreadInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ThreadInfo_OriginThreadInfo::title() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadInfo_OriginThreadInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.title)
}
inline std::string* ThreadInfo_OriginThreadInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.OriginThreadInfo.title)
  return _s;
}
inline const std::string& ThreadInfo_OriginThreadInfo::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadInfo_OriginThreadInfo::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadInfo_OriginThreadInfo::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.OriginThreadInfo.title)
  return _impl_.title_.Release();
}
inline void ThreadInfo_OriginThreadInfo::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.OriginThreadInfo.title)
}

// string fname = 4;
inline void ThreadInfo_OriginThreadInfo::clear_fname() {
  _impl_.fname_.ClearToEmpty();
}
inline const std::string& ThreadInfo_OriginThreadInfo::fname() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.fname)
  return _internal_fname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadInfo_OriginThreadInfo::set_fname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.fname)
}
inline std::string* ThreadInfo_OriginThreadInfo::mutable_fname() {
  std::string* _s = _internal_mutable_fname();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.OriginThreadInfo.fname)
  return _s;
}
inline const std::string& ThreadInfo_OriginThreadInfo::_internal_fname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fname_.Get();
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_fname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fname_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadInfo_OriginThreadInfo::_internal_mutable_fname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.fname_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadInfo_OriginThreadInfo::release_fname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.OriginThreadInfo.fname)
  return _impl_.fname_.Release();
}
inline void ThreadInfo_OriginThreadInfo::set_allocated_fname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fname_.IsDefault()) {
          _impl_.fname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.OriginThreadInfo.fname)
}

// string tid = 5;
inline void ThreadInfo_OriginThreadInfo::clear_tid() {
  _impl_.tid_.ClearToEmpty();
}
inline const std::string& ThreadInfo_OriginThreadInfo::tid() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.tid)
  return _internal_tid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadInfo_OriginThreadInfo::set_tid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.tid)
}
inline std::string* ThreadInfo_OriginThreadInfo::mutable_tid() {
  std::string* _s = _internal_mutable_tid();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.OriginThreadInfo.tid)
  return _s;
}
inline const std::string& ThreadInfo_OriginThreadInfo::_internal_tid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tid_.Get();
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_tid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tid_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadInfo_OriginThreadInfo::_internal_mutable_tid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tid_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadInfo_OriginThreadInfo::release_tid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.OriginThreadInfo.tid)
  return _impl_.tid_.Release();
}
inline void ThreadInfo_OriginThreadInfo::set_allocated_tid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tid_.IsDefault()) {
          _impl_.tid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.OriginThreadInfo.tid)
}

// int64 fid = 7;
inline void ThreadInfo_OriginThreadInfo::clear_fid() {
  _impl_.fid_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo_OriginThreadInfo::fid() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.fid)
  return _internal_fid();
}
inline void ThreadInfo_OriginThreadInfo::set_fid(::int64_t value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.fid)
}
inline ::int64_t ThreadInfo_OriginThreadInfo::_internal_fid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fid_;
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_fid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fid_ = value;
}

// int32 thread_type = 8;
inline void ThreadInfo_OriginThreadInfo::clear_thread_type() {
  _impl_.thread_type_ = 0;
}
inline ::int32_t ThreadInfo_OriginThreadInfo::thread_type() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.thread_type)
  return _internal_thread_type();
}
inline void ThreadInfo_OriginThreadInfo::set_thread_type(::int32_t value) {
  _internal_set_thread_type(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.thread_type)
}
inline ::int32_t ThreadInfo_OriginThreadInfo::_internal_thread_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thread_type_;
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_thread_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.thread_type_ = value;
}

// int32 is_deleted = 9;
inline void ThreadInfo_OriginThreadInfo::clear_is_deleted() {
  _impl_.is_deleted_ = 0;
}
inline ::int32_t ThreadInfo_OriginThreadInfo::is_deleted() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.is_deleted)
  return _internal_is_deleted();
}
inline void ThreadInfo_OriginThreadInfo::set_is_deleted(::int32_t value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.is_deleted)
}
inline ::int32_t ThreadInfo_OriginThreadInfo::_internal_is_deleted() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_deleted_;
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_is_deleted(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_deleted_ = value;
}

// repeated .PbContent content = 14;
inline int ThreadInfo_OriginThreadInfo::_internal_content_size() const {
  return _internal_content().size();
}
inline int ThreadInfo_OriginThreadInfo::content_size() const {
  return _internal_content_size();
}
inline ::PbContent* ThreadInfo_OriginThreadInfo::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:ThreadInfo.OriginThreadInfo.content)
  return _internal_mutable_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
ThreadInfo_OriginThreadInfo::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:ThreadInfo.OriginThreadInfo.content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_content();
}
inline const ::PbContent& ThreadInfo_OriginThreadInfo::content(int index) const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.content)
    return _internal_content().Get(index);
}
inline ::PbContent* ThreadInfo_OriginThreadInfo::add_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PbContent* _add = _internal_mutable_content()->Add();
  // @@protoc_insertion_point(field_add:ThreadInfo.OriginThreadInfo.content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
ThreadInfo_OriginThreadInfo::content() const {
  // @@protoc_insertion_point(field_list:ThreadInfo.OriginThreadInfo.content)
  return _internal_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PbContent>&
ThreadInfo_OriginThreadInfo::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_;
}
inline ::google::protobuf::RepeatedPtrField<::PbContent>*
ThreadInfo_OriginThreadInfo::_internal_mutable_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.content_;
}

// int32 reply_num = 16;
inline void ThreadInfo_OriginThreadInfo::clear_reply_num() {
  _impl_.reply_num_ = 0;
}
inline ::int32_t ThreadInfo_OriginThreadInfo::reply_num() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.reply_num)
  return _internal_reply_num();
}
inline void ThreadInfo_OriginThreadInfo::set_reply_num(::int32_t value) {
  _internal_set_reply_num(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.reply_num)
}
inline ::int32_t ThreadInfo_OriginThreadInfo::_internal_reply_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reply_num_;
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_reply_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reply_num_ = value;
}

// .Agree agree = 19;
inline bool ThreadInfo_OriginThreadInfo::has_agree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.agree_ != nullptr);
  return value;
}
inline const ::Agree& ThreadInfo_OriginThreadInfo::_internal_agree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Agree* p = _impl_.agree_;
  return p != nullptr ? *p : reinterpret_cast<const ::Agree&>(::_Agree_default_instance_);
}
inline const ::Agree& ThreadInfo_OriginThreadInfo::agree() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.agree)
  return _internal_agree();
}
inline void ThreadInfo_OriginThreadInfo::unsafe_arena_set_allocated_agree(::Agree* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }
  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThreadInfo.OriginThreadInfo.agree)
}
inline ::Agree* ThreadInfo_OriginThreadInfo::release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Agree* released = _impl_.agree_;
  _impl_.agree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Agree* ThreadInfo_OriginThreadInfo::unsafe_arena_release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.OriginThreadInfo.agree)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Agree* temp = _impl_.agree_;
  _impl_.agree_ = nullptr;
  return temp;
}
inline ::Agree* ThreadInfo_OriginThreadInfo::_internal_mutable_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.agree_ == nullptr) {
    auto* p = CreateMaybeMessage<::Agree>(GetArenaForAllocation());
    _impl_.agree_ = reinterpret_cast<::Agree*>(p);
  }
  return _impl_.agree_;
}
inline ::Agree* ThreadInfo_OriginThreadInfo::mutable_agree() {
  ::Agree* _msg = _internal_mutable_agree();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.OriginThreadInfo.agree)
  return _msg;
}
inline void ThreadInfo_OriginThreadInfo::set_allocated_agree(::Agree* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.OriginThreadInfo.agree)
}

// .PollInfo poll_info = 21;
inline bool ThreadInfo_OriginThreadInfo::has_poll_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_info_ != nullptr);
  return value;
}
inline const ::PollInfo& ThreadInfo_OriginThreadInfo::_internal_poll_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PollInfo* p = _impl_.poll_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PollInfo&>(::_PollInfo_default_instance_);
}
inline const ::PollInfo& ThreadInfo_OriginThreadInfo::poll_info() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.poll_info)
  return _internal_poll_info();
}
inline void ThreadInfo_OriginThreadInfo::unsafe_arena_set_allocated_poll_info(::PollInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_info_);
  }
  _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThreadInfo.OriginThreadInfo.poll_info)
}
inline ::PollInfo* ThreadInfo_OriginThreadInfo::release_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PollInfo* released = _impl_.poll_info_;
  _impl_.poll_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PollInfo* ThreadInfo_OriginThreadInfo::unsafe_arena_release_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.OriginThreadInfo.poll_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PollInfo* temp = _impl_.poll_info_;
  _impl_.poll_info_ = nullptr;
  return temp;
}
inline ::PollInfo* ThreadInfo_OriginThreadInfo::_internal_mutable_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.poll_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PollInfo>(GetArenaForAllocation());
    _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(p);
  }
  return _impl_.poll_info_;
}
inline ::PollInfo* ThreadInfo_OriginThreadInfo::mutable_poll_info() {
  ::PollInfo* _msg = _internal_mutable_poll_info();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.OriginThreadInfo.poll_info)
  return _msg;
}
inline void ThreadInfo_OriginThreadInfo::set_allocated_poll_info(::PollInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.OriginThreadInfo.poll_info)
}

// int64 pid = 25;
inline void ThreadInfo_OriginThreadInfo::clear_pid() {
  _impl_.pid_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo_OriginThreadInfo::pid() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.OriginThreadInfo.pid)
  return _internal_pid();
}
inline void ThreadInfo_OriginThreadInfo::set_pid(::int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.OriginThreadInfo.pid)
}
inline ::int64_t ThreadInfo_OriginThreadInfo::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void ThreadInfo_OriginThreadInfo::_internal_set_pid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// ThreadInfo

// int64 id = 1;
inline void ThreadInfo::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo::id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.id)
  return _internal_id();
}
inline void ThreadInfo::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.id)
}
inline ::int64_t ThreadInfo::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ThreadInfo::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int64 tid = 2;
inline void ThreadInfo::clear_tid() {
  _impl_.tid_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo::tid() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.tid)
  return _internal_tid();
}
inline void ThreadInfo::set_tid(::int64_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.tid)
}
inline ::int64_t ThreadInfo::_internal_tid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tid_;
}
inline void ThreadInfo::_internal_set_tid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tid_ = value;
}

// string title = 3;
inline void ThreadInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ThreadInfo::title() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ThreadInfo.title)
}
inline std::string* ThreadInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.title)
  return _s;
}
inline const std::string& ThreadInfo::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void ThreadInfo::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadInfo::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadInfo::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.title)
  return _impl_.title_.Release();
}
inline void ThreadInfo::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.title)
}

// int32 reply_num = 4;
inline void ThreadInfo::clear_reply_num() {
  _impl_.reply_num_ = 0;
}
inline ::int32_t ThreadInfo::reply_num() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.reply_num)
  return _internal_reply_num();
}
inline void ThreadInfo::set_reply_num(::int32_t value) {
  _internal_set_reply_num(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.reply_num)
}
inline ::int32_t ThreadInfo::_internal_reply_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reply_num_;
}
inline void ThreadInfo::_internal_set_reply_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reply_num_ = value;
}

// int32 view_num = 5;
inline void ThreadInfo::clear_view_num() {
  _impl_.view_num_ = 0;
}
inline ::int32_t ThreadInfo::view_num() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.view_num)
  return _internal_view_num();
}
inline void ThreadInfo::set_view_num(::int32_t value) {
  _internal_set_view_num(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.view_num)
}
inline ::int32_t ThreadInfo::_internal_view_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.view_num_;
}
inline void ThreadInfo::_internal_set_view_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_num_ = value;
}

// string last_time = 6;
inline void ThreadInfo::clear_last_time() {
  _impl_.last_time_.ClearToEmpty();
}
inline const std::string& ThreadInfo::last_time() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.last_time)
  return _internal_last_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadInfo::set_last_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_time_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ThreadInfo.last_time)
}
inline std::string* ThreadInfo::mutable_last_time() {
  std::string* _s = _internal_mutable_last_time();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.last_time)
  return _s;
}
inline const std::string& ThreadInfo::_internal_last_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_time_.Get();
}
inline void ThreadInfo::_internal_set_last_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadInfo::_internal_mutable_last_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_time_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadInfo::release_last_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.last_time)
  return _impl_.last_time_.Release();
}
inline void ThreadInfo::set_allocated_last_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_time_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_time_.IsDefault()) {
          _impl_.last_time_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.last_time)
}

// int32 last_time_int = 7;
inline void ThreadInfo::clear_last_time_int() {
  _impl_.last_time_int_ = 0;
}
inline ::int32_t ThreadInfo::last_time_int() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.last_time_int)
  return _internal_last_time_int();
}
inline void ThreadInfo::set_last_time_int(::int32_t value) {
  _internal_set_last_time_int(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.last_time_int)
}
inline ::int32_t ThreadInfo::_internal_last_time_int() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_time_int_;
}
inline void ThreadInfo::_internal_set_last_time_int(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_time_int_ = value;
}

// int32 thread_types = 8;
inline void ThreadInfo::clear_thread_types() {
  _impl_.thread_types_ = 0;
}
inline ::int32_t ThreadInfo::thread_types() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.thread_types)
  return _internal_thread_types();
}
inline void ThreadInfo::set_thread_types(::int32_t value) {
  _internal_set_thread_types(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.thread_types)
}
inline ::int32_t ThreadInfo::_internal_thread_types() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thread_types_;
}
inline void ThreadInfo::_internal_set_thread_types(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.thread_types_ = value;
}

// int32 is_top = 9;
inline void ThreadInfo::clear_is_top() {
  _impl_.is_top_ = 0;
}
inline ::int32_t ThreadInfo::is_top() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_top)
  return _internal_is_top();
}
inline void ThreadInfo::set_is_top(::int32_t value) {
  _internal_set_is_top(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_top)
}
inline ::int32_t ThreadInfo::_internal_is_top() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_top_;
}
inline void ThreadInfo::_internal_set_is_top(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_top_ = value;
}

// int32 is_good = 10;
inline void ThreadInfo::clear_is_good() {
  _impl_.is_good_ = 0;
}
inline ::int32_t ThreadInfo::is_good() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_good)
  return _internal_is_good();
}
inline void ThreadInfo::set_is_good(::int32_t value) {
  _internal_set_is_good(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_good)
}
inline ::int32_t ThreadInfo::_internal_is_good() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_good_;
}
inline void ThreadInfo::_internal_set_is_good(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_good_ = value;
}

// int32 is_vote = 11;
inline void ThreadInfo::clear_is_vote() {
  _impl_.is_vote_ = 0;
}
inline ::int32_t ThreadInfo::is_vote() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_vote)
  return _internal_is_vote();
}
inline void ThreadInfo::set_is_vote(::int32_t value) {
  _internal_set_is_vote(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_vote)
}
inline ::int32_t ThreadInfo::_internal_is_vote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_vote_;
}
inline void ThreadInfo::_internal_set_is_vote(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_vote_ = value;
}

// .User author = 18;
inline bool ThreadInfo::has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.author_ != nullptr);
  return value;
}
inline const ::User& ThreadInfo::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::User&>(::_User_default_instance_);
}
inline const ::User& ThreadInfo::author() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.author)
  return _internal_author();
}
inline void ThreadInfo::unsafe_arena_set_allocated_author(::User* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = reinterpret_cast<::User*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThreadInfo.author)
}
inline ::User* ThreadInfo::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User* released = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User* ThreadInfo::unsafe_arena_release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.author)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::User* ThreadInfo::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::User>(GetArenaForAllocation());
    _impl_.author_ = reinterpret_cast<::User*>(p);
  }
  return _impl_.author_;
}
inline ::User* ThreadInfo::mutable_author() {
  ::User* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.author)
  return _msg;
}
inline void ThreadInfo::set_allocated_author(::User* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.author_ = reinterpret_cast<::User*>(value);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.author)
}

// int64 fid = 27;
inline void ThreadInfo::clear_fid() {
  _impl_.fid_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo::fid() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.fid)
  return _internal_fid();
}
inline void ThreadInfo::set_fid(::int64_t value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.fid)
}
inline ::int64_t ThreadInfo::_internal_fid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fid_;
}
inline void ThreadInfo::_internal_set_fid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fid_ = value;
}

// int64 first_post_id = 40;
inline void ThreadInfo::clear_first_post_id() {
  _impl_.first_post_id_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo::first_post_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.first_post_id)
  return _internal_first_post_id();
}
inline void ThreadInfo::set_first_post_id(::int64_t value) {
  _internal_set_first_post_id(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.first_post_id)
}
inline ::int64_t ThreadInfo::_internal_first_post_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.first_post_id_;
}
inline void ThreadInfo::_internal_set_first_post_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.first_post_id_ = value;
}

// int32 is_global_top = 42;
inline void ThreadInfo::clear_is_global_top() {
  _impl_.is_global_top_ = 0;
}
inline ::int32_t ThreadInfo::is_global_top() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_global_top)
  return _internal_is_global_top();
}
inline void ThreadInfo::set_is_global_top(::int32_t value) {
  _internal_set_is_global_top(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_global_top)
}
inline ::int32_t ThreadInfo::_internal_is_global_top() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_global_top_;
}
inline void ThreadInfo::_internal_set_is_global_top(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_global_top_ = value;
}

// int32 create_time = 45;
inline void ThreadInfo::clear_create_time() {
  _impl_.create_time_ = 0;
}
inline ::int32_t ThreadInfo::create_time() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.create_time)
  return _internal_create_time();
}
inline void ThreadInfo::set_create_time(::int32_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.create_time)
}
inline ::int32_t ThreadInfo::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.create_time_;
}
inline void ThreadInfo::_internal_set_create_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.create_time_ = value;
}

// int64 post_id = 52;
inline void ThreadInfo::clear_post_id() {
  _impl_.post_id_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo::post_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.post_id)
  return _internal_post_id();
}
inline void ThreadInfo::set_post_id(::int64_t value) {
  _internal_set_post_id(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.post_id)
}
inline ::int64_t ThreadInfo::_internal_post_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_id_;
}
inline void ThreadInfo::_internal_set_post_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_id_ = value;
}

// int32 time = 53;
inline void ThreadInfo::clear_time() {
  _impl_.time_ = 0;
}
inline ::int32_t ThreadInfo::time() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.time)
  return _internal_time();
}
inline void ThreadInfo::set_time(::int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.time)
}
inline ::int32_t ThreadInfo::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void ThreadInfo::_internal_set_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// int64 author_id = 56;
inline void ThreadInfo::clear_author_id() {
  _impl_.author_id_ = ::int64_t{0};
}
inline ::int64_t ThreadInfo::author_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.author_id)
  return _internal_author_id();
}
inline void ThreadInfo::set_author_id(::int64_t value) {
  _internal_set_author_id(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.author_id)
}
inline ::int64_t ThreadInfo::_internal_author_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_id_;
}
inline void ThreadInfo::_internal_set_author_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_id_ = value;
}

// uint32 is_ad = 59;
inline void ThreadInfo::clear_is_ad() {
  _impl_.is_ad_ = 0u;
}
inline ::uint32_t ThreadInfo::is_ad() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_ad)
  return _internal_is_ad();
}
inline void ThreadInfo::set_is_ad(::uint32_t value) {
  _internal_set_is_ad(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_ad)
}
inline ::uint32_t ThreadInfo::_internal_is_ad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_ad_;
}
inline void ThreadInfo::_internal_set_is_ad(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_ad_ = value;
}

// string pids = 61;
inline void ThreadInfo::clear_pids() {
  _impl_.pids_.ClearToEmpty();
}
inline const std::string& ThreadInfo::pids() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.pids)
  return _internal_pids();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadInfo::set_pids(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pids_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ThreadInfo.pids)
}
inline std::string* ThreadInfo::mutable_pids() {
  std::string* _s = _internal_mutable_pids();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.pids)
  return _s;
}
inline const std::string& ThreadInfo::_internal_pids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pids_.Get();
}
inline void ThreadInfo::_internal_set_pids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pids_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadInfo::_internal_mutable_pids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pids_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadInfo::release_pids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.pids)
  return _impl_.pids_.Release();
}
inline void ThreadInfo::set_allocated_pids(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pids_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pids_.IsDefault()) {
          _impl_.pids_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.pids)
}

// .PollInfo poll_info = 74;
inline bool ThreadInfo::has_poll_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_info_ != nullptr);
  return value;
}
inline const ::PollInfo& ThreadInfo::_internal_poll_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PollInfo* p = _impl_.poll_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PollInfo&>(::_PollInfo_default_instance_);
}
inline const ::PollInfo& ThreadInfo::poll_info() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.poll_info)
  return _internal_poll_info();
}
inline void ThreadInfo::unsafe_arena_set_allocated_poll_info(::PollInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_info_);
  }
  _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThreadInfo.poll_info)
}
inline ::PollInfo* ThreadInfo::release_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PollInfo* released = _impl_.poll_info_;
  _impl_.poll_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PollInfo* ThreadInfo::unsafe_arena_release_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.poll_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PollInfo* temp = _impl_.poll_info_;
  _impl_.poll_info_ = nullptr;
  return temp;
}
inline ::PollInfo* ThreadInfo::_internal_mutable_poll_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.poll_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PollInfo>(GetArenaForAllocation());
    _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(p);
  }
  return _impl_.poll_info_;
}
inline ::PollInfo* ThreadInfo::mutable_poll_info() {
  ::PollInfo* _msg = _internal_mutable_poll_info();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.poll_info)
  return _msg;
}
inline void ThreadInfo::set_allocated_poll_info(::PollInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.poll_info_ = reinterpret_cast<::PollInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.poll_info)
}

// int32 is_godthread_recommend = 85;
inline void ThreadInfo::clear_is_godthread_recommend() {
  _impl_.is_godthread_recommend_ = 0;
}
inline ::int32_t ThreadInfo::is_godthread_recommend() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_godthread_recommend)
  return _internal_is_godthread_recommend();
}
inline void ThreadInfo::set_is_godthread_recommend(::int32_t value) {
  _internal_set_is_godthread_recommend(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_godthread_recommend)
}
inline ::int32_t ThreadInfo::_internal_is_godthread_recommend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_godthread_recommend_;
}
inline void ThreadInfo::_internal_set_is_godthread_recommend(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_godthread_recommend_ = value;
}

// .Agree agree = 126;
inline bool ThreadInfo::has_agree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.agree_ != nullptr);
  return value;
}
inline const ::Agree& ThreadInfo::_internal_agree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Agree* p = _impl_.agree_;
  return p != nullptr ? *p : reinterpret_cast<const ::Agree&>(::_Agree_default_instance_);
}
inline const ::Agree& ThreadInfo::agree() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.agree)
  return _internal_agree();
}
inline void ThreadInfo::unsafe_arena_set_allocated_agree(::Agree* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }
  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThreadInfo.agree)
}
inline ::Agree* ThreadInfo::release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Agree* released = _impl_.agree_;
  _impl_.agree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Agree* ThreadInfo::unsafe_arena_release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.agree)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Agree* temp = _impl_.agree_;
  _impl_.agree_ = nullptr;
  return temp;
}
inline ::Agree* ThreadInfo::_internal_mutable_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.agree_ == nullptr) {
    auto* p = CreateMaybeMessage<::Agree>(GetArenaForAllocation());
    _impl_.agree_ = reinterpret_cast<::Agree*>(p);
  }
  return _impl_.agree_;
}
inline ::Agree* ThreadInfo::mutable_agree() {
  ::Agree* _msg = _internal_mutable_agree();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.agree)
  return _msg;
}
inline void ThreadInfo::set_allocated_agree(::Agree* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.agree)
}

// int32 is_god = 131;
inline void ThreadInfo::clear_is_god() {
  _impl_.is_god_ = 0;
}
inline ::int32_t ThreadInfo::is_god() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_god)
  return _internal_is_god();
}
inline void ThreadInfo::set_is_god(::int32_t value) {
  _internal_set_is_god(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_god)
}
inline ::int32_t ThreadInfo::_internal_is_god() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_god_;
}
inline void ThreadInfo::_internal_set_is_god(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_god_ = value;
}

// .ThreadInfo.OriginThreadInfo origin_thread_info = 141;
inline bool ThreadInfo::has_origin_thread_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_thread_info_ != nullptr);
  return value;
}
inline void ThreadInfo::clear_origin_thread_info() {
  if (_impl_.origin_thread_info_ != nullptr) _impl_.origin_thread_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::ThreadInfo_OriginThreadInfo& ThreadInfo::_internal_origin_thread_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ThreadInfo_OriginThreadInfo* p = _impl_.origin_thread_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ThreadInfo_OriginThreadInfo&>(::_ThreadInfo_OriginThreadInfo_default_instance_);
}
inline const ::ThreadInfo_OriginThreadInfo& ThreadInfo::origin_thread_info() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.origin_thread_info)
  return _internal_origin_thread_info();
}
inline void ThreadInfo::unsafe_arena_set_allocated_origin_thread_info(::ThreadInfo_OriginThreadInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.origin_thread_info_);
  }
  _impl_.origin_thread_info_ = reinterpret_cast<::ThreadInfo_OriginThreadInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ThreadInfo.origin_thread_info)
}
inline ::ThreadInfo_OriginThreadInfo* ThreadInfo::release_origin_thread_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ThreadInfo_OriginThreadInfo* released = _impl_.origin_thread_info_;
  _impl_.origin_thread_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ThreadInfo_OriginThreadInfo* ThreadInfo::unsafe_arena_release_origin_thread_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ThreadInfo.origin_thread_info)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ThreadInfo_OriginThreadInfo* temp = _impl_.origin_thread_info_;
  _impl_.origin_thread_info_ = nullptr;
  return temp;
}
inline ::ThreadInfo_OriginThreadInfo* ThreadInfo::_internal_mutable_origin_thread_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.origin_thread_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ThreadInfo_OriginThreadInfo>(GetArenaForAllocation());
    _impl_.origin_thread_info_ = reinterpret_cast<::ThreadInfo_OriginThreadInfo*>(p);
  }
  return _impl_.origin_thread_info_;
}
inline ::ThreadInfo_OriginThreadInfo* ThreadInfo::mutable_origin_thread_info() {
  ::ThreadInfo_OriginThreadInfo* _msg = _internal_mutable_origin_thread_info();
  // @@protoc_insertion_point(field_mutable:ThreadInfo.origin_thread_info)
  return _msg;
}
inline void ThreadInfo::set_allocated_origin_thread_info(::ThreadInfo_OriginThreadInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ThreadInfo_OriginThreadInfo*>(_impl_.origin_thread_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ThreadInfo_OriginThreadInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.origin_thread_info_ = reinterpret_cast<::ThreadInfo_OriginThreadInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.origin_thread_info)
}

// repeated .PbContent first_post_content = 142;
inline int ThreadInfo::_internal_first_post_content_size() const {
  return _internal_first_post_content().size();
}
inline int ThreadInfo::first_post_content_size() const {
  return _internal_first_post_content_size();
}
inline ::PbContent* ThreadInfo::mutable_first_post_content(int index) {
  // @@protoc_insertion_point(field_mutable:ThreadInfo.first_post_content)
  return _internal_mutable_first_post_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
ThreadInfo::mutable_first_post_content() {
  // @@protoc_insertion_point(field_mutable_list:ThreadInfo.first_post_content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_first_post_content();
}
inline const ::PbContent& ThreadInfo::first_post_content(int index) const {
  // @@protoc_insertion_point(field_get:ThreadInfo.first_post_content)
    return _internal_first_post_content().Get(index);
}
inline ::PbContent* ThreadInfo::add_first_post_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PbContent* _add = _internal_mutable_first_post_content()->Add();
  // @@protoc_insertion_point(field_add:ThreadInfo.first_post_content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
ThreadInfo::first_post_content() const {
  // @@protoc_insertion_point(field_list:ThreadInfo.first_post_content)
  return _internal_first_post_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PbContent>&
ThreadInfo::_internal_first_post_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.first_post_content_;
}
inline ::google::protobuf::RepeatedPtrField<::PbContent>*
ThreadInfo::_internal_mutable_first_post_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.first_post_content_;
}

// int32 is_share_thread = 143;
inline void ThreadInfo::clear_is_share_thread() {
  _impl_.is_share_thread_ = 0;
}
inline ::int32_t ThreadInfo::is_share_thread() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_share_thread)
  return _internal_is_share_thread();
}
inline void ThreadInfo::set_is_share_thread(::int32_t value) {
  _internal_set_is_share_thread(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_share_thread)
}
inline ::int32_t ThreadInfo::_internal_is_share_thread() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_share_thread_;
}
inline void ThreadInfo::_internal_set_is_share_thread(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_share_thread_ = value;
}

// int32 tab_id = 175;
inline void ThreadInfo::clear_tab_id() {
  _impl_.tab_id_ = 0;
}
inline ::int32_t ThreadInfo::tab_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.tab_id)
  return _internal_tab_id();
}
inline void ThreadInfo::set_tab_id(::int32_t value) {
  _internal_set_tab_id(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.tab_id)
}
inline ::int32_t ThreadInfo::_internal_tab_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tab_id_;
}
inline void ThreadInfo::_internal_set_tab_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tab_id_ = value;
}

// int32 is_deleted = 181;
inline void ThreadInfo::clear_is_deleted() {
  _impl_.is_deleted_ = 0;
}
inline ::int32_t ThreadInfo::is_deleted() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_deleted)
  return _internal_is_deleted();
}
inline void ThreadInfo::set_is_deleted(::int32_t value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_deleted)
}
inline ::int32_t ThreadInfo::_internal_is_deleted() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_deleted_;
}
inline void ThreadInfo::_internal_set_is_deleted(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_deleted_ = value;
}

// int32 is_frs_mask = 198;
inline void ThreadInfo::clear_is_frs_mask() {
  _impl_.is_frs_mask_ = 0;
}
inline ::int32_t ThreadInfo::is_frs_mask() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_frs_mask)
  return _internal_is_frs_mask();
}
inline void ThreadInfo::set_is_frs_mask(::int32_t value) {
  _internal_set_is_frs_mask(value);
  // @@protoc_insertion_point(field_set:ThreadInfo.is_frs_mask)
}
inline ::int32_t ThreadInfo::_internal_is_frs_mask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_frs_mask_;
}
inline void ThreadInfo::_internal_set_is_frs_mask(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_frs_mask_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ThreadInfo_2eproto_2epb_2eh
