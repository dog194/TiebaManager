// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ThreadInfo.proto
#define PROTOBUF_USE_DLLS
#ifndef PROTOBUF_ThreadInfo_2eproto__INCLUDED
#define PROTOBUF_ThreadInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PbContent.pb.h"
#include "Agree.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ThreadInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsThreadInfoImpl();
void InitDefaultsThreadInfo();
inline void InitDefaults() {
  InitDefaultsThreadInfo();
}
}  // namespace protobuf_ThreadInfo_2eproto
class ThreadInfo;
class ThreadInfoDefaultTypeInternal;
extern ThreadInfoDefaultTypeInternal _ThreadInfo_default_instance_;

// ===================================================================

class ThreadInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ThreadInfo) */ {
 public:
  ThreadInfo();
  virtual ~ThreadInfo();

  ThreadInfo(const ThreadInfo& from);

  inline ThreadInfo& operator=(const ThreadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreadInfo(ThreadInfo&& from) noexcept
    : ThreadInfo() {
    *this = ::std::move(from);
  }

  inline ThreadInfo& operator=(ThreadInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadInfo* internal_default_instance() {
    return reinterpret_cast<const ThreadInfo*>(
               &_ThreadInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ThreadInfo* other);
  friend void swap(ThreadInfo& a, ThreadInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreadInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ThreadInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ThreadInfo& from);
  void MergeFrom(const ThreadInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ThreadInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbContent first_post_content = 142;
  int first_post_content_size() const;
  void clear_first_post_content();
  static const int kFirstPostContentFieldNumber = 142;
  const ::PbContent& first_post_content(int index) const;
  ::PbContent* mutable_first_post_content(int index);
  ::PbContent* add_first_post_content();
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_first_post_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      first_post_content() const;

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .Agree agree = 126;
  bool has_agree() const;
  void clear_agree();
  static const int kAgreeFieldNumber = 126;
  const ::Agree& agree() const;
  ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* agree);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 reply_num = 4;
  void clear_reply_num();
  static const int kReplyNumFieldNumber = 4;
  ::google::protobuf::int32 reply_num() const;
  void set_reply_num(::google::protobuf::int32 value);

  // int32 view_num = 5;
  void clear_view_num();
  static const int kViewNumFieldNumber = 5;
  ::google::protobuf::int32 view_num() const;
  void set_view_num(::google::protobuf::int32 value);

  // int32 last_time_int = 7;
  void clear_last_time_int();
  static const int kLastTimeIntFieldNumber = 7;
  ::google::protobuf::int32 last_time_int() const;
  void set_last_time_int(::google::protobuf::int32 value);

  // int32 is_top = 9;
  void clear_is_top();
  static const int kIsTopFieldNumber = 9;
  ::google::protobuf::int32 is_top() const;
  void set_is_top(::google::protobuf::int32 value);

  // int32 is_good = 10;
  void clear_is_good();
  static const int kIsGoodFieldNumber = 10;
  ::google::protobuf::int32 is_good() const;
  void set_is_good(::google::protobuf::int32 value);

  // int32 is_vote = 11;
  void clear_is_vote();
  static const int kIsVoteFieldNumber = 11;
  ::google::protobuf::int32 is_vote() const;
  void set_is_vote(::google::protobuf::int32 value);

  // int64 fid = 27;
  void clear_fid();
  static const int kFidFieldNumber = 27;
  ::google::protobuf::int64 fid() const;
  void set_fid(::google::protobuf::int64 value);

  // int64 first_post_id = 40;
  void clear_first_post_id();
  static const int kFirstPostIdFieldNumber = 40;
  ::google::protobuf::int64 first_post_id() const;
  void set_first_post_id(::google::protobuf::int64 value);

  // int32 is_global_top = 42;
  void clear_is_global_top();
  static const int kIsGlobalTopFieldNumber = 42;
  ::google::protobuf::int32 is_global_top() const;
  void set_is_global_top(::google::protobuf::int32 value);

  // int32 create_time = 45;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 45;
  ::google::protobuf::int32 create_time() const;
  void set_create_time(::google::protobuf::int32 value);

  // int64 author_id = 56;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 56;
  ::google::protobuf::int64 author_id() const;
  void set_author_id(::google::protobuf::int64 value);

  // uint32 is_ad = 59;
  void clear_is_ad();
  static const int kIsAdFieldNumber = 59;
  ::google::protobuf::uint32 is_ad() const;
  void set_is_ad(::google::protobuf::uint32 value);

  // int32 is_godthread_recommend = 85;
  void clear_is_godthread_recommend();
  static const int kIsGodthreadRecommendFieldNumber = 85;
  ::google::protobuf::int32 is_godthread_recommend() const;
  void set_is_godthread_recommend(::google::protobuf::int32 value);

  // int32 is_god = 131;
  void clear_is_god();
  static const int kIsGodFieldNumber = 131;
  ::google::protobuf::int32 is_god() const;
  void set_is_god(::google::protobuf::int32 value);

  // int32 tab_id = 175;
  void clear_tab_id();
  static const int kTabIdFieldNumber = 175;
  ::google::protobuf::int32 tab_id() const;
  void set_tab_id(::google::protobuf::int32 value);

  // int32 is_deleted = 181;
  void clear_is_deleted();
  static const int kIsDeletedFieldNumber = 181;
  ::google::protobuf::int32 is_deleted() const;
  void set_is_deleted(::google::protobuf::int32 value);

  // int32 is_frs_mask = 198;
  void clear_is_frs_mask();
  static const int kIsFrsMaskFieldNumber = 198;
  ::google::protobuf::int32 is_frs_mask() const;
  void set_is_frs_mask(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ThreadInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PbContent > first_post_content_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::Agree* agree_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 reply_num_;
  ::google::protobuf::int32 view_num_;
  ::google::protobuf::int32 last_time_int_;
  ::google::protobuf::int32 is_top_;
  ::google::protobuf::int32 is_good_;
  ::google::protobuf::int32 is_vote_;
  ::google::protobuf::int64 fid_;
  ::google::protobuf::int64 first_post_id_;
  ::google::protobuf::int32 is_global_top_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int64 author_id_;
  ::google::protobuf::uint32 is_ad_;
  ::google::protobuf::int32 is_godthread_recommend_;
  ::google::protobuf::int32 is_god_;
  ::google::protobuf::int32 tab_id_;
  ::google::protobuf::int32 is_deleted_;
  ::google::protobuf::int32 is_frs_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_ThreadInfo_2eproto::TableStruct;
  friend void ::protobuf_ThreadInfo_2eproto::InitDefaultsThreadInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThreadInfo

// int64 id = 1;
inline void ThreadInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ThreadInfo::id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.id)
  return id_;
}
inline void ThreadInfo::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.id)
}

// string title = 3;
inline void ThreadInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThreadInfo::title() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.title)
  return title_.GetNoArena();
}
inline void ThreadInfo::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ThreadInfo.title)
}
#if LANG_CXX11
inline void ThreadInfo::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ThreadInfo.title)
}
#endif
inline void ThreadInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ThreadInfo.title)
}
inline void ThreadInfo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ThreadInfo.title)
}
inline ::std::string* ThreadInfo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ThreadInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThreadInfo::release_title() {
  // @@protoc_insertion_point(field_release:ThreadInfo.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThreadInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.title)
}

// int32 reply_num = 4;
inline void ThreadInfo::clear_reply_num() {
  reply_num_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::reply_num() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.reply_num)
  return reply_num_;
}
inline void ThreadInfo::set_reply_num(::google::protobuf::int32 value) {
  
  reply_num_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.reply_num)
}

// int32 view_num = 5;
inline void ThreadInfo::clear_view_num() {
  view_num_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::view_num() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.view_num)
  return view_num_;
}
inline void ThreadInfo::set_view_num(::google::protobuf::int32 value) {
  
  view_num_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.view_num)
}

// int32 last_time_int = 7;
inline void ThreadInfo::clear_last_time_int() {
  last_time_int_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::last_time_int() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.last_time_int)
  return last_time_int_;
}
inline void ThreadInfo::set_last_time_int(::google::protobuf::int32 value) {
  
  last_time_int_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.last_time_int)
}

// int32 is_top = 9;
inline void ThreadInfo::clear_is_top() {
  is_top_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_top() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_top)
  return is_top_;
}
inline void ThreadInfo::set_is_top(::google::protobuf::int32 value) {
  
  is_top_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_top)
}

// int32 is_good = 10;
inline void ThreadInfo::clear_is_good() {
  is_good_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_good() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_good)
  return is_good_;
}
inline void ThreadInfo::set_is_good(::google::protobuf::int32 value) {
  
  is_good_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_good)
}

// int32 is_vote = 11;
inline void ThreadInfo::clear_is_vote() {
  is_vote_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_vote() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_vote)
  return is_vote_;
}
inline void ThreadInfo::set_is_vote(::google::protobuf::int32 value) {
  
  is_vote_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_vote)
}

// int64 fid = 27;
inline void ThreadInfo::clear_fid() {
  fid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ThreadInfo::fid() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.fid)
  return fid_;
}
inline void ThreadInfo::set_fid(::google::protobuf::int64 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.fid)
}

// int64 first_post_id = 40;
inline void ThreadInfo::clear_first_post_id() {
  first_post_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ThreadInfo::first_post_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.first_post_id)
  return first_post_id_;
}
inline void ThreadInfo::set_first_post_id(::google::protobuf::int64 value) {
  
  first_post_id_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.first_post_id)
}

// int32 is_global_top = 42;
inline void ThreadInfo::clear_is_global_top() {
  is_global_top_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_global_top() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_global_top)
  return is_global_top_;
}
inline void ThreadInfo::set_is_global_top(::google::protobuf::int32 value) {
  
  is_global_top_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_global_top)
}

// int32 create_time = 45;
inline void ThreadInfo::clear_create_time() {
  create_time_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::create_time() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.create_time)
  return create_time_;
}
inline void ThreadInfo::set_create_time(::google::protobuf::int32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.create_time)
}

// int64 author_id = 56;
inline void ThreadInfo::clear_author_id() {
  author_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ThreadInfo::author_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.author_id)
  return author_id_;
}
inline void ThreadInfo::set_author_id(::google::protobuf::int64 value) {
  
  author_id_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.author_id)
}

// uint32 is_ad = 59;
inline void ThreadInfo::clear_is_ad() {
  is_ad_ = 0u;
}
inline ::google::protobuf::uint32 ThreadInfo::is_ad() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_ad)
  return is_ad_;
}
inline void ThreadInfo::set_is_ad(::google::protobuf::uint32 value) {
  
  is_ad_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_ad)
}

// int32 is_godthread_recommend = 85;
inline void ThreadInfo::clear_is_godthread_recommend() {
  is_godthread_recommend_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_godthread_recommend() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_godthread_recommend)
  return is_godthread_recommend_;
}
inline void ThreadInfo::set_is_godthread_recommend(::google::protobuf::int32 value) {
  
  is_godthread_recommend_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_godthread_recommend)
}

// .Agree agree = 126;
inline bool ThreadInfo::has_agree() const {
  return this != internal_default_instance() && agree_ != NULL;
}
inline const ::Agree& ThreadInfo::agree() const {
  const ::Agree* p = agree_;
  // @@protoc_insertion_point(field_get:ThreadInfo.agree)
  return p != NULL ? *p : *reinterpret_cast<const ::Agree*>(
      &::_Agree_default_instance_);
}
inline ::Agree* ThreadInfo::release_agree() {
  // @@protoc_insertion_point(field_release:ThreadInfo.agree)
  
  ::Agree* temp = agree_;
  agree_ = NULL;
  return temp;
}
inline ::Agree* ThreadInfo::mutable_agree() {
  
  if (agree_ == NULL) {
    agree_ = new ::Agree;
  }
  // @@protoc_insertion_point(field_mutable:ThreadInfo.agree)
  return agree_;
}
inline void ThreadInfo::set_allocated_agree(::Agree* agree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(agree_);
  }
  if (agree) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      agree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, agree, submessage_arena);
    }
    
  } else {
    
  }
  agree_ = agree;
  // @@protoc_insertion_point(field_set_allocated:ThreadInfo.agree)
}

// int32 is_god = 131;
inline void ThreadInfo::clear_is_god() {
  is_god_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_god() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_god)
  return is_god_;
}
inline void ThreadInfo::set_is_god(::google::protobuf::int32 value) {
  
  is_god_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_god)
}

// repeated .PbContent first_post_content = 142;
inline int ThreadInfo::first_post_content_size() const {
  return first_post_content_.size();
}
inline const ::PbContent& ThreadInfo::first_post_content(int index) const {
  // @@protoc_insertion_point(field_get:ThreadInfo.first_post_content)
  return first_post_content_.Get(index);
}
inline ::PbContent* ThreadInfo::mutable_first_post_content(int index) {
  // @@protoc_insertion_point(field_mutable:ThreadInfo.first_post_content)
  return first_post_content_.Mutable(index);
}
inline ::PbContent* ThreadInfo::add_first_post_content() {
  // @@protoc_insertion_point(field_add:ThreadInfo.first_post_content)
  return first_post_content_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
ThreadInfo::mutable_first_post_content() {
  // @@protoc_insertion_point(field_mutable_list:ThreadInfo.first_post_content)
  return &first_post_content_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
ThreadInfo::first_post_content() const {
  // @@protoc_insertion_point(field_list:ThreadInfo.first_post_content)
  return first_post_content_;
}

// int32 tab_id = 175;
inline void ThreadInfo::clear_tab_id() {
  tab_id_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::tab_id() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.tab_id)
  return tab_id_;
}
inline void ThreadInfo::set_tab_id(::google::protobuf::int32 value) {
  
  tab_id_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.tab_id)
}

// int32 is_deleted = 181;
inline void ThreadInfo::clear_is_deleted() {
  is_deleted_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_deleted() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_deleted)
  return is_deleted_;
}
inline void ThreadInfo::set_is_deleted(::google::protobuf::int32 value) {
  
  is_deleted_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_deleted)
}

// int32 is_frs_mask = 198;
inline void ThreadInfo::clear_is_frs_mask() {
  is_frs_mask_ = 0;
}
inline ::google::protobuf::int32 ThreadInfo::is_frs_mask() const {
  // @@protoc_insertion_point(field_get:ThreadInfo.is_frs_mask)
  return is_frs_mask_;
}
inline void ThreadInfo::set_is_frs_mask(::google::protobuf::int32 value) {
  
  is_frs_mask_ = value;
  // @@protoc_insertion_point(field_set:ThreadInfo.is_frs_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ThreadInfo_2eproto__INCLUDED
