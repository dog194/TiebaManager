// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubPostList.proto

#include "SubPostList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class SubPostListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubPostList>
      _instance;
} _SubPostList_default_instance_;
namespace protobuf_SubPostList_2eproto {
void InitDefaultsSubPostListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_PbContent_2eproto::InitDefaultsPbContent();
  protobuf_User_2eproto::InitDefaultsUser();
  protobuf_Agree_2eproto::InitDefaultsAgree();
  {
    void* ptr = &::_SubPostList_default_instance_;
    new (ptr) ::SubPostList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubPostList::InitAsDefaultInstance();
}

void InitDefaultsSubPostList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubPostListImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubPostList, agree_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SubPostList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SubPostList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SubPostList.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021SubPostList.proto\032\017PbContent.proto\032\nUs"
      "er.proto\032\013Agree.proto\"\220\001\n\013SubPostList\022\n\n"
      "\002id\030\001 \001(\003\022\033\n\007content\030\002 \003(\0132\n.PbContent\022\014"
      "\n\004time\030\003 \001(\r\022\r\n\005title\030\005 \001(\t\022\r\n\005floor\030\006 \001"
      "(\r\022\025\n\006author\030\007 \001(\0132\005.User\022\025\n\005agree\030\t \001(\013"
      "2\006.Agreeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SubPostList.proto", &protobuf_RegisterTypes);
  ::protobuf_PbContent_2eproto::AddDescriptors();
  ::protobuf_User_2eproto::AddDescriptors();
  ::protobuf_Agree_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SubPostList_2eproto

// ===================================================================

void SubPostList::InitAsDefaultInstance() {
  ::_SubPostList_default_instance_._instance.get_mutable()->author_ = const_cast< ::User*>(
      ::User::internal_default_instance());
  ::_SubPostList_default_instance_._instance.get_mutable()->agree_ = const_cast< ::Agree*>(
      ::Agree::internal_default_instance());
}
void SubPostList::clear_content() {
  content_.Clear();
}
void SubPostList::clear_author() {
  if (GetArenaNoVirtual() == NULL && author_ != NULL) {
    delete author_;
  }
  author_ = NULL;
}
void SubPostList::clear_agree() {
  if (GetArenaNoVirtual() == NULL && agree_ != NULL) {
    delete agree_;
  }
  agree_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubPostList::kIdFieldNumber;
const int SubPostList::kContentFieldNumber;
const int SubPostList::kTimeFieldNumber;
const int SubPostList::kTitleFieldNumber;
const int SubPostList::kFloorFieldNumber;
const int SubPostList::kAuthorFieldNumber;
const int SubPostList::kAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubPostList::SubPostList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SubPostList_2eproto::InitDefaultsSubPostList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubPostList)
}
SubPostList::SubPostList(const SubPostList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      content_(from.content_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_author()) {
    author_ = new ::User(*from.author_);
  } else {
    author_ = NULL;
  }
  if (from.has_agree()) {
    agree_ = new ::Agree(*from.agree_);
  } else {
    agree_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&floor_) -
    reinterpret_cast<char*>(&id_)) + sizeof(floor_));
  // @@protoc_insertion_point(copy_constructor:SubPostList)
}

void SubPostList::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&author_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&author_)) + sizeof(floor_));
  _cached_size_ = 0;
}

SubPostList::~SubPostList() {
  // @@protoc_insertion_point(destructor:SubPostList)
  SharedDtor();
}

void SubPostList::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete agree_;
}

void SubPostList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubPostList::descriptor() {
  ::protobuf_SubPostList_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SubPostList_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubPostList& SubPostList::default_instance() {
  ::protobuf_SubPostList_2eproto::InitDefaultsSubPostList();
  return *internal_default_instance();
}

SubPostList* SubPostList::New(::google::protobuf::Arena* arena) const {
  SubPostList* n = new SubPostList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubPostList::Clear() {
// @@protoc_insertion_point(message_clear_start:SubPostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && author_ != NULL) {
    delete author_;
  }
  author_ = NULL;
  if (GetArenaNoVirtual() == NULL && agree_ != NULL) {
    delete agree_;
  }
  agree_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&id_)) + sizeof(floor_));
  _internal_metadata_.Clear();
}

bool SubPostList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubPostList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PbContent content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SubPostList.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 floor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .User author = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_author()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Agree agree = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_agree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubPostList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubPostList)
  return false;
#undef DO_
}

void SubPostList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubPostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .PbContent content = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(static_cast<int>(i)), output);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // string title = 5;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubPostList.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // uint32 floor = 6;
  if (this->floor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->floor(), output);
  }

  // .User author = 7;
  if (this->has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->author_, output);
  }

  // .Agree agree = 9;
  if (this->has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->agree_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SubPostList)
}

::google::protobuf::uint8* SubPostList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubPostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .PbContent content = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->content(static_cast<int>(i)), deterministic, target);
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // string title = 5;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubPostList.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // uint32 floor = 6;
  if (this->floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->floor(), target);
  }

  // .User author = 7;
  if (this->has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->author_, deterministic, target);
  }

  // .Agree agree = 9;
  if (this->has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->agree_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubPostList)
  return target;
}

size_t SubPostList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubPostList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PbContent content = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->content_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content(static_cast<int>(i)));
    }
  }

  // string title = 5;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // .User author = 7;
  if (this->has_author()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->author_);
  }

  // .Agree agree = 9;
  if (this->has_agree()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->agree_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // uint32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  // uint32 floor = 6;
  if (this->floor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubPostList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubPostList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubPostList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubPostList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubPostList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubPostList)
    MergeFrom(*source);
  }
}

void SubPostList::MergeFrom(const SubPostList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubPostList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_author()) {
    mutable_author()->::User::MergeFrom(from.author());
  }
  if (from.has_agree()) {
    mutable_agree()->::Agree::MergeFrom(from.agree());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.floor() != 0) {
    set_floor(from.floor());
  }
}

void SubPostList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubPostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubPostList::CopyFrom(const SubPostList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubPostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubPostList::IsInitialized() const {
  return true;
}

void SubPostList::Swap(SubPostList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubPostList::InternalSwap(SubPostList* other) {
  using std::swap;
  content_.InternalSwap(&other->content_);
  title_.Swap(&other->title_);
  swap(author_, other->author_);
  swap(agree_, other->agree_);
  swap(id_, other->id_);
  swap(time_, other->time_);
  swap(floor_, other->floor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubPostList::GetMetadata() const {
  protobuf_SubPostList_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SubPostList_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
