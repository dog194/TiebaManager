// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubPostList.proto

#include "SubPostList.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR SubPostList::SubPostList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.content_)*/ {},
      /*decltype(_impl_.title_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.author_)*/ nullptr,
      /*decltype(_impl_.agree_)*/ nullptr,
      /*decltype(_impl_.id_)*/ ::int64_t{0},
      /*decltype(_impl_.author_id_)*/ ::int64_t{0},
      /*decltype(_impl_.time_)*/ 0u,
      /*decltype(_impl_.floor_)*/ 0u,
      /*decltype(_impl_.is_giftpost_)*/ 0,
    } {}
struct SubPostListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubPostListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubPostListDefaultTypeInternal() {}
  union {
    SubPostList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubPostListDefaultTypeInternal _SubPostList_default_instance_;
static ::_pb::Metadata file_level_metadata_SubPostList_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_SubPostList_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_SubPostList_2eproto = nullptr;
const ::uint32_t TableStruct_SubPostList_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.author_id_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.floor_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.author_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.is_giftpost_),
    PROTOBUF_FIELD_OFFSET(::SubPostList, _impl_.agree_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 17, -1, sizeof(::SubPostList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_SubPostList_default_instance_._instance,
};
const char descriptor_table_protodef_SubPostList_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021SubPostList.proto\032\017PbContent.proto\032\nUs"
    "er.proto\032\013Agree.proto\"\270\001\n\013SubPostList\022\n\n"
    "\002id\030\001 \001(\003\022\033\n\007content\030\002 \003(\0132\n.PbContent\022\014"
    "\n\004time\030\003 \001(\r\022\021\n\tauthor_id\030\004 \001(\003\022\r\n\005title"
    "\030\005 \001(\t\022\r\n\005floor\030\006 \001(\r\022\025\n\006author\030\007 \001(\0132\005."
    "User\022\023\n\013is_giftpost\030\010 \001(\005\022\025\n\005agree\030\t \001(\013"
    "2\006.Agreeb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_SubPostList_2eproto_deps[3] =
    {
        &::descriptor_table_Agree_2eproto,
        &::descriptor_table_PbContent_2eproto,
        &::descriptor_table_User_2eproto,
};
static ::absl::once_flag descriptor_table_SubPostList_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SubPostList_2eproto = {
    false,
    false,
    256,
    descriptor_table_protodef_SubPostList_2eproto,
    "SubPostList.proto",
    &descriptor_table_SubPostList_2eproto_once,
    descriptor_table_SubPostList_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_SubPostList_2eproto::offsets,
    file_level_metadata_SubPostList_2eproto,
    file_level_enum_descriptors_SubPostList_2eproto,
    file_level_service_descriptors_SubPostList_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SubPostList_2eproto_getter() {
  return &descriptor_table_SubPostList_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SubPostList_2eproto(&descriptor_table_SubPostList_2eproto);
// ===================================================================

class SubPostList::_Internal {
 public:
  using HasBits = decltype(std::declval<SubPostList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubPostList, _impl_._has_bits_);
  static const ::User& author(const SubPostList* msg);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Agree& agree(const SubPostList* msg);
  static void set_has_agree(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::User& SubPostList::_Internal::author(const SubPostList* msg) {
  return *msg->_impl_.author_;
}
const ::Agree& SubPostList::_Internal::agree(const SubPostList* msg) {
  return *msg->_impl_.agree_;
}
void SubPostList::clear_content() {
  _internal_mutable_content()->Clear();
}
void SubPostList::clear_author() {
  if (_impl_.author_ != nullptr) _impl_.author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SubPostList::clear_agree() {
  if (_impl_.agree_ != nullptr) _impl_.agree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SubPostList::SubPostList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SubPostList)
}
SubPostList::SubPostList(const SubPostList& from) : ::google::protobuf::Message() {
  SubPostList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){from._impl_.content_},
      decltype(_impl_.title_){},
      decltype(_impl_.author_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.author_id_){},
      decltype(_impl_.time_){},
      decltype(_impl_.floor_){},
      decltype(_impl_.is_giftpost_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.author_ = new ::User(*from._impl_.author_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.agree_ = new ::Agree(*from._impl_.agree_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_giftpost_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_giftpost_));

  // @@protoc_insertion_point(copy_constructor:SubPostList)
}
inline void SubPostList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){arena},
      decltype(_impl_.title_){},
      decltype(_impl_.author_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.id_){::int64_t{0}},
      decltype(_impl_.author_id_){::int64_t{0}},
      decltype(_impl_.time_){0u},
      decltype(_impl_.floor_){0u},
      decltype(_impl_.is_giftpost_){0},
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SubPostList::~SubPostList() {
  // @@protoc_insertion_point(destructor:SubPostList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SubPostList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
  if (this != internal_default_instance()) delete _impl_.agree_;
}
void SubPostList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SubPostList::Clear() {
// @@protoc_insertion_point(message_clear_start:SubPostList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_content()->Clear();
  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.author_ != nullptr);
      _impl_.author_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.agree_ != nullptr);
      _impl_.agree_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_giftpost_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_giftpost_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SubPostList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 3, 33, 2> SubPostList::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubPostList, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SubPostList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SubPostList, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.id_)}},
    // repeated .PbContent content = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.content_)}},
    // uint32 time = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubPostList, _impl_.time_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.time_)}},
    // int64 author_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SubPostList, _impl_.author_id_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.author_id_)}},
    // string title = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.title_)}},
    // uint32 floor = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubPostList, _impl_.floor_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.floor_)}},
    // .User author = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 1, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.author_)}},
    // int32 is_giftpost = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubPostList, _impl_.is_giftpost_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.is_giftpost_)}},
    // .Agree agree = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 2, PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.agree_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .PbContent content = 2;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 time = 3;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int64 author_id = 4;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.author_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string title = 5;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 floor = 6;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.floor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .User author = 7;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.author_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 is_giftpost = 8;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.is_giftpost_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Agree agree = 9;
    {PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.agree_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PbContent>()},
    {::_pbi::TcParser::GetTable<::User>()},
    {::_pbi::TcParser::GetTable<::Agree>()},
  }}, {{
    "\13\0\0\0\0\5\0\0\0\0\0\0\0\0\0\0"
    "SubPostList"
    "title"
  }},
};

::uint8_t* SubPostList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubPostList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // repeated .PbContent content = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_time(), target);
  }

  // int64 author_id = 4;
  if (this->_internal_author_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_author_id(), target);
  }

  // string title = 5;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SubPostList.title");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // uint32 floor = 6;
  if (this->_internal_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_floor(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .User author = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  // int32 is_giftpost = 8;
  if (this->_internal_is_giftpost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_is_giftpost(), target);
  }

  // .Agree agree = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::agree(this),
        _Internal::agree(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubPostList)
  return target;
}

::size_t SubPostList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubPostList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PbContent content = 2;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->_internal_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string title = 5;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .User author = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.author_);
    }

    // .Agree agree = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.agree_);
    }

  }
  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 author_id = 4;
  if (this->_internal_author_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_author_id());
  }

  // uint32 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_time());
  }

  // uint32 floor = 6;
  if (this->_internal_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_floor());
  }

  // int32 is_giftpost = 8;
  if (this->_internal_is_giftpost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_is_giftpost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SubPostList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SubPostList::MergeImpl
};
const ::google::protobuf::Message::ClassData*SubPostList::GetClassData() const { return &_class_data_; }


void SubPostList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SubPostList*>(&to_msg);
  auto& from = static_cast<const SubPostList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SubPostList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content()->MergeFrom(from._internal_content());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_author()->::User::MergeFrom(
          from._internal_author());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_agree()->::Agree::MergeFrom(
          from._internal_agree());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_author_id() != 0) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_floor() != 0) {
    _this->_internal_set_floor(from._internal_floor());
  }
  if (from._internal_is_giftpost() != 0) {
    _this->_internal_set_is_giftpost(from._internal_is_giftpost());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubPostList::CopyFrom(const SubPostList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubPostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SubPostList::IsInitialized() const {
  return true;
}

void SubPostList::InternalSwap(SubPostList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.is_giftpost_)
      + sizeof(SubPostList::_impl_.is_giftpost_)
      - PROTOBUF_FIELD_OFFSET(SubPostList, _impl_.author_)>(
          reinterpret_cast<char*>(&_impl_.author_),
          reinterpret_cast<char*>(&other->_impl_.author_));
}

::google::protobuf::Metadata SubPostList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SubPostList_2eproto_getter, &descriptor_table_SubPostList_2eproto_once,
      file_level_metadata_SubPostList_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
