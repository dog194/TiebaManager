// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonReq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonReq_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_CommonReq_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_CommonReq_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonReq_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_CommonReq_2eproto;
class CommonReq;
struct CommonReqDefaultTypeInternal;
extern CommonReqDefaultTypeInternal _CommonReq_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class CommonReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommonReq) */ {
 public:
  inline CommonReq() : CommonReq(nullptr) {}
  ~CommonReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommonReq(::google::protobuf::internal::ConstantInitialized);

  CommonReq(const CommonReq& from);
  CommonReq(CommonReq&& from) noexcept
    : CommonReq() {
    *this = ::std::move(from);
  }

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonReq& operator=(CommonReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonReq* internal_default_instance() {
    return reinterpret_cast<const CommonReq*>(
               &_CommonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonReq& a, CommonReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommonReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommonReq& from) {
    CommonReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CommonReq";
  }
  protected:
  explicit CommonReq(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientVersionFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kApidFieldNumber = 4,
    kPhoneImeiFieldNumber = 5,
    kFromFieldNumber = 6,
    kCuidFieldNumber = 7,
    kModelFieldNumber = 9,
    kBDUSSFieldNumber = 10,
    kTbsFieldNumber = 11,
    kSubappTypeFieldNumber = 13,
    kPhoneNewimeiFieldNumber = 14,
    kKaFieldNumber = 15,
    kMApiFieldNumber = 16,
    kMLogidFieldNumber = 17,
    kMCostFieldNumber = 18,
    kMResultFieldNumber = 19,
    kMSizeUFieldNumber = 20,
    kMSizeDFieldNumber = 21,
    kSmallflowFieldNumber = 22,
    kSignFieldNumber = 23,
    kPversionFieldNumber = 24,
    kBrandFieldNumber = 26,
    kBrandTypeFieldNumber = 27,
    kLegoLibVersionFieldNumber = 28,
    kApplistFieldNumber = 29,
    kStokenFieldNumber = 30,
    kZIdFieldNumber = 31,
    kCuidGalaxy2FieldNumber = 32,
    kCuidGidFieldNumber = 33,
    kClientTypeFieldNumber = 1,
    kNetTypeFieldNumber = 12,
    kTimestampFieldNumber = 8,
  };
  // string _client_version = 2;
  void clear__client_version() ;
  const std::string& _client_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set__client_version(Arg_&& arg, Args_... args);
  std::string* mutable__client_version();
  PROTOBUF_NODISCARD std::string* release__client_version();
  void set_allocated__client_version(std::string* ptr);

  private:
  const std::string& _internal__client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__client_version(
      const std::string& value);
  std::string* _internal_mutable__client_version();

  public:
  // string _client_id = 3;
  void clear__client_id() ;
  const std::string& _client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set__client_id(Arg_&& arg, Args_... args);
  std::string* mutable__client_id();
  PROTOBUF_NODISCARD std::string* release__client_id();
  void set_allocated__client_id(std::string* ptr);

  private:
  const std::string& _internal__client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__client_id(
      const std::string& value);
  std::string* _internal_mutable__client_id();

  public:
  // string apid = 4;
  void clear_apid() ;
  const std::string& apid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_apid(Arg_&& arg, Args_... args);
  std::string* mutable_apid();
  PROTOBUF_NODISCARD std::string* release_apid();
  void set_allocated_apid(std::string* ptr);

  private:
  const std::string& _internal_apid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apid(
      const std::string& value);
  std::string* _internal_mutable_apid();

  public:
  // string _phone_imei = 5;
  void clear__phone_imei() ;
  const std::string& _phone_imei() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set__phone_imei(Arg_&& arg, Args_... args);
  std::string* mutable__phone_imei();
  PROTOBUF_NODISCARD std::string* release__phone_imei();
  void set_allocated__phone_imei(std::string* ptr);

  private:
  const std::string& _internal__phone_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__phone_imei(
      const std::string& value);
  std::string* _internal_mutable__phone_imei();

  public:
  // string _from = 6;
  void clear__from() ;
  const std::string& _from() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set__from(Arg_&& arg, Args_... args);
  std::string* mutable__from();
  PROTOBUF_NODISCARD std::string* release__from();
  void set_allocated__from(std::string* ptr);

  private:
  const std::string& _internal__from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__from(
      const std::string& value);
  std::string* _internal_mutable__from();

  public:
  // string cuid = 7;
  void clear_cuid() ;
  const std::string& cuid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cuid(Arg_&& arg, Args_... args);
  std::string* mutable_cuid();
  PROTOBUF_NODISCARD std::string* release_cuid();
  void set_allocated_cuid(std::string* ptr);

  private:
  const std::string& _internal_cuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cuid(
      const std::string& value);
  std::string* _internal_mutable_cuid();

  public:
  // string model = 9;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // string BDUSS = 10;
  void clear_bduss() ;
  const std::string& bduss() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bduss(Arg_&& arg, Args_... args);
  std::string* mutable_bduss();
  PROTOBUF_NODISCARD std::string* release_bduss();
  void set_allocated_bduss(std::string* ptr);

  private:
  const std::string& _internal_bduss() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bduss(
      const std::string& value);
  std::string* _internal_mutable_bduss();

  public:
  // string tbs = 11;
  void clear_tbs() ;
  const std::string& tbs() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tbs(Arg_&& arg, Args_... args);
  std::string* mutable_tbs();
  PROTOBUF_NODISCARD std::string* release_tbs();
  void set_allocated_tbs(std::string* ptr);

  private:
  const std::string& _internal_tbs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tbs(
      const std::string& value);
  std::string* _internal_mutable_tbs();

  public:
  // string subapp_type = 13;
  void clear_subapp_type() ;
  const std::string& subapp_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subapp_type(Arg_&& arg, Args_... args);
  std::string* mutable_subapp_type();
  PROTOBUF_NODISCARD std::string* release_subapp_type();
  void set_allocated_subapp_type(std::string* ptr);

  private:
  const std::string& _internal_subapp_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subapp_type(
      const std::string& value);
  std::string* _internal_mutable_subapp_type();

  public:
  // string _phone_newimei = 14;
  void clear__phone_newimei() ;
  const std::string& _phone_newimei() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set__phone_newimei(Arg_&& arg, Args_... args);
  std::string* mutable__phone_newimei();
  PROTOBUF_NODISCARD std::string* release__phone_newimei();
  void set_allocated__phone_newimei(std::string* ptr);

  private:
  const std::string& _internal__phone_newimei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__phone_newimei(
      const std::string& value);
  std::string* _internal_mutable__phone_newimei();

  public:
  // string ka = 15;
  void clear_ka() ;
  const std::string& ka() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ka(Arg_&& arg, Args_... args);
  std::string* mutable_ka();
  PROTOBUF_NODISCARD std::string* release_ka();
  void set_allocated_ka(std::string* ptr);

  private:
  const std::string& _internal_ka() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ka(
      const std::string& value);
  std::string* _internal_mutable_ka();

  public:
  // string m_api = 16;
  void clear_m_api() ;
  const std::string& m_api() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_api(Arg_&& arg, Args_... args);
  std::string* mutable_m_api();
  PROTOBUF_NODISCARD std::string* release_m_api();
  void set_allocated_m_api(std::string* ptr);

  private:
  const std::string& _internal_m_api() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_api(
      const std::string& value);
  std::string* _internal_mutable_m_api();

  public:
  // string m_logid = 17;
  void clear_m_logid() ;
  const std::string& m_logid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_logid(Arg_&& arg, Args_... args);
  std::string* mutable_m_logid();
  PROTOBUF_NODISCARD std::string* release_m_logid();
  void set_allocated_m_logid(std::string* ptr);

  private:
  const std::string& _internal_m_logid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_logid(
      const std::string& value);
  std::string* _internal_mutable_m_logid();

  public:
  // string m_cost = 18;
  void clear_m_cost() ;
  const std::string& m_cost() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_cost(Arg_&& arg, Args_... args);
  std::string* mutable_m_cost();
  PROTOBUF_NODISCARD std::string* release_m_cost();
  void set_allocated_m_cost(std::string* ptr);

  private:
  const std::string& _internal_m_cost() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_cost(
      const std::string& value);
  std::string* _internal_mutable_m_cost();

  public:
  // string m_result = 19;
  void clear_m_result() ;
  const std::string& m_result() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_result(Arg_&& arg, Args_... args);
  std::string* mutable_m_result();
  PROTOBUF_NODISCARD std::string* release_m_result();
  void set_allocated_m_result(std::string* ptr);

  private:
  const std::string& _internal_m_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_result(
      const std::string& value);
  std::string* _internal_mutable_m_result();

  public:
  // string m_size_u = 20;
  void clear_m_size_u() ;
  const std::string& m_size_u() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_size_u(Arg_&& arg, Args_... args);
  std::string* mutable_m_size_u();
  PROTOBUF_NODISCARD std::string* release_m_size_u();
  void set_allocated_m_size_u(std::string* ptr);

  private:
  const std::string& _internal_m_size_u() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_size_u(
      const std::string& value);
  std::string* _internal_mutable_m_size_u();

  public:
  // string m_size_d = 21;
  void clear_m_size_d() ;
  const std::string& m_size_d() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_size_d(Arg_&& arg, Args_... args);
  std::string* mutable_m_size_d();
  PROTOBUF_NODISCARD std::string* release_m_size_d();
  void set_allocated_m_size_d(std::string* ptr);

  private:
  const std::string& _internal_m_size_d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_size_d(
      const std::string& value);
  std::string* _internal_mutable_m_size_d();

  public:
  // string smallflow = 22;
  void clear_smallflow() ;
  const std::string& smallflow() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_smallflow(Arg_&& arg, Args_... args);
  std::string* mutable_smallflow();
  PROTOBUF_NODISCARD std::string* release_smallflow();
  void set_allocated_smallflow(std::string* ptr);

  private:
  const std::string& _internal_smallflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smallflow(
      const std::string& value);
  std::string* _internal_mutable_smallflow();

  public:
  // string sign = 23;
  void clear_sign() ;
  const std::string& sign() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sign(Arg_&& arg, Args_... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* ptr);

  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(
      const std::string& value);
  std::string* _internal_mutable_sign();

  public:
  // string pversion = 24;
  void clear_pversion() ;
  const std::string& pversion() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pversion(Arg_&& arg, Args_... args);
  std::string* mutable_pversion();
  PROTOBUF_NODISCARD std::string* release_pversion();
  void set_allocated_pversion(std::string* ptr);

  private:
  const std::string& _internal_pversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pversion(
      const std::string& value);
  std::string* _internal_mutable_pversion();

  public:
  // string brand = 26;
  void clear_brand() ;
  const std::string& brand() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_brand(Arg_&& arg, Args_... args);
  std::string* mutable_brand();
  PROTOBUF_NODISCARD std::string* release_brand();
  void set_allocated_brand(std::string* ptr);

  private:
  const std::string& _internal_brand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brand(
      const std::string& value);
  std::string* _internal_mutable_brand();

  public:
  // string brand_type = 27;
  void clear_brand_type() ;
  const std::string& brand_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_brand_type(Arg_&& arg, Args_... args);
  std::string* mutable_brand_type();
  PROTOBUF_NODISCARD std::string* release_brand_type();
  void set_allocated_brand_type(std::string* ptr);

  private:
  const std::string& _internal_brand_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brand_type(
      const std::string& value);
  std::string* _internal_mutable_brand_type();

  public:
  // string lego_lib_version = 28;
  void clear_lego_lib_version() ;
  const std::string& lego_lib_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lego_lib_version(Arg_&& arg, Args_... args);
  std::string* mutable_lego_lib_version();
  PROTOBUF_NODISCARD std::string* release_lego_lib_version();
  void set_allocated_lego_lib_version(std::string* ptr);

  private:
  const std::string& _internal_lego_lib_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lego_lib_version(
      const std::string& value);
  std::string* _internal_mutable_lego_lib_version();

  public:
  // string applist = 29;
  void clear_applist() ;
  const std::string& applist() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_applist(Arg_&& arg, Args_... args);
  std::string* mutable_applist();
  PROTOBUF_NODISCARD std::string* release_applist();
  void set_allocated_applist(std::string* ptr);

  private:
  const std::string& _internal_applist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applist(
      const std::string& value);
  std::string* _internal_mutable_applist();

  public:
  // string stoken = 30;
  void clear_stoken() ;
  const std::string& stoken() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stoken(Arg_&& arg, Args_... args);
  std::string* mutable_stoken();
  PROTOBUF_NODISCARD std::string* release_stoken();
  void set_allocated_stoken(std::string* ptr);

  private:
  const std::string& _internal_stoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stoken(
      const std::string& value);
  std::string* _internal_mutable_stoken();

  public:
  // string z_id = 31;
  void clear_z_id() ;
  const std::string& z_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_z_id(Arg_&& arg, Args_... args);
  std::string* mutable_z_id();
  PROTOBUF_NODISCARD std::string* release_z_id();
  void set_allocated_z_id(std::string* ptr);

  private:
  const std::string& _internal_z_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_z_id(
      const std::string& value);
  std::string* _internal_mutable_z_id();

  public:
  // string cuid_galaxy2 = 32;
  void clear_cuid_galaxy2() ;
  const std::string& cuid_galaxy2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cuid_galaxy2(Arg_&& arg, Args_... args);
  std::string* mutable_cuid_galaxy2();
  PROTOBUF_NODISCARD std::string* release_cuid_galaxy2();
  void set_allocated_cuid_galaxy2(std::string* ptr);

  private:
  const std::string& _internal_cuid_galaxy2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cuid_galaxy2(
      const std::string& value);
  std::string* _internal_mutable_cuid_galaxy2();

  public:
  // string cuid_gid = 33;
  void clear_cuid_gid() ;
  const std::string& cuid_gid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cuid_gid(Arg_&& arg, Args_... args);
  std::string* mutable_cuid_gid();
  PROTOBUF_NODISCARD std::string* release_cuid_gid();
  void set_allocated_cuid_gid(std::string* ptr);

  private:
  const std::string& _internal_cuid_gid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cuid_gid(
      const std::string& value);
  std::string* _internal_mutable_cuid_gid();

  public:
  // int32 _client_type = 1;
  void clear__client_type() ;
  ::int32_t _client_type() const;
  void set__client_type(::int32_t value);

  private:
  ::int32_t _internal__client_type() const;
  void _internal_set__client_type(::int32_t value);

  public:
  // int32 net_type = 12;
  void clear_net_type() ;
  ::int32_t net_type() const;
  void set_net_type(::int32_t value);

  private:
  ::int32_t _internal_net_type() const;
  void _internal_set_net_type(::int32_t value);

  public:
  // int64 _timestamp = 8;
  void clear__timestamp() ;
  ::int64_t _timestamp() const;
  void set__timestamp(::int64_t value);

  private:
  ::int64_t _internal__timestamp() const;
  void _internal_set__timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CommonReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 32, 0, 270, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr _client_version_;
    ::google::protobuf::internal::ArenaStringPtr _client_id_;
    ::google::protobuf::internal::ArenaStringPtr apid_;
    ::google::protobuf::internal::ArenaStringPtr _phone_imei_;
    ::google::protobuf::internal::ArenaStringPtr _from_;
    ::google::protobuf::internal::ArenaStringPtr cuid_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    ::google::protobuf::internal::ArenaStringPtr bduss_;
    ::google::protobuf::internal::ArenaStringPtr tbs_;
    ::google::protobuf::internal::ArenaStringPtr subapp_type_;
    ::google::protobuf::internal::ArenaStringPtr _phone_newimei_;
    ::google::protobuf::internal::ArenaStringPtr ka_;
    ::google::protobuf::internal::ArenaStringPtr m_api_;
    ::google::protobuf::internal::ArenaStringPtr m_logid_;
    ::google::protobuf::internal::ArenaStringPtr m_cost_;
    ::google::protobuf::internal::ArenaStringPtr m_result_;
    ::google::protobuf::internal::ArenaStringPtr m_size_u_;
    ::google::protobuf::internal::ArenaStringPtr m_size_d_;
    ::google::protobuf::internal::ArenaStringPtr smallflow_;
    ::google::protobuf::internal::ArenaStringPtr sign_;
    ::google::protobuf::internal::ArenaStringPtr pversion_;
    ::google::protobuf::internal::ArenaStringPtr brand_;
    ::google::protobuf::internal::ArenaStringPtr brand_type_;
    ::google::protobuf::internal::ArenaStringPtr lego_lib_version_;
    ::google::protobuf::internal::ArenaStringPtr applist_;
    ::google::protobuf::internal::ArenaStringPtr stoken_;
    ::google::protobuf::internal::ArenaStringPtr z_id_;
    ::google::protobuf::internal::ArenaStringPtr cuid_galaxy2_;
    ::google::protobuf::internal::ArenaStringPtr cuid_gid_;
    ::int32_t _client_type_;
    ::int32_t net_type_;
    ::int64_t _timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonReq_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommonReq

// string BDUSS = 10;
inline void CommonReq::clear_bduss() {
  _impl_.bduss_.ClearToEmpty();
}
inline const std::string& CommonReq::bduss() const {
  // @@protoc_insertion_point(field_get:CommonReq.BDUSS)
  return _internal_bduss();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_bduss(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bduss_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.BDUSS)
}
inline std::string* CommonReq::mutable_bduss() {
  std::string* _s = _internal_mutable_bduss();
  // @@protoc_insertion_point(field_mutable:CommonReq.BDUSS)
  return _s;
}
inline const std::string& CommonReq::_internal_bduss() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bduss_.Get();
}
inline void CommonReq::_internal_set_bduss(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bduss_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_bduss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bduss_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_bduss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.BDUSS)
  return _impl_.bduss_.Release();
}
inline void CommonReq::set_allocated_bduss(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bduss_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bduss_.IsDefault()) {
          _impl_.bduss_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.BDUSS)
}

// int32 _client_type = 1;
inline void CommonReq::clear__client_type() {
  _impl_._client_type_ = 0;
}
inline ::int32_t CommonReq::_client_type() const {
  // @@protoc_insertion_point(field_get:CommonReq._client_type)
  return _internal__client_type();
}
inline void CommonReq::set__client_type(::int32_t value) {
  _internal_set__client_type(value);
  // @@protoc_insertion_point(field_set:CommonReq._client_type)
}
inline ::int32_t CommonReq::_internal__client_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._client_type_;
}
inline void CommonReq::_internal_set__client_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._client_type_ = value;
}

// string _client_version = 2;
inline void CommonReq::clear__client_version() {
  _impl_._client_version_.ClearToEmpty();
}
inline const std::string& CommonReq::_client_version() const {
  // @@protoc_insertion_point(field_get:CommonReq._client_version)
  return _internal__client_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set__client_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._client_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq._client_version)
}
inline std::string* CommonReq::mutable__client_version() {
  std::string* _s = _internal_mutable__client_version();
  // @@protoc_insertion_point(field_mutable:CommonReq._client_version)
  return _s;
}
inline const std::string& CommonReq::_internal__client_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._client_version_.Get();
}
inline void CommonReq::_internal_set__client_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._client_version_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable__client_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_._client_version_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release__client_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq._client_version)
  return _impl_._client_version_.Release();
}
inline void CommonReq::set_allocated__client_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._client_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_._client_version_.IsDefault()) {
          _impl_._client_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq._client_version)
}

// string _client_id = 3;
inline void CommonReq::clear__client_id() {
  _impl_._client_id_.ClearToEmpty();
}
inline const std::string& CommonReq::_client_id() const {
  // @@protoc_insertion_point(field_get:CommonReq._client_id)
  return _internal__client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set__client_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq._client_id)
}
inline std::string* CommonReq::mutable__client_id() {
  std::string* _s = _internal_mutable__client_id();
  // @@protoc_insertion_point(field_mutable:CommonReq._client_id)
  return _s;
}
inline const std::string& CommonReq::_internal__client_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._client_id_.Get();
}
inline void CommonReq::_internal_set__client_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable__client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_._client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release__client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq._client_id)
  return _impl_._client_id_.Release();
}
inline void CommonReq::set_allocated__client_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_._client_id_.IsDefault()) {
          _impl_._client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq._client_id)
}

// string apid = 4;
inline void CommonReq::clear_apid() {
  _impl_.apid_.ClearToEmpty();
}
inline const std::string& CommonReq::apid() const {
  // @@protoc_insertion_point(field_get:CommonReq.apid)
  return _internal_apid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_apid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.apid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.apid)
}
inline std::string* CommonReq::mutable_apid() {
  std::string* _s = _internal_mutable_apid();
  // @@protoc_insertion_point(field_mutable:CommonReq.apid)
  return _s;
}
inline const std::string& CommonReq::_internal_apid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.apid_.Get();
}
inline void CommonReq::_internal_set_apid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.apid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_apid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.apid_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_apid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.apid)
  return _impl_.apid_.Release();
}
inline void CommonReq::set_allocated_apid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.apid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.apid_.IsDefault()) {
          _impl_.apid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.apid)
}

// string _phone_imei = 5;
inline void CommonReq::clear__phone_imei() {
  _impl_._phone_imei_.ClearToEmpty();
}
inline const std::string& CommonReq::_phone_imei() const {
  // @@protoc_insertion_point(field_get:CommonReq._phone_imei)
  return _internal__phone_imei();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set__phone_imei(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._phone_imei_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq._phone_imei)
}
inline std::string* CommonReq::mutable__phone_imei() {
  std::string* _s = _internal_mutable__phone_imei();
  // @@protoc_insertion_point(field_mutable:CommonReq._phone_imei)
  return _s;
}
inline const std::string& CommonReq::_internal__phone_imei() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._phone_imei_.Get();
}
inline void CommonReq::_internal_set__phone_imei(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._phone_imei_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable__phone_imei() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_._phone_imei_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release__phone_imei() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq._phone_imei)
  return _impl_._phone_imei_.Release();
}
inline void CommonReq::set_allocated__phone_imei(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._phone_imei_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_._phone_imei_.IsDefault()) {
          _impl_._phone_imei_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq._phone_imei)
}

// string _from = 6;
inline void CommonReq::clear__from() {
  _impl_._from_.ClearToEmpty();
}
inline const std::string& CommonReq::_from() const {
  // @@protoc_insertion_point(field_get:CommonReq._from)
  return _internal__from();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set__from(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._from_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq._from)
}
inline std::string* CommonReq::mutable__from() {
  std::string* _s = _internal_mutable__from();
  // @@protoc_insertion_point(field_mutable:CommonReq._from)
  return _s;
}
inline const std::string& CommonReq::_internal__from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._from_.Get();
}
inline void CommonReq::_internal_set__from(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._from_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable__from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_._from_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release__from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq._from)
  return _impl_._from_.Release();
}
inline void CommonReq::set_allocated__from(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._from_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_._from_.IsDefault()) {
          _impl_._from_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq._from)
}

// string cuid = 7;
inline void CommonReq::clear_cuid() {
  _impl_.cuid_.ClearToEmpty();
}
inline const std::string& CommonReq::cuid() const {
  // @@protoc_insertion_point(field_get:CommonReq.cuid)
  return _internal_cuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_cuid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.cuid)
}
inline std::string* CommonReq::mutable_cuid() {
  std::string* _s = _internal_mutable_cuid();
  // @@protoc_insertion_point(field_mutable:CommonReq.cuid)
  return _s;
}
inline const std::string& CommonReq::_internal_cuid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cuid_.Get();
}
inline void CommonReq::_internal_set_cuid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_cuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cuid_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_cuid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.cuid)
  return _impl_.cuid_.Release();
}
inline void CommonReq::set_allocated_cuid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cuid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cuid_.IsDefault()) {
          _impl_.cuid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.cuid)
}

// int64 _timestamp = 8;
inline void CommonReq::clear__timestamp() {
  _impl_._timestamp_ = ::int64_t{0};
}
inline ::int64_t CommonReq::_timestamp() const {
  // @@protoc_insertion_point(field_get:CommonReq._timestamp)
  return _internal__timestamp();
}
inline void CommonReq::set__timestamp(::int64_t value) {
  _internal_set__timestamp(value);
  // @@protoc_insertion_point(field_set:CommonReq._timestamp)
}
inline ::int64_t CommonReq::_internal__timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._timestamp_;
}
inline void CommonReq::_internal_set__timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._timestamp_ = value;
}

// string model = 9;
inline void CommonReq::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& CommonReq::model() const {
  // @@protoc_insertion_point(field_get:CommonReq.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.model)
}
inline std::string* CommonReq::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:CommonReq.model)
  return _s;
}
inline const std::string& CommonReq::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void CommonReq::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.model)
  return _impl_.model_.Release();
}
inline void CommonReq::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.model)
}

// string tbs = 11;
inline void CommonReq::clear_tbs() {
  _impl_.tbs_.ClearToEmpty();
}
inline const std::string& CommonReq::tbs() const {
  // @@protoc_insertion_point(field_get:CommonReq.tbs)
  return _internal_tbs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_tbs(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tbs_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.tbs)
}
inline std::string* CommonReq::mutable_tbs() {
  std::string* _s = _internal_mutable_tbs();
  // @@protoc_insertion_point(field_mutable:CommonReq.tbs)
  return _s;
}
inline const std::string& CommonReq::_internal_tbs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tbs_.Get();
}
inline void CommonReq::_internal_set_tbs(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tbs_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_tbs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tbs_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_tbs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.tbs)
  return _impl_.tbs_.Release();
}
inline void CommonReq::set_allocated_tbs(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tbs_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tbs_.IsDefault()) {
          _impl_.tbs_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.tbs)
}

// int32 net_type = 12;
inline void CommonReq::clear_net_type() {
  _impl_.net_type_ = 0;
}
inline ::int32_t CommonReq::net_type() const {
  // @@protoc_insertion_point(field_get:CommonReq.net_type)
  return _internal_net_type();
}
inline void CommonReq::set_net_type(::int32_t value) {
  _internal_set_net_type(value);
  // @@protoc_insertion_point(field_set:CommonReq.net_type)
}
inline ::int32_t CommonReq::_internal_net_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.net_type_;
}
inline void CommonReq::_internal_set_net_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.net_type_ = value;
}

// string subapp_type = 13;
inline void CommonReq::clear_subapp_type() {
  _impl_.subapp_type_.ClearToEmpty();
}
inline const std::string& CommonReq::subapp_type() const {
  // @@protoc_insertion_point(field_get:CommonReq.subapp_type)
  return _internal_subapp_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_subapp_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subapp_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.subapp_type)
}
inline std::string* CommonReq::mutable_subapp_type() {
  std::string* _s = _internal_mutable_subapp_type();
  // @@protoc_insertion_point(field_mutable:CommonReq.subapp_type)
  return _s;
}
inline const std::string& CommonReq::_internal_subapp_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subapp_type_.Get();
}
inline void CommonReq::_internal_set_subapp_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subapp_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_subapp_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subapp_type_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_subapp_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.subapp_type)
  return _impl_.subapp_type_.Release();
}
inline void CommonReq::set_allocated_subapp_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subapp_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subapp_type_.IsDefault()) {
          _impl_.subapp_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.subapp_type)
}

// string _phone_newimei = 14;
inline void CommonReq::clear__phone_newimei() {
  _impl_._phone_newimei_.ClearToEmpty();
}
inline const std::string& CommonReq::_phone_newimei() const {
  // @@protoc_insertion_point(field_get:CommonReq._phone_newimei)
  return _internal__phone_newimei();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set__phone_newimei(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._phone_newimei_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq._phone_newimei)
}
inline std::string* CommonReq::mutable__phone_newimei() {
  std::string* _s = _internal_mutable__phone_newimei();
  // @@protoc_insertion_point(field_mutable:CommonReq._phone_newimei)
  return _s;
}
inline const std::string& CommonReq::_internal__phone_newimei() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_._phone_newimei_.Get();
}
inline void CommonReq::_internal_set__phone_newimei(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_._phone_newimei_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable__phone_newimei() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_._phone_newimei_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release__phone_newimei() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq._phone_newimei)
  return _impl_._phone_newimei_.Release();
}
inline void CommonReq::set_allocated__phone_newimei(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._phone_newimei_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_._phone_newimei_.IsDefault()) {
          _impl_._phone_newimei_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq._phone_newimei)
}

// string ka = 15;
inline void CommonReq::clear_ka() {
  _impl_.ka_.ClearToEmpty();
}
inline const std::string& CommonReq::ka() const {
  // @@protoc_insertion_point(field_get:CommonReq.ka)
  return _internal_ka();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_ka(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ka_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.ka)
}
inline std::string* CommonReq::mutable_ka() {
  std::string* _s = _internal_mutable_ka();
  // @@protoc_insertion_point(field_mutable:CommonReq.ka)
  return _s;
}
inline const std::string& CommonReq::_internal_ka() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ka_.Get();
}
inline void CommonReq::_internal_set_ka(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ka_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_ka() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ka_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_ka() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.ka)
  return _impl_.ka_.Release();
}
inline void CommonReq::set_allocated_ka(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ka_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ka_.IsDefault()) {
          _impl_.ka_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.ka)
}

// string m_api = 16;
inline void CommonReq::clear_m_api() {
  _impl_.m_api_.ClearToEmpty();
}
inline const std::string& CommonReq::m_api() const {
  // @@protoc_insertion_point(field_get:CommonReq.m_api)
  return _internal_m_api();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_m_api(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_api_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.m_api)
}
inline std::string* CommonReq::mutable_m_api() {
  std::string* _s = _internal_mutable_m_api();
  // @@protoc_insertion_point(field_mutable:CommonReq.m_api)
  return _s;
}
inline const std::string& CommonReq::_internal_m_api() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_api_.Get();
}
inline void CommonReq::_internal_set_m_api(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_api_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_m_api() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.m_api_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_m_api() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.m_api)
  return _impl_.m_api_.Release();
}
inline void CommonReq::set_allocated_m_api(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_api_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_api_.IsDefault()) {
          _impl_.m_api_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.m_api)
}

// string m_logid = 17;
inline void CommonReq::clear_m_logid() {
  _impl_.m_logid_.ClearToEmpty();
}
inline const std::string& CommonReq::m_logid() const {
  // @@protoc_insertion_point(field_get:CommonReq.m_logid)
  return _internal_m_logid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_m_logid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_logid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.m_logid)
}
inline std::string* CommonReq::mutable_m_logid() {
  std::string* _s = _internal_mutable_m_logid();
  // @@protoc_insertion_point(field_mutable:CommonReq.m_logid)
  return _s;
}
inline const std::string& CommonReq::_internal_m_logid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_logid_.Get();
}
inline void CommonReq::_internal_set_m_logid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_logid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_m_logid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.m_logid_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_m_logid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.m_logid)
  return _impl_.m_logid_.Release();
}
inline void CommonReq::set_allocated_m_logid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_logid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_logid_.IsDefault()) {
          _impl_.m_logid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.m_logid)
}

// string m_cost = 18;
inline void CommonReq::clear_m_cost() {
  _impl_.m_cost_.ClearToEmpty();
}
inline const std::string& CommonReq::m_cost() const {
  // @@protoc_insertion_point(field_get:CommonReq.m_cost)
  return _internal_m_cost();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_m_cost(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_cost_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.m_cost)
}
inline std::string* CommonReq::mutable_m_cost() {
  std::string* _s = _internal_mutable_m_cost();
  // @@protoc_insertion_point(field_mutable:CommonReq.m_cost)
  return _s;
}
inline const std::string& CommonReq::_internal_m_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_cost_.Get();
}
inline void CommonReq::_internal_set_m_cost(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_cost_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_m_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.m_cost_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_m_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.m_cost)
  return _impl_.m_cost_.Release();
}
inline void CommonReq::set_allocated_m_cost(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_cost_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_cost_.IsDefault()) {
          _impl_.m_cost_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.m_cost)
}

// string m_result = 19;
inline void CommonReq::clear_m_result() {
  _impl_.m_result_.ClearToEmpty();
}
inline const std::string& CommonReq::m_result() const {
  // @@protoc_insertion_point(field_get:CommonReq.m_result)
  return _internal_m_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_m_result(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_result_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.m_result)
}
inline std::string* CommonReq::mutable_m_result() {
  std::string* _s = _internal_mutable_m_result();
  // @@protoc_insertion_point(field_mutable:CommonReq.m_result)
  return _s;
}
inline const std::string& CommonReq::_internal_m_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_result_.Get();
}
inline void CommonReq::_internal_set_m_result(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_result_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_m_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.m_result_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_m_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.m_result)
  return _impl_.m_result_.Release();
}
inline void CommonReq::set_allocated_m_result(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_result_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_result_.IsDefault()) {
          _impl_.m_result_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.m_result)
}

// string m_size_u = 20;
inline void CommonReq::clear_m_size_u() {
  _impl_.m_size_u_.ClearToEmpty();
}
inline const std::string& CommonReq::m_size_u() const {
  // @@protoc_insertion_point(field_get:CommonReq.m_size_u)
  return _internal_m_size_u();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_m_size_u(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_size_u_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.m_size_u)
}
inline std::string* CommonReq::mutable_m_size_u() {
  std::string* _s = _internal_mutable_m_size_u();
  // @@protoc_insertion_point(field_mutable:CommonReq.m_size_u)
  return _s;
}
inline const std::string& CommonReq::_internal_m_size_u() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_size_u_.Get();
}
inline void CommonReq::_internal_set_m_size_u(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_size_u_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_m_size_u() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.m_size_u_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_m_size_u() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.m_size_u)
  return _impl_.m_size_u_.Release();
}
inline void CommonReq::set_allocated_m_size_u(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_size_u_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_size_u_.IsDefault()) {
          _impl_.m_size_u_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.m_size_u)
}

// string m_size_d = 21;
inline void CommonReq::clear_m_size_d() {
  _impl_.m_size_d_.ClearToEmpty();
}
inline const std::string& CommonReq::m_size_d() const {
  // @@protoc_insertion_point(field_get:CommonReq.m_size_d)
  return _internal_m_size_d();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_m_size_d(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_size_d_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.m_size_d)
}
inline std::string* CommonReq::mutable_m_size_d() {
  std::string* _s = _internal_mutable_m_size_d();
  // @@protoc_insertion_point(field_mutable:CommonReq.m_size_d)
  return _s;
}
inline const std::string& CommonReq::_internal_m_size_d() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_size_d_.Get();
}
inline void CommonReq::_internal_set_m_size_d(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.m_size_d_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_m_size_d() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.m_size_d_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_m_size_d() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.m_size_d)
  return _impl_.m_size_d_.Release();
}
inline void CommonReq::set_allocated_m_size_d(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_size_d_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_size_d_.IsDefault()) {
          _impl_.m_size_d_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.m_size_d)
}

// string smallflow = 22;
inline void CommonReq::clear_smallflow() {
  _impl_.smallflow_.ClearToEmpty();
}
inline const std::string& CommonReq::smallflow() const {
  // @@protoc_insertion_point(field_get:CommonReq.smallflow)
  return _internal_smallflow();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_smallflow(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.smallflow_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.smallflow)
}
inline std::string* CommonReq::mutable_smallflow() {
  std::string* _s = _internal_mutable_smallflow();
  // @@protoc_insertion_point(field_mutable:CommonReq.smallflow)
  return _s;
}
inline const std::string& CommonReq::_internal_smallflow() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.smallflow_.Get();
}
inline void CommonReq::_internal_set_smallflow(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.smallflow_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_smallflow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.smallflow_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_smallflow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.smallflow)
  return _impl_.smallflow_.Release();
}
inline void CommonReq::set_allocated_smallflow(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.smallflow_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.smallflow_.IsDefault()) {
          _impl_.smallflow_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.smallflow)
}

// string sign = 23;
inline void CommonReq::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& CommonReq::sign() const {
  // @@protoc_insertion_point(field_get:CommonReq.sign)
  return _internal_sign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_sign(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sign_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.sign)
}
inline std::string* CommonReq::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:CommonReq.sign)
  return _s;
}
inline const std::string& CommonReq::_internal_sign() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sign_.Get();
}
inline void CommonReq::_internal_set_sign(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sign_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_sign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.sign)
  return _impl_.sign_.Release();
}
inline void CommonReq::set_allocated_sign(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sign_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sign_.IsDefault()) {
          _impl_.sign_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.sign)
}

// string pversion = 24;
inline void CommonReq::clear_pversion() {
  _impl_.pversion_.ClearToEmpty();
}
inline const std::string& CommonReq::pversion() const {
  // @@protoc_insertion_point(field_get:CommonReq.pversion)
  return _internal_pversion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_pversion(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pversion_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.pversion)
}
inline std::string* CommonReq::mutable_pversion() {
  std::string* _s = _internal_mutable_pversion();
  // @@protoc_insertion_point(field_mutable:CommonReq.pversion)
  return _s;
}
inline const std::string& CommonReq::_internal_pversion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pversion_.Get();
}
inline void CommonReq::_internal_set_pversion(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_pversion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pversion_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_pversion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.pversion)
  return _impl_.pversion_.Release();
}
inline void CommonReq::set_allocated_pversion(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pversion_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pversion_.IsDefault()) {
          _impl_.pversion_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.pversion)
}

// string brand = 26;
inline void CommonReq::clear_brand() {
  _impl_.brand_.ClearToEmpty();
}
inline const std::string& CommonReq::brand() const {
  // @@protoc_insertion_point(field_get:CommonReq.brand)
  return _internal_brand();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_brand(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brand_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.brand)
}
inline std::string* CommonReq::mutable_brand() {
  std::string* _s = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:CommonReq.brand)
  return _s;
}
inline const std::string& CommonReq::_internal_brand() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brand_.Get();
}
inline void CommonReq::_internal_set_brand(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brand_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.brand_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_brand() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.brand)
  return _impl_.brand_.Release();
}
inline void CommonReq::set_allocated_brand(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brand_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.brand_.IsDefault()) {
          _impl_.brand_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.brand)
}

// string brand_type = 27;
inline void CommonReq::clear_brand_type() {
  _impl_.brand_type_.ClearToEmpty();
}
inline const std::string& CommonReq::brand_type() const {
  // @@protoc_insertion_point(field_get:CommonReq.brand_type)
  return _internal_brand_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_brand_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brand_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.brand_type)
}
inline std::string* CommonReq::mutable_brand_type() {
  std::string* _s = _internal_mutable_brand_type();
  // @@protoc_insertion_point(field_mutable:CommonReq.brand_type)
  return _s;
}
inline const std::string& CommonReq::_internal_brand_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.brand_type_.Get();
}
inline void CommonReq::_internal_set_brand_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.brand_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_brand_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.brand_type_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_brand_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.brand_type)
  return _impl_.brand_type_.Release();
}
inline void CommonReq::set_allocated_brand_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.brand_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.brand_type_.IsDefault()) {
          _impl_.brand_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.brand_type)
}

// string lego_lib_version = 28;
inline void CommonReq::clear_lego_lib_version() {
  _impl_.lego_lib_version_.ClearToEmpty();
}
inline const std::string& CommonReq::lego_lib_version() const {
  // @@protoc_insertion_point(field_get:CommonReq.lego_lib_version)
  return _internal_lego_lib_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_lego_lib_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lego_lib_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.lego_lib_version)
}
inline std::string* CommonReq::mutable_lego_lib_version() {
  std::string* _s = _internal_mutable_lego_lib_version();
  // @@protoc_insertion_point(field_mutable:CommonReq.lego_lib_version)
  return _s;
}
inline const std::string& CommonReq::_internal_lego_lib_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lego_lib_version_.Get();
}
inline void CommonReq::_internal_set_lego_lib_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lego_lib_version_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_lego_lib_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lego_lib_version_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_lego_lib_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.lego_lib_version)
  return _impl_.lego_lib_version_.Release();
}
inline void CommonReq::set_allocated_lego_lib_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lego_lib_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lego_lib_version_.IsDefault()) {
          _impl_.lego_lib_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.lego_lib_version)
}

// string applist = 29;
inline void CommonReq::clear_applist() {
  _impl_.applist_.ClearToEmpty();
}
inline const std::string& CommonReq::applist() const {
  // @@protoc_insertion_point(field_get:CommonReq.applist)
  return _internal_applist();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_applist(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.applist_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.applist)
}
inline std::string* CommonReq::mutable_applist() {
  std::string* _s = _internal_mutable_applist();
  // @@protoc_insertion_point(field_mutable:CommonReq.applist)
  return _s;
}
inline const std::string& CommonReq::_internal_applist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.applist_.Get();
}
inline void CommonReq::_internal_set_applist(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.applist_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_applist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.applist_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_applist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.applist)
  return _impl_.applist_.Release();
}
inline void CommonReq::set_allocated_applist(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.applist_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.applist_.IsDefault()) {
          _impl_.applist_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.applist)
}

// string stoken = 30;
inline void CommonReq::clear_stoken() {
  _impl_.stoken_.ClearToEmpty();
}
inline const std::string& CommonReq::stoken() const {
  // @@protoc_insertion_point(field_get:CommonReq.stoken)
  return _internal_stoken();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_stoken(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stoken_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.stoken)
}
inline std::string* CommonReq::mutable_stoken() {
  std::string* _s = _internal_mutable_stoken();
  // @@protoc_insertion_point(field_mutable:CommonReq.stoken)
  return _s;
}
inline const std::string& CommonReq::_internal_stoken() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stoken_.Get();
}
inline void CommonReq::_internal_set_stoken(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stoken_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_stoken() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stoken_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_stoken() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.stoken)
  return _impl_.stoken_.Release();
}
inline void CommonReq::set_allocated_stoken(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stoken_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stoken_.IsDefault()) {
          _impl_.stoken_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.stoken)
}

// string z_id = 31;
inline void CommonReq::clear_z_id() {
  _impl_.z_id_.ClearToEmpty();
}
inline const std::string& CommonReq::z_id() const {
  // @@protoc_insertion_point(field_get:CommonReq.z_id)
  return _internal_z_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_z_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.z_id)
}
inline std::string* CommonReq::mutable_z_id() {
  std::string* _s = _internal_mutable_z_id();
  // @@protoc_insertion_point(field_mutable:CommonReq.z_id)
  return _s;
}
inline const std::string& CommonReq::_internal_z_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_id_.Get();
}
inline void CommonReq::_internal_set_z_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_z_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.z_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_z_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.z_id)
  return _impl_.z_id_.Release();
}
inline void CommonReq::set_allocated_z_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.z_id_.IsDefault()) {
          _impl_.z_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.z_id)
}

// string cuid_galaxy2 = 32;
inline void CommonReq::clear_cuid_galaxy2() {
  _impl_.cuid_galaxy2_.ClearToEmpty();
}
inline const std::string& CommonReq::cuid_galaxy2() const {
  // @@protoc_insertion_point(field_get:CommonReq.cuid_galaxy2)
  return _internal_cuid_galaxy2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_cuid_galaxy2(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuid_galaxy2_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.cuid_galaxy2)
}
inline std::string* CommonReq::mutable_cuid_galaxy2() {
  std::string* _s = _internal_mutable_cuid_galaxy2();
  // @@protoc_insertion_point(field_mutable:CommonReq.cuid_galaxy2)
  return _s;
}
inline const std::string& CommonReq::_internal_cuid_galaxy2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cuid_galaxy2_.Get();
}
inline void CommonReq::_internal_set_cuid_galaxy2(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuid_galaxy2_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_cuid_galaxy2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cuid_galaxy2_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_cuid_galaxy2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.cuid_galaxy2)
  return _impl_.cuid_galaxy2_.Release();
}
inline void CommonReq::set_allocated_cuid_galaxy2(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cuid_galaxy2_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cuid_galaxy2_.IsDefault()) {
          _impl_.cuid_galaxy2_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.cuid_galaxy2)
}

// string cuid_gid = 33;
inline void CommonReq::clear_cuid_gid() {
  _impl_.cuid_gid_.ClearToEmpty();
}
inline const std::string& CommonReq::cuid_gid() const {
  // @@protoc_insertion_point(field_get:CommonReq.cuid_gid)
  return _internal_cuid_gid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommonReq::set_cuid_gid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuid_gid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommonReq.cuid_gid)
}
inline std::string* CommonReq::mutable_cuid_gid() {
  std::string* _s = _internal_mutable_cuid_gid();
  // @@protoc_insertion_point(field_mutable:CommonReq.cuid_gid)
  return _s;
}
inline const std::string& CommonReq::_internal_cuid_gid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cuid_gid_.Get();
}
inline void CommonReq::_internal_set_cuid_gid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuid_gid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_cuid_gid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.cuid_gid_.Mutable( GetArenaForAllocation());
}
inline std::string* CommonReq::release_cuid_gid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommonReq.cuid_gid)
  return _impl_.cuid_gid_.Release();
}
inline void CommonReq::set_allocated_cuid_gid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cuid_gid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cuid_gid_.IsDefault()) {
          _impl_.cuid_gid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommonReq.cuid_gid)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_CommonReq_2eproto_2epb_2eh
