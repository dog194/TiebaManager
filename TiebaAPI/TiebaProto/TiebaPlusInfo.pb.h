// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TiebaPlusInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TiebaPlusInfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TiebaPlusInfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "PluginUser.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TiebaPlusInfo_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_TiebaPlusInfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_TiebaPlusInfo_2eproto;
class TiebaPlusInfo;
struct TiebaPlusInfoDefaultTypeInternal;
extern TiebaPlusInfoDefaultTypeInternal _TiebaPlusInfo_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class TiebaPlusInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TiebaPlusInfo) */ {
 public:
  inline TiebaPlusInfo() : TiebaPlusInfo(nullptr) {}
  ~TiebaPlusInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TiebaPlusInfo(::google::protobuf::internal::ConstantInitialized);

  TiebaPlusInfo(const TiebaPlusInfo& from);
  TiebaPlusInfo(TiebaPlusInfo&& from) noexcept
    : TiebaPlusInfo() {
    *this = ::std::move(from);
  }

  inline TiebaPlusInfo& operator=(const TiebaPlusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TiebaPlusInfo& operator=(TiebaPlusInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TiebaPlusInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TiebaPlusInfo* internal_default_instance() {
    return reinterpret_cast<const TiebaPlusInfo*>(
               &_TiebaPlusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TiebaPlusInfo& a, TiebaPlusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TiebaPlusInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TiebaPlusInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TiebaPlusInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TiebaPlusInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TiebaPlusInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TiebaPlusInfo& from) {
    TiebaPlusInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TiebaPlusInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TiebaPlusInfo";
  }
  protected:
  explicit TiebaPlusInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescFieldNumber = 2,
    kJumpUrlFieldNumber = 3,
    kDownloadUrlFieldNumber = 4,
    kAppIdFieldNumber = 5,
    kAppIconFieldNumber = 6,
    kAppPackageFieldNumber = 7,
    kAppVersionFieldNumber = 8,
    kAppPrivacyFieldNumber = 9,
    kAppPowerFieldNumber = 10,
    kAppCompanyFieldNumber = 11,
    kH5JumpNumberFieldNumber = 14,
    kH5JumpParamFieldNumber = 15,
    kItemIdFieldNumber = 17,
    kForumNameFieldNumber = 20,
    kWxThumbnailFieldNumber = 22,
    kButtonDescFieldNumber = 23,
    kPluginUserFieldNumber = 19,
    kTargetTypeFieldNumber = 12,
    kH5JumpTypeFieldNumber = 13,
    kJumpTypeFieldNumber = 16,
    kIsAppointFieldNumber = 18,
    kJumpSettingFieldNumber = 21,
  };
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string desc = 2;
  void clear_desc() ;
  const std::string& desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_desc(Arg_&& arg, Args_... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* ptr);

  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(
      const std::string& value);
  std::string* _internal_mutable_desc();

  public:
  // string jump_url = 3;
  void clear_jump_url() ;
  const std::string& jump_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_jump_url(Arg_&& arg, Args_... args);
  std::string* mutable_jump_url();
  PROTOBUF_NODISCARD std::string* release_jump_url();
  void set_allocated_jump_url(std::string* ptr);

  private:
  const std::string& _internal_jump_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jump_url(
      const std::string& value);
  std::string* _internal_mutable_jump_url();

  public:
  // string download_url = 4;
  void clear_download_url() ;
  const std::string& download_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_download_url(Arg_&& arg, Args_... args);
  std::string* mutable_download_url();
  PROTOBUF_NODISCARD std::string* release_download_url();
  void set_allocated_download_url(std::string* ptr);

  private:
  const std::string& _internal_download_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_download_url(
      const std::string& value);
  std::string* _internal_mutable_download_url();

  public:
  // string app_id = 5;
  void clear_app_id() ;
  const std::string& app_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string app_icon = 6;
  void clear_app_icon() ;
  const std::string& app_icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_icon(Arg_&& arg, Args_... args);
  std::string* mutable_app_icon();
  PROTOBUF_NODISCARD std::string* release_app_icon();
  void set_allocated_app_icon(std::string* ptr);

  private:
  const std::string& _internal_app_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_icon(
      const std::string& value);
  std::string* _internal_mutable_app_icon();

  public:
  // string app_package = 7;
  void clear_app_package() ;
  const std::string& app_package() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_package(Arg_&& arg, Args_... args);
  std::string* mutable_app_package();
  PROTOBUF_NODISCARD std::string* release_app_package();
  void set_allocated_app_package(std::string* ptr);

  private:
  const std::string& _internal_app_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_package(
      const std::string& value);
  std::string* _internal_mutable_app_package();

  public:
  // string app_version = 8;
  void clear_app_version() ;
  const std::string& app_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_version(Arg_&& arg, Args_... args);
  std::string* mutable_app_version();
  PROTOBUF_NODISCARD std::string* release_app_version();
  void set_allocated_app_version(std::string* ptr);

  private:
  const std::string& _internal_app_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_version(
      const std::string& value);
  std::string* _internal_mutable_app_version();

  public:
  // string app_privacy = 9;
  void clear_app_privacy() ;
  const std::string& app_privacy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_privacy(Arg_&& arg, Args_... args);
  std::string* mutable_app_privacy();
  PROTOBUF_NODISCARD std::string* release_app_privacy();
  void set_allocated_app_privacy(std::string* ptr);

  private:
  const std::string& _internal_app_privacy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_privacy(
      const std::string& value);
  std::string* _internal_mutable_app_privacy();

  public:
  // string app_power = 10;
  void clear_app_power() ;
  const std::string& app_power() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_power(Arg_&& arg, Args_... args);
  std::string* mutable_app_power();
  PROTOBUF_NODISCARD std::string* release_app_power();
  void set_allocated_app_power(std::string* ptr);

  private:
  const std::string& _internal_app_power() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_power(
      const std::string& value);
  std::string* _internal_mutable_app_power();

  public:
  // string app_company = 11;
  void clear_app_company() ;
  const std::string& app_company() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_company(Arg_&& arg, Args_... args);
  std::string* mutable_app_company();
  PROTOBUF_NODISCARD std::string* release_app_company();
  void set_allocated_app_company(std::string* ptr);

  private:
  const std::string& _internal_app_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_company(
      const std::string& value);
  std::string* _internal_mutable_app_company();

  public:
  // string h5_jump_number = 14;
  void clear_h5_jump_number() ;
  const std::string& h5_jump_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_h5_jump_number(Arg_&& arg, Args_... args);
  std::string* mutable_h5_jump_number();
  PROTOBUF_NODISCARD std::string* release_h5_jump_number();
  void set_allocated_h5_jump_number(std::string* ptr);

  private:
  const std::string& _internal_h5_jump_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h5_jump_number(
      const std::string& value);
  std::string* _internal_mutable_h5_jump_number();

  public:
  // string h5_jump_param = 15;
  void clear_h5_jump_param() ;
  const std::string& h5_jump_param() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_h5_jump_param(Arg_&& arg, Args_... args);
  std::string* mutable_h5_jump_param();
  PROTOBUF_NODISCARD std::string* release_h5_jump_param();
  void set_allocated_h5_jump_param(std::string* ptr);

  private:
  const std::string& _internal_h5_jump_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h5_jump_param(
      const std::string& value);
  std::string* _internal_mutable_h5_jump_param();

  public:
  // string item_id = 17;
  void clear_item_id() ;
  const std::string& item_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_item_id(Arg_&& arg, Args_... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* ptr);

  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(
      const std::string& value);
  std::string* _internal_mutable_item_id();

  public:
  // string forum_name = 20;
  void clear_forum_name() ;
  const std::string& forum_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forum_name(Arg_&& arg, Args_... args);
  std::string* mutable_forum_name();
  PROTOBUF_NODISCARD std::string* release_forum_name();
  void set_allocated_forum_name(std::string* ptr);

  private:
  const std::string& _internal_forum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forum_name(
      const std::string& value);
  std::string* _internal_mutable_forum_name();

  public:
  // string wx_thumbnail = 22;
  void clear_wx_thumbnail() ;
  const std::string& wx_thumbnail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_wx_thumbnail(Arg_&& arg, Args_... args);
  std::string* mutable_wx_thumbnail();
  PROTOBUF_NODISCARD std::string* release_wx_thumbnail();
  void set_allocated_wx_thumbnail(std::string* ptr);

  private:
  const std::string& _internal_wx_thumbnail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wx_thumbnail(
      const std::string& value);
  std::string* _internal_mutable_wx_thumbnail();

  public:
  // string button_desc = 23;
  void clear_button_desc() ;
  const std::string& button_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_button_desc(Arg_&& arg, Args_... args);
  std::string* mutable_button_desc();
  PROTOBUF_NODISCARD std::string* release_button_desc();
  void set_allocated_button_desc(std::string* ptr);

  private:
  const std::string& _internal_button_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_button_desc(
      const std::string& value);
  std::string* _internal_mutable_button_desc();

  public:
  // .PluginUser plugin_user = 19;
  bool has_plugin_user() const;
  void clear_plugin_user() ;
  const ::PluginUser& plugin_user() const;
  PROTOBUF_NODISCARD ::PluginUser* release_plugin_user();
  ::PluginUser* mutable_plugin_user();
  void set_allocated_plugin_user(::PluginUser* value);
  void unsafe_arena_set_allocated_plugin_user(::PluginUser* value);
  ::PluginUser* unsafe_arena_release_plugin_user();

  private:
  const ::PluginUser& _internal_plugin_user() const;
  ::PluginUser* _internal_mutable_plugin_user();

  public:
  // int32 target_type = 12;
  void clear_target_type() ;
  ::int32_t target_type() const;
  void set_target_type(::int32_t value);

  private:
  ::int32_t _internal_target_type() const;
  void _internal_set_target_type(::int32_t value);

  public:
  // int32 h5_jump_type = 13;
  void clear_h5_jump_type() ;
  ::int32_t h5_jump_type() const;
  void set_h5_jump_type(::int32_t value);

  private:
  ::int32_t _internal_h5_jump_type() const;
  void _internal_set_h5_jump_type(::int32_t value);

  public:
  // int32 jump_type = 16;
  void clear_jump_type() ;
  ::int32_t jump_type() const;
  void set_jump_type(::int32_t value);

  private:
  ::int32_t _internal_jump_type() const;
  void _internal_set_jump_type(::int32_t value);

  public:
  // int32 is_appoint = 18;
  void clear_is_appoint() ;
  ::int32_t is_appoint() const;
  void set_is_appoint(::int32_t value);

  private:
  ::int32_t _internal_is_appoint() const;
  void _internal_set_is_appoint(::int32_t value);

  public:
  // int32 jump_setting = 21;
  void clear_jump_setting() ;
  ::int32_t jump_setting() const;
  void set_jump_setting(::int32_t value);

  private:
  ::int32_t _internal_jump_setting() const;
  void _internal_set_jump_setting(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TiebaPlusInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 23, 1, 201, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr desc_;
    ::google::protobuf::internal::ArenaStringPtr jump_url_;
    ::google::protobuf::internal::ArenaStringPtr download_url_;
    ::google::protobuf::internal::ArenaStringPtr app_id_;
    ::google::protobuf::internal::ArenaStringPtr app_icon_;
    ::google::protobuf::internal::ArenaStringPtr app_package_;
    ::google::protobuf::internal::ArenaStringPtr app_version_;
    ::google::protobuf::internal::ArenaStringPtr app_privacy_;
    ::google::protobuf::internal::ArenaStringPtr app_power_;
    ::google::protobuf::internal::ArenaStringPtr app_company_;
    ::google::protobuf::internal::ArenaStringPtr h5_jump_number_;
    ::google::protobuf::internal::ArenaStringPtr h5_jump_param_;
    ::google::protobuf::internal::ArenaStringPtr item_id_;
    ::google::protobuf::internal::ArenaStringPtr forum_name_;
    ::google::protobuf::internal::ArenaStringPtr wx_thumbnail_;
    ::google::protobuf::internal::ArenaStringPtr button_desc_;
    ::PluginUser* plugin_user_;
    ::int32_t target_type_;
    ::int32_t h5_jump_type_;
    ::int32_t jump_type_;
    ::int32_t is_appoint_;
    ::int32_t jump_setting_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TiebaPlusInfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TiebaPlusInfo

// string title = 1;
inline void TiebaPlusInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::title() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.title)
}
inline std::string* TiebaPlusInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.title)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void TiebaPlusInfo::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.title)
  return _impl_.title_.Release();
}
inline void TiebaPlusInfo::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.title)
}

// string desc = 2;
inline void TiebaPlusInfo::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::desc() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.desc)
  return _internal_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_desc(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.desc_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.desc)
}
inline std::string* TiebaPlusInfo::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.desc)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_desc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.desc_.Get();
}
inline void TiebaPlusInfo::_internal_set_desc(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.desc_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.desc)
  return _impl_.desc_.Release();
}
inline void TiebaPlusInfo::set_allocated_desc(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.desc_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.desc_.IsDefault()) {
          _impl_.desc_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.desc)
}

// string jump_url = 3;
inline void TiebaPlusInfo::clear_jump_url() {
  _impl_.jump_url_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::jump_url() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.jump_url)
  return _internal_jump_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_jump_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jump_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.jump_url)
}
inline std::string* TiebaPlusInfo::mutable_jump_url() {
  std::string* _s = _internal_mutable_jump_url();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.jump_url)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_jump_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jump_url_.Get();
}
inline void TiebaPlusInfo::_internal_set_jump_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jump_url_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_jump_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.jump_url_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_jump_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.jump_url)
  return _impl_.jump_url_.Release();
}
inline void TiebaPlusInfo::set_allocated_jump_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.jump_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.jump_url_.IsDefault()) {
          _impl_.jump_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.jump_url)
}

// string download_url = 4;
inline void TiebaPlusInfo::clear_download_url() {
  _impl_.download_url_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::download_url() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.download_url)
  return _internal_download_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_download_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.download_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.download_url)
}
inline std::string* TiebaPlusInfo::mutable_download_url() {
  std::string* _s = _internal_mutable_download_url();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.download_url)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_download_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.download_url_.Get();
}
inline void TiebaPlusInfo::_internal_set_download_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.download_url_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_download_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.download_url_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_download_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.download_url)
  return _impl_.download_url_.Release();
}
inline void TiebaPlusInfo::set_allocated_download_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.download_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.download_url_.IsDefault()) {
          _impl_.download_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.download_url)
}

// string app_id = 5;
inline void TiebaPlusInfo::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_id() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_id)
}
inline std::string* TiebaPlusInfo::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_id)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_id_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_id)
  return _impl_.app_id_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_id)
}

// string app_icon = 6;
inline void TiebaPlusInfo::clear_app_icon() {
  _impl_.app_icon_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_icon() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_icon)
  return _internal_app_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_icon(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_icon_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_icon)
}
inline std::string* TiebaPlusInfo::mutable_app_icon() {
  std::string* _s = _internal_mutable_app_icon();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_icon)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_icon_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_icon(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_icon_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_icon_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_icon)
  return _impl_.app_icon_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_icon(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_icon_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_icon_.IsDefault()) {
          _impl_.app_icon_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_icon)
}

// string app_package = 7;
inline void TiebaPlusInfo::clear_app_package() {
  _impl_.app_package_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_package() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_package)
  return _internal_app_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_package(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_package_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_package)
}
inline std::string* TiebaPlusInfo::mutable_app_package() {
  std::string* _s = _internal_mutable_app_package();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_package)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_package() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_package_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_package(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_package_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_package_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_package)
  return _impl_.app_package_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_package(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_package_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_package_.IsDefault()) {
          _impl_.app_package_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_package)
}

// string app_version = 8;
inline void TiebaPlusInfo::clear_app_version() {
  _impl_.app_version_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_version() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_version)
  return _internal_app_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_version)
}
inline std::string* TiebaPlusInfo::mutable_app_version() {
  std::string* _s = _internal_mutable_app_version();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_version)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_version_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_version_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_version_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_version)
  return _impl_.app_version_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_version_.IsDefault()) {
          _impl_.app_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_version)
}

// string app_privacy = 9;
inline void TiebaPlusInfo::clear_app_privacy() {
  _impl_.app_privacy_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_privacy() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_privacy)
  return _internal_app_privacy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_privacy(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_privacy_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_privacy)
}
inline std::string* TiebaPlusInfo::mutable_app_privacy() {
  std::string* _s = _internal_mutable_app_privacy();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_privacy)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_privacy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_privacy_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_privacy(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_privacy_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_privacy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_privacy_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_privacy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_privacy)
  return _impl_.app_privacy_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_privacy(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_privacy_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_privacy_.IsDefault()) {
          _impl_.app_privacy_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_privacy)
}

// string app_power = 10;
inline void TiebaPlusInfo::clear_app_power() {
  _impl_.app_power_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_power() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_power)
  return _internal_app_power();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_power(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_power_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_power)
}
inline std::string* TiebaPlusInfo::mutable_app_power() {
  std::string* _s = _internal_mutable_app_power();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_power)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_power() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_power_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_power(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_power_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_power() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_power_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_power() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_power)
  return _impl_.app_power_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_power(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_power_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_power_.IsDefault()) {
          _impl_.app_power_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_power)
}

// string app_company = 11;
inline void TiebaPlusInfo::clear_app_company() {
  _impl_.app_company_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::app_company() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.app_company)
  return _internal_app_company();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_app_company(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_company_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.app_company)
}
inline std::string* TiebaPlusInfo::mutable_app_company() {
  std::string* _s = _internal_mutable_app_company();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.app_company)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_app_company() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_company_.Get();
}
inline void TiebaPlusInfo::_internal_set_app_company(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.app_company_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_app_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.app_company_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_app_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.app_company)
  return _impl_.app_company_.Release();
}
inline void TiebaPlusInfo::set_allocated_app_company(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_company_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_company_.IsDefault()) {
          _impl_.app_company_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.app_company)
}

// int32 target_type = 12;
inline void TiebaPlusInfo::clear_target_type() {
  _impl_.target_type_ = 0;
}
inline ::int32_t TiebaPlusInfo::target_type() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.target_type)
  return _internal_target_type();
}
inline void TiebaPlusInfo::set_target_type(::int32_t value) {
  _internal_set_target_type(value);
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.target_type)
}
inline ::int32_t TiebaPlusInfo::_internal_target_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_type_;
}
inline void TiebaPlusInfo::_internal_set_target_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_type_ = value;
}

// int32 h5_jump_type = 13;
inline void TiebaPlusInfo::clear_h5_jump_type() {
  _impl_.h5_jump_type_ = 0;
}
inline ::int32_t TiebaPlusInfo::h5_jump_type() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.h5_jump_type)
  return _internal_h5_jump_type();
}
inline void TiebaPlusInfo::set_h5_jump_type(::int32_t value) {
  _internal_set_h5_jump_type(value);
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.h5_jump_type)
}
inline ::int32_t TiebaPlusInfo::_internal_h5_jump_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.h5_jump_type_;
}
inline void TiebaPlusInfo::_internal_set_h5_jump_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h5_jump_type_ = value;
}

// string h5_jump_number = 14;
inline void TiebaPlusInfo::clear_h5_jump_number() {
  _impl_.h5_jump_number_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::h5_jump_number() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.h5_jump_number)
  return _internal_h5_jump_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_h5_jump_number(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h5_jump_number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.h5_jump_number)
}
inline std::string* TiebaPlusInfo::mutable_h5_jump_number() {
  std::string* _s = _internal_mutable_h5_jump_number();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.h5_jump_number)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_h5_jump_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.h5_jump_number_.Get();
}
inline void TiebaPlusInfo::_internal_set_h5_jump_number(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h5_jump_number_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_h5_jump_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.h5_jump_number_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_h5_jump_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.h5_jump_number)
  return _impl_.h5_jump_number_.Release();
}
inline void TiebaPlusInfo::set_allocated_h5_jump_number(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.h5_jump_number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.h5_jump_number_.IsDefault()) {
          _impl_.h5_jump_number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.h5_jump_number)
}

// string h5_jump_param = 15;
inline void TiebaPlusInfo::clear_h5_jump_param() {
  _impl_.h5_jump_param_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::h5_jump_param() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.h5_jump_param)
  return _internal_h5_jump_param();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_h5_jump_param(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h5_jump_param_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.h5_jump_param)
}
inline std::string* TiebaPlusInfo::mutable_h5_jump_param() {
  std::string* _s = _internal_mutable_h5_jump_param();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.h5_jump_param)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_h5_jump_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.h5_jump_param_.Get();
}
inline void TiebaPlusInfo::_internal_set_h5_jump_param(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.h5_jump_param_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_h5_jump_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.h5_jump_param_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_h5_jump_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.h5_jump_param)
  return _impl_.h5_jump_param_.Release();
}
inline void TiebaPlusInfo::set_allocated_h5_jump_param(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.h5_jump_param_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.h5_jump_param_.IsDefault()) {
          _impl_.h5_jump_param_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.h5_jump_param)
}

// int32 jump_type = 16;
inline void TiebaPlusInfo::clear_jump_type() {
  _impl_.jump_type_ = 0;
}
inline ::int32_t TiebaPlusInfo::jump_type() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.jump_type)
  return _internal_jump_type();
}
inline void TiebaPlusInfo::set_jump_type(::int32_t value) {
  _internal_set_jump_type(value);
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.jump_type)
}
inline ::int32_t TiebaPlusInfo::_internal_jump_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jump_type_;
}
inline void TiebaPlusInfo::_internal_set_jump_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jump_type_ = value;
}

// string item_id = 17;
inline void TiebaPlusInfo::clear_item_id() {
  _impl_.item_id_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::item_id() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.item_id)
  return _internal_item_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_item_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.item_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.item_id)
}
inline std::string* TiebaPlusInfo::mutable_item_id() {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.item_id)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_item_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.item_id_.Get();
}
inline void TiebaPlusInfo::_internal_set_item_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.item_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.item_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.item_id)
  return _impl_.item_id_.Release();
}
inline void TiebaPlusInfo::set_allocated_item_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.item_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.item_id_.IsDefault()) {
          _impl_.item_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.item_id)
}

// int32 is_appoint = 18;
inline void TiebaPlusInfo::clear_is_appoint() {
  _impl_.is_appoint_ = 0;
}
inline ::int32_t TiebaPlusInfo::is_appoint() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.is_appoint)
  return _internal_is_appoint();
}
inline void TiebaPlusInfo::set_is_appoint(::int32_t value) {
  _internal_set_is_appoint(value);
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.is_appoint)
}
inline ::int32_t TiebaPlusInfo::_internal_is_appoint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_appoint_;
}
inline void TiebaPlusInfo::_internal_set_is_appoint(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_appoint_ = value;
}

// .PluginUser plugin_user = 19;
inline bool TiebaPlusInfo::has_plugin_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plugin_user_ != nullptr);
  return value;
}
inline const ::PluginUser& TiebaPlusInfo::_internal_plugin_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PluginUser* p = _impl_.plugin_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::PluginUser&>(::_PluginUser_default_instance_);
}
inline const ::PluginUser& TiebaPlusInfo::plugin_user() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.plugin_user)
  return _internal_plugin_user();
}
inline void TiebaPlusInfo::unsafe_arena_set_allocated_plugin_user(::PluginUser* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.plugin_user_);
  }
  _impl_.plugin_user_ = reinterpret_cast<::PluginUser*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TiebaPlusInfo.plugin_user)
}
inline ::PluginUser* TiebaPlusInfo::release_plugin_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PluginUser* released = _impl_.plugin_user_;
  _impl_.plugin_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PluginUser* TiebaPlusInfo::unsafe_arena_release_plugin_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.plugin_user)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PluginUser* temp = _impl_.plugin_user_;
  _impl_.plugin_user_ = nullptr;
  return temp;
}
inline ::PluginUser* TiebaPlusInfo::_internal_mutable_plugin_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.plugin_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::PluginUser>(GetArenaForAllocation());
    _impl_.plugin_user_ = reinterpret_cast<::PluginUser*>(p);
  }
  return _impl_.plugin_user_;
}
inline ::PluginUser* TiebaPlusInfo::mutable_plugin_user() {
  ::PluginUser* _msg = _internal_mutable_plugin_user();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.plugin_user)
  return _msg;
}
inline void TiebaPlusInfo::set_allocated_plugin_user(::PluginUser* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.plugin_user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.plugin_user_ = reinterpret_cast<::PluginUser*>(value);
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.plugin_user)
}

// string forum_name = 20;
inline void TiebaPlusInfo::clear_forum_name() {
  _impl_.forum_name_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::forum_name() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.forum_name)
  return _internal_forum_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_forum_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.forum_name)
}
inline std::string* TiebaPlusInfo::mutable_forum_name() {
  std::string* _s = _internal_mutable_forum_name();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.forum_name)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_forum_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_name_.Get();
}
inline void TiebaPlusInfo::_internal_set_forum_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.forum_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.forum_name)
  return _impl_.forum_name_.Release();
}
inline void TiebaPlusInfo::set_allocated_forum_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forum_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.forum_name_.IsDefault()) {
          _impl_.forum_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.forum_name)
}

// int32 jump_setting = 21;
inline void TiebaPlusInfo::clear_jump_setting() {
  _impl_.jump_setting_ = 0;
}
inline ::int32_t TiebaPlusInfo::jump_setting() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.jump_setting)
  return _internal_jump_setting();
}
inline void TiebaPlusInfo::set_jump_setting(::int32_t value) {
  _internal_set_jump_setting(value);
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.jump_setting)
}
inline ::int32_t TiebaPlusInfo::_internal_jump_setting() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jump_setting_;
}
inline void TiebaPlusInfo::_internal_set_jump_setting(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jump_setting_ = value;
}

// string wx_thumbnail = 22;
inline void TiebaPlusInfo::clear_wx_thumbnail() {
  _impl_.wx_thumbnail_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::wx_thumbnail() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.wx_thumbnail)
  return _internal_wx_thumbnail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_wx_thumbnail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wx_thumbnail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.wx_thumbnail)
}
inline std::string* TiebaPlusInfo::mutable_wx_thumbnail() {
  std::string* _s = _internal_mutable_wx_thumbnail();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.wx_thumbnail)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_wx_thumbnail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wx_thumbnail_.Get();
}
inline void TiebaPlusInfo::_internal_set_wx_thumbnail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wx_thumbnail_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_wx_thumbnail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.wx_thumbnail_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_wx_thumbnail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.wx_thumbnail)
  return _impl_.wx_thumbnail_.Release();
}
inline void TiebaPlusInfo::set_allocated_wx_thumbnail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wx_thumbnail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.wx_thumbnail_.IsDefault()) {
          _impl_.wx_thumbnail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.wx_thumbnail)
}

// string button_desc = 23;
inline void TiebaPlusInfo::clear_button_desc() {
  _impl_.button_desc_.ClearToEmpty();
}
inline const std::string& TiebaPlusInfo::button_desc() const {
  // @@protoc_insertion_point(field_get:TiebaPlusInfo.button_desc)
  return _internal_button_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TiebaPlusInfo::set_button_desc(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.button_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TiebaPlusInfo.button_desc)
}
inline std::string* TiebaPlusInfo::mutable_button_desc() {
  std::string* _s = _internal_mutable_button_desc();
  // @@protoc_insertion_point(field_mutable:TiebaPlusInfo.button_desc)
  return _s;
}
inline const std::string& TiebaPlusInfo::_internal_button_desc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.button_desc_.Get();
}
inline void TiebaPlusInfo::_internal_set_button_desc(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.button_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::_internal_mutable_button_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.button_desc_.Mutable( GetArenaForAllocation());
}
inline std::string* TiebaPlusInfo::release_button_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TiebaPlusInfo.button_desc)
  return _impl_.button_desc_.Release();
}
inline void TiebaPlusInfo::set_allocated_button_desc(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.button_desc_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.button_desc_.IsDefault()) {
          _impl_.button_desc_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TiebaPlusInfo.button_desc)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TiebaPlusInfo_2eproto_2epb_2eh
