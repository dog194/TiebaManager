// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Post.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Post_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Post_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "PbContent.pb.h"
#include "SubPostList.pb.h"
#include "Agree.pb.h"
#include "SimpleForum.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Post_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Post_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Post_2eproto;
class Post;
struct PostDefaultTypeInternal;
extern PostDefaultTypeInternal _Post_default_instance_;
class Post_CustomFigure;
struct Post_CustomFigureDefaultTypeInternal;
extern Post_CustomFigureDefaultTypeInternal _Post_CustomFigure_default_instance_;
class Post_CustomState;
struct Post_CustomStateDefaultTypeInternal;
extern Post_CustomStateDefaultTypeInternal _Post_CustomState_default_instance_;
class Post_SignatureData;
struct Post_SignatureDataDefaultTypeInternal;
extern Post_SignatureDataDefaultTypeInternal _Post_SignatureData_default_instance_;
class Post_SignatureData_SignatureContent;
struct Post_SignatureData_SignatureContentDefaultTypeInternal;
extern Post_SignatureData_SignatureContentDefaultTypeInternal _Post_SignatureData_SignatureContent_default_instance_;
class Post_SubPost;
struct Post_SubPostDefaultTypeInternal;
extern Post_SubPostDefaultTypeInternal _Post_SubPost_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Post_SubPost final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Post.SubPost) */ {
 public:
  inline Post_SubPost() : Post_SubPost(nullptr) {}
  ~Post_SubPost() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Post_SubPost(::google::protobuf::internal::ConstantInitialized);

  Post_SubPost(const Post_SubPost& from);
  Post_SubPost(Post_SubPost&& from) noexcept
    : Post_SubPost() {
    *this = ::std::move(from);
  }

  inline Post_SubPost& operator=(const Post_SubPost& from) {
    CopyFrom(from);
    return *this;
  }
  inline Post_SubPost& operator=(Post_SubPost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Post_SubPost& default_instance() {
    return *internal_default_instance();
  }
  static inline const Post_SubPost* internal_default_instance() {
    return reinterpret_cast<const Post_SubPost*>(
               &_Post_SubPost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Post_SubPost& a, Post_SubPost& b) {
    a.Swap(&b);
  }
  inline void Swap(Post_SubPost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Post_SubPost* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Post_SubPost* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Post_SubPost>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Post_SubPost& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Post_SubPost& from) {
    Post_SubPost::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Post_SubPost* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Post.SubPost";
  }
  protected:
  explicit Post_SubPost(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubPostListFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .SubPostList sub_post_list = 2;
  int sub_post_list_size() const;
  private:
  int _internal_sub_post_list_size() const;

  public:
  void clear_sub_post_list() ;
  ::SubPostList* mutable_sub_post_list(int index);
  ::google::protobuf::RepeatedPtrField< ::SubPostList >*
      mutable_sub_post_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::SubPostList>& _internal_sub_post_list() const;
  ::google::protobuf::RepeatedPtrField<::SubPostList>* _internal_mutable_sub_post_list();
  public:
  const ::SubPostList& sub_post_list(int index) const;
  ::SubPostList* add_sub_post_list();
  const ::google::protobuf::RepeatedPtrField< ::SubPostList >&
      sub_post_list() const;
  // uint64 pid = 1;
  void clear_pid() ;
  ::uint64_t pid() const;
  void set_pid(::uint64_t value);

  private:
  ::uint64_t _internal_pid() const;
  void _internal_set_pid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Post.SubPost)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::SubPostList > sub_post_list_;
    ::uint64_t pid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Post_2eproto;
};// -------------------------------------------------------------------

class Post_SignatureData_SignatureContent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Post.SignatureData.SignatureContent) */ {
 public:
  inline Post_SignatureData_SignatureContent() : Post_SignatureData_SignatureContent(nullptr) {}
  ~Post_SignatureData_SignatureContent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Post_SignatureData_SignatureContent(::google::protobuf::internal::ConstantInitialized);

  Post_SignatureData_SignatureContent(const Post_SignatureData_SignatureContent& from);
  Post_SignatureData_SignatureContent(Post_SignatureData_SignatureContent&& from) noexcept
    : Post_SignatureData_SignatureContent() {
    *this = ::std::move(from);
  }

  inline Post_SignatureData_SignatureContent& operator=(const Post_SignatureData_SignatureContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Post_SignatureData_SignatureContent& operator=(Post_SignatureData_SignatureContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Post_SignatureData_SignatureContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Post_SignatureData_SignatureContent* internal_default_instance() {
    return reinterpret_cast<const Post_SignatureData_SignatureContent*>(
               &_Post_SignatureData_SignatureContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Post_SignatureData_SignatureContent& a, Post_SignatureData_SignatureContent& b) {
    a.Swap(&b);
  }
  inline void Swap(Post_SignatureData_SignatureContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Post_SignatureData_SignatureContent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Post_SignatureData_SignatureContent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Post_SignatureData_SignatureContent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Post_SignatureData_SignatureContent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Post_SignatureData_SignatureContent& from) {
    Post_SignatureData_SignatureContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Post_SignatureData_SignatureContent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Post.SignatureData.SignatureContent";
  }
  protected:
  explicit Post_SignatureData_SignatureContent(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // int32 type = 1;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Post.SignatureData.SignatureContent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::int32_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Post_2eproto;
};// -------------------------------------------------------------------

class Post_SignatureData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Post.SignatureData) */ {
 public:
  inline Post_SignatureData() : Post_SignatureData(nullptr) {}
  ~Post_SignatureData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Post_SignatureData(::google::protobuf::internal::ConstantInitialized);

  Post_SignatureData(const Post_SignatureData& from);
  Post_SignatureData(Post_SignatureData&& from) noexcept
    : Post_SignatureData() {
    *this = ::std::move(from);
  }

  inline Post_SignatureData& operator=(const Post_SignatureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Post_SignatureData& operator=(Post_SignatureData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Post_SignatureData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Post_SignatureData* internal_default_instance() {
    return reinterpret_cast<const Post_SignatureData*>(
               &_Post_SignatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Post_SignatureData& a, Post_SignatureData& b) {
    a.Swap(&b);
  }
  inline void Swap(Post_SignatureData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Post_SignatureData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Post_SignatureData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Post_SignatureData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Post_SignatureData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Post_SignatureData& from) {
    Post_SignatureData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Post_SignatureData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Post.SignatureData";
  }
  protected:
  explicit Post_SignatureData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Post_SignatureData_SignatureContent SignatureContent;

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kFontKeyNameFieldNumber = 2,
    kFontColorFieldNumber = 3,
    kSignatureIdFieldNumber = 1,
  };
  // repeated .Post.SignatureData.SignatureContent content = 4;
  int content_size() const;
  private:
  int _internal_content_size() const;

  public:
  void clear_content() ;
  ::Post_SignatureData_SignatureContent* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::Post_SignatureData_SignatureContent >*
      mutable_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::Post_SignatureData_SignatureContent>& _internal_content() const;
  ::google::protobuf::RepeatedPtrField<::Post_SignatureData_SignatureContent>* _internal_mutable_content();
  public:
  const ::Post_SignatureData_SignatureContent& content(int index) const;
  ::Post_SignatureData_SignatureContent* add_content();
  const ::google::protobuf::RepeatedPtrField< ::Post_SignatureData_SignatureContent >&
      content() const;
  // string fontKeyName = 2;
  void clear_fontkeyname() ;
  const std::string& fontkeyname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fontkeyname(Arg_&& arg, Args_... args);
  std::string* mutable_fontkeyname();
  PROTOBUF_NODISCARD std::string* release_fontkeyname();
  void set_allocated_fontkeyname(std::string* ptr);

  private:
  const std::string& _internal_fontkeyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fontkeyname(
      const std::string& value);
  std::string* _internal_mutable_fontkeyname();

  public:
  // string fontColor = 3;
  void clear_fontcolor() ;
  const std::string& fontcolor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fontcolor(Arg_&& arg, Args_... args);
  std::string* mutable_fontcolor();
  PROTOBUF_NODISCARD std::string* release_fontcolor();
  void set_allocated_fontcolor(std::string* ptr);

  private:
  const std::string& _internal_fontcolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fontcolor(
      const std::string& value);
  std::string* _internal_mutable_fontcolor();

  public:
  // int32 signature_id = 1;
  void clear_signature_id() ;
  ::int32_t signature_id() const;
  void set_signature_id(::int32_t value);

  private:
  ::int32_t _internal_signature_id() const;
  void _internal_set_signature_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Post.SignatureData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 47, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::Post_SignatureData_SignatureContent > content_;
    ::google::protobuf::internal::ArenaStringPtr fontkeyname_;
    ::google::protobuf::internal::ArenaStringPtr fontcolor_;
    ::int32_t signature_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Post_2eproto;
};// -------------------------------------------------------------------

class Post_CustomFigure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Post.CustomFigure) */ {
 public:
  inline Post_CustomFigure() : Post_CustomFigure(nullptr) {}
  ~Post_CustomFigure() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Post_CustomFigure(::google::protobuf::internal::ConstantInitialized);

  Post_CustomFigure(const Post_CustomFigure& from);
  Post_CustomFigure(Post_CustomFigure&& from) noexcept
    : Post_CustomFigure() {
    *this = ::std::move(from);
  }

  inline Post_CustomFigure& operator=(const Post_CustomFigure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Post_CustomFigure& operator=(Post_CustomFigure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Post_CustomFigure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Post_CustomFigure* internal_default_instance() {
    return reinterpret_cast<const Post_CustomFigure*>(
               &_Post_CustomFigure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Post_CustomFigure& a, Post_CustomFigure& b) {
    a.Swap(&b);
  }
  inline void Swap(Post_CustomFigure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Post_CustomFigure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Post_CustomFigure* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Post_CustomFigure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Post_CustomFigure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Post_CustomFigure& from) {
    Post_CustomFigure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Post_CustomFigure* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Post.CustomFigure";
  }
  protected:
  explicit Post_CustomFigure(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundValueFieldNumber = 3,
  };
  // string background_value = 3;
  void clear_background_value() ;
  const std::string& background_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_background_value(Arg_&& arg, Args_... args);
  std::string* mutable_background_value();
  PROTOBUF_NODISCARD std::string* release_background_value();
  void set_allocated_background_value(std::string* ptr);

  private:
  const std::string& _internal_background_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_background_value(
      const std::string& value);
  std::string* _internal_mutable_background_value();

  public:
  // @@protoc_insertion_point(class_scope:Post.CustomFigure)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr background_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Post_2eproto;
};// -------------------------------------------------------------------

class Post_CustomState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Post.CustomState) */ {
 public:
  inline Post_CustomState() : Post_CustomState(nullptr) {}
  ~Post_CustomState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Post_CustomState(::google::protobuf::internal::ConstantInitialized);

  Post_CustomState(const Post_CustomState& from);
  Post_CustomState(Post_CustomState&& from) noexcept
    : Post_CustomState() {
    *this = ::std::move(from);
  }

  inline Post_CustomState& operator=(const Post_CustomState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Post_CustomState& operator=(Post_CustomState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Post_CustomState& default_instance() {
    return *internal_default_instance();
  }
  static inline const Post_CustomState* internal_default_instance() {
    return reinterpret_cast<const Post_CustomState*>(
               &_Post_CustomState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Post_CustomState& a, Post_CustomState& b) {
    a.Swap(&b);
  }
  inline void Swap(Post_CustomState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Post_CustomState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Post_CustomState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Post_CustomState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Post_CustomState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Post_CustomState& from) {
    Post_CustomState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Post_CustomState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Post.CustomState";
  }
  protected:
  explicit Post_CustomState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
  };
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:Post.CustomState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 32, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Post_2eproto;
};// -------------------------------------------------------------------

class Post final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Post) */ {
 public:
  inline Post() : Post(nullptr) {}
  ~Post() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Post(::google::protobuf::internal::ConstantInitialized);

  Post(const Post& from);
  Post(Post&& from) noexcept
    : Post() {
    *this = ::std::move(from);
  }

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }
  inline Post& operator=(Post&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Post& default_instance() {
    return *internal_default_instance();
  }
  static inline const Post* internal_default_instance() {
    return reinterpret_cast<const Post*>(
               &_Post_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Post& a, Post& b) {
    a.Swap(&b);
  }
  inline void Swap(Post* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Post* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Post* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Post>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Post& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Post& from) {
    Post::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Post* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Post";
  }
  protected:
  explicit Post(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Post_SubPost SubPost;
  typedef Post_SignatureData SignatureData;
  typedef Post_CustomFigure CustomFigure;
  typedef Post_CustomState CustomState;

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 5,
    kTitleFieldNumber = 2,
    kSubPostListFieldNumber = 15,
    kSignatureFieldNumber = 21,
    kAuthorFieldNumber = 23,
    kAgreeFieldNumber = 37,
    kFromForumFieldNumber = 38,
    kCustomFigureFieldNumber = 60,
    kCustomStateFieldNumber = 61,
    kIdFieldNumber = 1,
    kFloorFieldNumber = 3,
    kTimeFieldNumber = 4,
    kAuthorIdFieldNumber = 19,
    kTidFieldNumber = 46,
    kSubPostNumberFieldNumber = 13,
  };
  // repeated .PbContent content = 5;
  int content_size() const;
  private:
  int _internal_content_size() const;

  public:
  void clear_content() ;
  ::PbContent* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PbContent>& _internal_content() const;
  ::google::protobuf::RepeatedPtrField<::PbContent>* _internal_mutable_content();
  public:
  const ::PbContent& content(int index) const;
  ::PbContent* add_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      content() const;
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .Post.SubPost sub_post_list = 15;
  bool has_sub_post_list() const;
  void clear_sub_post_list() ;
  const ::Post_SubPost& sub_post_list() const;
  PROTOBUF_NODISCARD ::Post_SubPost* release_sub_post_list();
  ::Post_SubPost* mutable_sub_post_list();
  void set_allocated_sub_post_list(::Post_SubPost* value);
  void unsafe_arena_set_allocated_sub_post_list(::Post_SubPost* value);
  ::Post_SubPost* unsafe_arena_release_sub_post_list();

  private:
  const ::Post_SubPost& _internal_sub_post_list() const;
  ::Post_SubPost* _internal_mutable_sub_post_list();

  public:
  // .Post.SignatureData signature = 21;
  bool has_signature() const;
  void clear_signature() ;
  const ::Post_SignatureData& signature() const;
  PROTOBUF_NODISCARD ::Post_SignatureData* release_signature();
  ::Post_SignatureData* mutable_signature();
  void set_allocated_signature(::Post_SignatureData* value);
  void unsafe_arena_set_allocated_signature(::Post_SignatureData* value);
  ::Post_SignatureData* unsafe_arena_release_signature();

  private:
  const ::Post_SignatureData& _internal_signature() const;
  ::Post_SignatureData* _internal_mutable_signature();

  public:
  // .User author = 23;
  bool has_author() const;
  void clear_author() ;
  const ::User& author() const;
  PROTOBUF_NODISCARD ::User* release_author();
  ::User* mutable_author();
  void set_allocated_author(::User* value);
  void unsafe_arena_set_allocated_author(::User* value);
  ::User* unsafe_arena_release_author();

  private:
  const ::User& _internal_author() const;
  ::User* _internal_mutable_author();

  public:
  // .Agree agree = 37;
  bool has_agree() const;
  void clear_agree() ;
  const ::Agree& agree() const;
  PROTOBUF_NODISCARD ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* value);
  void unsafe_arena_set_allocated_agree(::Agree* value);
  ::Agree* unsafe_arena_release_agree();

  private:
  const ::Agree& _internal_agree() const;
  ::Agree* _internal_mutable_agree();

  public:
  // .SimpleForum from_forum = 38;
  bool has_from_forum() const;
  void clear_from_forum() ;
  const ::SimpleForum& from_forum() const;
  PROTOBUF_NODISCARD ::SimpleForum* release_from_forum();
  ::SimpleForum* mutable_from_forum();
  void set_allocated_from_forum(::SimpleForum* value);
  void unsafe_arena_set_allocated_from_forum(::SimpleForum* value);
  ::SimpleForum* unsafe_arena_release_from_forum();

  private:
  const ::SimpleForum& _internal_from_forum() const;
  ::SimpleForum* _internal_mutable_from_forum();

  public:
  // .Post.CustomFigure custom_figure = 60;
  bool has_custom_figure() const;
  void clear_custom_figure() ;
  const ::Post_CustomFigure& custom_figure() const;
  PROTOBUF_NODISCARD ::Post_CustomFigure* release_custom_figure();
  ::Post_CustomFigure* mutable_custom_figure();
  void set_allocated_custom_figure(::Post_CustomFigure* value);
  void unsafe_arena_set_allocated_custom_figure(::Post_CustomFigure* value);
  ::Post_CustomFigure* unsafe_arena_release_custom_figure();

  private:
  const ::Post_CustomFigure& _internal_custom_figure() const;
  ::Post_CustomFigure* _internal_mutable_custom_figure();

  public:
  // .Post.CustomState custom_state = 61;
  bool has_custom_state() const;
  void clear_custom_state() ;
  const ::Post_CustomState& custom_state() const;
  PROTOBUF_NODISCARD ::Post_CustomState* release_custom_state();
  ::Post_CustomState* mutable_custom_state();
  void set_allocated_custom_state(::Post_CustomState* value);
  void unsafe_arena_set_allocated_custom_state(::Post_CustomState* value);
  ::Post_CustomState* unsafe_arena_release_custom_state();

  private:
  const ::Post_CustomState& _internal_custom_state() const;
  ::Post_CustomState* _internal_mutable_custom_state();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // uint32 floor = 3;
  void clear_floor() ;
  ::uint32_t floor() const;
  void set_floor(::uint32_t value);

  private:
  ::uint32_t _internal_floor() const;
  void _internal_set_floor(::uint32_t value);

  public:
  // uint32 time = 4;
  void clear_time() ;
  ::uint32_t time() const;
  void set_time(::uint32_t value);

  private:
  ::uint32_t _internal_time() const;
  void _internal_set_time(::uint32_t value);

  public:
  // int64 author_id = 19;
  void clear_author_id() ;
  ::int64_t author_id() const;
  void set_author_id(::int64_t value);

  private:
  ::int64_t _internal_author_id() const;
  void _internal_set_author_id(::int64_t value);

  public:
  // int64 tid = 46;
  void clear_tid() ;
  ::int64_t tid() const;
  void set_tid(::int64_t value);

  private:
  ::int64_t _internal_tid() const;
  void _internal_set_tid(::int64_t value);

  public:
  // uint32 sub_post_number = 13;
  void clear_sub_post_number() ;
  ::uint32_t sub_post_number() const;
  void set_sub_post_number(::uint32_t value);

  private:
  ::uint32_t _internal_sub_post_number() const;
  void _internal_set_sub_post_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Post)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15, 8, 26, 9> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::PbContent > content_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::Post_SubPost* sub_post_list_;
    ::Post_SignatureData* signature_;
    ::User* author_;
    ::Agree* agree_;
    ::SimpleForum* from_forum_;
    ::Post_CustomFigure* custom_figure_;
    ::Post_CustomState* custom_state_;
    ::int64_t id_;
    ::uint32_t floor_;
    ::uint32_t time_;
    ::int64_t author_id_;
    ::int64_t tid_;
    ::uint32_t sub_post_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Post_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Post_SubPost

// uint64 pid = 1;
inline void Post_SubPost::clear_pid() {
  _impl_.pid_ = ::uint64_t{0u};
}
inline ::uint64_t Post_SubPost::pid() const {
  // @@protoc_insertion_point(field_get:Post.SubPost.pid)
  return _internal_pid();
}
inline void Post_SubPost::set_pid(::uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Post.SubPost.pid)
}
inline ::uint64_t Post_SubPost::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void Post_SubPost::_internal_set_pid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// repeated .SubPostList sub_post_list = 2;
inline int Post_SubPost::_internal_sub_post_list_size() const {
  return _internal_sub_post_list().size();
}
inline int Post_SubPost::sub_post_list_size() const {
  return _internal_sub_post_list_size();
}
inline ::SubPostList* Post_SubPost::mutable_sub_post_list(int index) {
  // @@protoc_insertion_point(field_mutable:Post.SubPost.sub_post_list)
  return _internal_mutable_sub_post_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SubPostList >*
Post_SubPost::mutable_sub_post_list() {
  // @@protoc_insertion_point(field_mutable_list:Post.SubPost.sub_post_list)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sub_post_list();
}
inline const ::SubPostList& Post_SubPost::sub_post_list(int index) const {
  // @@protoc_insertion_point(field_get:Post.SubPost.sub_post_list)
    return _internal_sub_post_list().Get(index);
}
inline ::SubPostList* Post_SubPost::add_sub_post_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::SubPostList* _add = _internal_mutable_sub_post_list()->Add();
  // @@protoc_insertion_point(field_add:Post.SubPost.sub_post_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::SubPostList >&
Post_SubPost::sub_post_list() const {
  // @@protoc_insertion_point(field_list:Post.SubPost.sub_post_list)
  return _internal_sub_post_list();
}
inline const ::google::protobuf::RepeatedPtrField<::SubPostList>&
Post_SubPost::_internal_sub_post_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_post_list_;
}
inline ::google::protobuf::RepeatedPtrField<::SubPostList>*
Post_SubPost::_internal_mutable_sub_post_list() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sub_post_list_;
}

// -------------------------------------------------------------------

// Post_SignatureData_SignatureContent

// int32 type = 1;
inline void Post_SignatureData_SignatureContent::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t Post_SignatureData_SignatureContent::type() const {
  // @@protoc_insertion_point(field_get:Post.SignatureData.SignatureContent.type)
  return _internal_type();
}
inline void Post_SignatureData_SignatureContent::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Post.SignatureData.SignatureContent.type)
}
inline ::int32_t Post_SignatureData_SignatureContent::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void Post_SignatureData_SignatureContent::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string text = 2;
inline void Post_SignatureData_SignatureContent::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Post_SignatureData_SignatureContent::text() const {
  // @@protoc_insertion_point(field_get:Post.SignatureData.SignatureContent.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Post_SignatureData_SignatureContent::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Post.SignatureData.SignatureContent.text)
}
inline std::string* Post_SignatureData_SignatureContent::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Post.SignatureData.SignatureContent.text)
  return _s;
}
inline const std::string& Post_SignatureData_SignatureContent::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void Post_SignatureData_SignatureContent::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Post_SignatureData_SignatureContent::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* Post_SignatureData_SignatureContent::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.SignatureData.SignatureContent.text)
  return _impl_.text_.Release();
}
inline void Post_SignatureData_SignatureContent::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Post.SignatureData.SignatureContent.text)
}

// -------------------------------------------------------------------

// Post_SignatureData

// int32 signature_id = 1;
inline void Post_SignatureData::clear_signature_id() {
  _impl_.signature_id_ = 0;
}
inline ::int32_t Post_SignatureData::signature_id() const {
  // @@protoc_insertion_point(field_get:Post.SignatureData.signature_id)
  return _internal_signature_id();
}
inline void Post_SignatureData::set_signature_id(::int32_t value) {
  _internal_set_signature_id(value);
  // @@protoc_insertion_point(field_set:Post.SignatureData.signature_id)
}
inline ::int32_t Post_SignatureData::_internal_signature_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signature_id_;
}
inline void Post_SignatureData::_internal_set_signature_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signature_id_ = value;
}

// string fontKeyName = 2;
inline void Post_SignatureData::clear_fontkeyname() {
  _impl_.fontkeyname_.ClearToEmpty();
}
inline const std::string& Post_SignatureData::fontkeyname() const {
  // @@protoc_insertion_point(field_get:Post.SignatureData.fontKeyName)
  return _internal_fontkeyname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Post_SignatureData::set_fontkeyname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fontkeyname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Post.SignatureData.fontKeyName)
}
inline std::string* Post_SignatureData::mutable_fontkeyname() {
  std::string* _s = _internal_mutable_fontkeyname();
  // @@protoc_insertion_point(field_mutable:Post.SignatureData.fontKeyName)
  return _s;
}
inline const std::string& Post_SignatureData::_internal_fontkeyname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fontkeyname_.Get();
}
inline void Post_SignatureData::_internal_set_fontkeyname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fontkeyname_.Set(value, GetArenaForAllocation());
}
inline std::string* Post_SignatureData::_internal_mutable_fontkeyname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.fontkeyname_.Mutable( GetArenaForAllocation());
}
inline std::string* Post_SignatureData::release_fontkeyname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.SignatureData.fontKeyName)
  return _impl_.fontkeyname_.Release();
}
inline void Post_SignatureData::set_allocated_fontkeyname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fontkeyname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fontkeyname_.IsDefault()) {
          _impl_.fontkeyname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Post.SignatureData.fontKeyName)
}

// string fontColor = 3;
inline void Post_SignatureData::clear_fontcolor() {
  _impl_.fontcolor_.ClearToEmpty();
}
inline const std::string& Post_SignatureData::fontcolor() const {
  // @@protoc_insertion_point(field_get:Post.SignatureData.fontColor)
  return _internal_fontcolor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Post_SignatureData::set_fontcolor(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fontcolor_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Post.SignatureData.fontColor)
}
inline std::string* Post_SignatureData::mutable_fontcolor() {
  std::string* _s = _internal_mutable_fontcolor();
  // @@protoc_insertion_point(field_mutable:Post.SignatureData.fontColor)
  return _s;
}
inline const std::string& Post_SignatureData::_internal_fontcolor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fontcolor_.Get();
}
inline void Post_SignatureData::_internal_set_fontcolor(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fontcolor_.Set(value, GetArenaForAllocation());
}
inline std::string* Post_SignatureData::_internal_mutable_fontcolor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.fontcolor_.Mutable( GetArenaForAllocation());
}
inline std::string* Post_SignatureData::release_fontcolor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.SignatureData.fontColor)
  return _impl_.fontcolor_.Release();
}
inline void Post_SignatureData::set_allocated_fontcolor(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fontcolor_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fontcolor_.IsDefault()) {
          _impl_.fontcolor_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Post.SignatureData.fontColor)
}

// repeated .Post.SignatureData.SignatureContent content = 4;
inline int Post_SignatureData::_internal_content_size() const {
  return _internal_content().size();
}
inline int Post_SignatureData::content_size() const {
  return _internal_content_size();
}
inline void Post_SignatureData::clear_content() {
  _internal_mutable_content()->Clear();
}
inline ::Post_SignatureData_SignatureContent* Post_SignatureData::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:Post.SignatureData.content)
  return _internal_mutable_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Post_SignatureData_SignatureContent >*
Post_SignatureData::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:Post.SignatureData.content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_content();
}
inline const ::Post_SignatureData_SignatureContent& Post_SignatureData::content(int index) const {
  // @@protoc_insertion_point(field_get:Post.SignatureData.content)
    return _internal_content().Get(index);
}
inline ::Post_SignatureData_SignatureContent* Post_SignatureData::add_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Post_SignatureData_SignatureContent* _add = _internal_mutable_content()->Add();
  // @@protoc_insertion_point(field_add:Post.SignatureData.content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::Post_SignatureData_SignatureContent >&
Post_SignatureData::content() const {
  // @@protoc_insertion_point(field_list:Post.SignatureData.content)
  return _internal_content();
}
inline const ::google::protobuf::RepeatedPtrField<::Post_SignatureData_SignatureContent>&
Post_SignatureData::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_;
}
inline ::google::protobuf::RepeatedPtrField<::Post_SignatureData_SignatureContent>*
Post_SignatureData::_internal_mutable_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.content_;
}

// -------------------------------------------------------------------

// Post_CustomFigure

// string background_value = 3;
inline void Post_CustomFigure::clear_background_value() {
  _impl_.background_value_.ClearToEmpty();
}
inline const std::string& Post_CustomFigure::background_value() const {
  // @@protoc_insertion_point(field_get:Post.CustomFigure.background_value)
  return _internal_background_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Post_CustomFigure::set_background_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.background_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Post.CustomFigure.background_value)
}
inline std::string* Post_CustomFigure::mutable_background_value() {
  std::string* _s = _internal_mutable_background_value();
  // @@protoc_insertion_point(field_mutable:Post.CustomFigure.background_value)
  return _s;
}
inline const std::string& Post_CustomFigure::_internal_background_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.background_value_.Get();
}
inline void Post_CustomFigure::_internal_set_background_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.background_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Post_CustomFigure::_internal_mutable_background_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.background_value_.Mutable( GetArenaForAllocation());
}
inline std::string* Post_CustomFigure::release_background_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.CustomFigure.background_value)
  return _impl_.background_value_.Release();
}
inline void Post_CustomFigure::set_allocated_background_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.background_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.background_value_.IsDefault()) {
          _impl_.background_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Post.CustomFigure.background_value)
}

// -------------------------------------------------------------------

// Post_CustomState

// string content = 2;
inline void Post_CustomState::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Post_CustomState::content() const {
  // @@protoc_insertion_point(field_get:Post.CustomState.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Post_CustomState::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Post.CustomState.content)
}
inline std::string* Post_CustomState::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Post.CustomState.content)
  return _s;
}
inline const std::string& Post_CustomState::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void Post_CustomState::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Post_CustomState::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* Post_CustomState::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.CustomState.content)
  return _impl_.content_.Release();
}
inline void Post_CustomState::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Post.CustomState.content)
}

// -------------------------------------------------------------------

// Post

// int64 id = 1;
inline void Post::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t Post::id() const {
  // @@protoc_insertion_point(field_get:Post.id)
  return _internal_id();
}
inline void Post::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Post.id)
}
inline ::int64_t Post::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Post::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string title = 2;
inline void Post::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Post::title() const {
  // @@protoc_insertion_point(field_get:Post.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Post::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Post.title)
}
inline std::string* Post::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:Post.title)
  return _s;
}
inline const std::string& Post::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void Post::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Post::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* Post::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.title)
  return _impl_.title_.Release();
}
inline void Post::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Post.title)
}

// uint32 floor = 3;
inline void Post::clear_floor() {
  _impl_.floor_ = 0u;
}
inline ::uint32_t Post::floor() const {
  // @@protoc_insertion_point(field_get:Post.floor)
  return _internal_floor();
}
inline void Post::set_floor(::uint32_t value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:Post.floor)
}
inline ::uint32_t Post::_internal_floor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.floor_;
}
inline void Post::_internal_set_floor(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.floor_ = value;
}

// uint32 time = 4;
inline void Post::clear_time() {
  _impl_.time_ = 0u;
}
inline ::uint32_t Post::time() const {
  // @@protoc_insertion_point(field_get:Post.time)
  return _internal_time();
}
inline void Post::set_time(::uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Post.time)
}
inline ::uint32_t Post::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void Post::_internal_set_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// repeated .PbContent content = 5;
inline int Post::_internal_content_size() const {
  return _internal_content().size();
}
inline int Post::content_size() const {
  return _internal_content_size();
}
inline ::PbContent* Post::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:Post.content)
  return _internal_mutable_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
Post::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:Post.content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_content();
}
inline const ::PbContent& Post::content(int index) const {
  // @@protoc_insertion_point(field_get:Post.content)
    return _internal_content().Get(index);
}
inline ::PbContent* Post::add_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PbContent* _add = _internal_mutable_content()->Add();
  // @@protoc_insertion_point(field_add:Post.content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
Post::content() const {
  // @@protoc_insertion_point(field_list:Post.content)
  return _internal_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PbContent>&
Post::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_;
}
inline ::google::protobuf::RepeatedPtrField<::PbContent>*
Post::_internal_mutable_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.content_;
}

// uint32 sub_post_number = 13;
inline void Post::clear_sub_post_number() {
  _impl_.sub_post_number_ = 0u;
}
inline ::uint32_t Post::sub_post_number() const {
  // @@protoc_insertion_point(field_get:Post.sub_post_number)
  return _internal_sub_post_number();
}
inline void Post::set_sub_post_number(::uint32_t value) {
  _internal_set_sub_post_number(value);
  // @@protoc_insertion_point(field_set:Post.sub_post_number)
}
inline ::uint32_t Post::_internal_sub_post_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sub_post_number_;
}
inline void Post::_internal_set_sub_post_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sub_post_number_ = value;
}

// int64 author_id = 19;
inline void Post::clear_author_id() {
  _impl_.author_id_ = ::int64_t{0};
}
inline ::int64_t Post::author_id() const {
  // @@protoc_insertion_point(field_get:Post.author_id)
  return _internal_author_id();
}
inline void Post::set_author_id(::int64_t value) {
  _internal_set_author_id(value);
  // @@protoc_insertion_point(field_set:Post.author_id)
}
inline ::int64_t Post::_internal_author_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_id_;
}
inline void Post::_internal_set_author_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_id_ = value;
}

// .Post.SubPost sub_post_list = 15;
inline bool Post::has_sub_post_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sub_post_list_ != nullptr);
  return value;
}
inline void Post::clear_sub_post_list() {
  if (_impl_.sub_post_list_ != nullptr) _impl_.sub_post_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Post_SubPost& Post::_internal_sub_post_list() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Post_SubPost* p = _impl_.sub_post_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::Post_SubPost&>(::_Post_SubPost_default_instance_);
}
inline const ::Post_SubPost& Post::sub_post_list() const {
  // @@protoc_insertion_point(field_get:Post.sub_post_list)
  return _internal_sub_post_list();
}
inline void Post::unsafe_arena_set_allocated_sub_post_list(::Post_SubPost* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sub_post_list_);
  }
  _impl_.sub_post_list_ = reinterpret_cast<::Post_SubPost*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.sub_post_list)
}
inline ::Post_SubPost* Post::release_sub_post_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Post_SubPost* released = _impl_.sub_post_list_;
  _impl_.sub_post_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Post_SubPost* Post::unsafe_arena_release_sub_post_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.sub_post_list)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Post_SubPost* temp = _impl_.sub_post_list_;
  _impl_.sub_post_list_ = nullptr;
  return temp;
}
inline ::Post_SubPost* Post::_internal_mutable_sub_post_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sub_post_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::Post_SubPost>(GetArenaForAllocation());
    _impl_.sub_post_list_ = reinterpret_cast<::Post_SubPost*>(p);
  }
  return _impl_.sub_post_list_;
}
inline ::Post_SubPost* Post::mutable_sub_post_list() {
  ::Post_SubPost* _msg = _internal_mutable_sub_post_list();
  // @@protoc_insertion_point(field_mutable:Post.sub_post_list)
  return _msg;
}
inline void Post::set_allocated_sub_post_list(::Post_SubPost* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Post_SubPost*>(_impl_.sub_post_list_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Post_SubPost*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sub_post_list_ = reinterpret_cast<::Post_SubPost*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.sub_post_list)
}

// .Post.SignatureData signature = 21;
inline bool Post::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline void Post::clear_signature() {
  if (_impl_.signature_ != nullptr) _impl_.signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Post_SignatureData& Post::_internal_signature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Post_SignatureData* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Post_SignatureData&>(::_Post_SignatureData_default_instance_);
}
inline const ::Post_SignatureData& Post::signature() const {
  // @@protoc_insertion_point(field_get:Post.signature)
  return _internal_signature();
}
inline void Post::unsafe_arena_set_allocated_signature(::Post_SignatureData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::Post_SignatureData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.signature)
}
inline ::Post_SignatureData* Post::release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Post_SignatureData* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Post_SignatureData* Post::unsafe_arena_release_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.signature)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Post_SignatureData* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::Post_SignatureData* Post::_internal_mutable_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Post_SignatureData>(GetArenaForAllocation());
    _impl_.signature_ = reinterpret_cast<::Post_SignatureData*>(p);
  }
  return _impl_.signature_;
}
inline ::Post_SignatureData* Post::mutable_signature() {
  ::Post_SignatureData* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:Post.signature)
  return _msg;
}
inline void Post::set_allocated_signature(::Post_SignatureData* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Post_SignatureData*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Post_SignatureData*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.signature_ = reinterpret_cast<::Post_SignatureData*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.signature)
}

// .User author = 23;
inline bool Post::has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.author_ != nullptr);
  return value;
}
inline const ::User& Post::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::User&>(::_User_default_instance_);
}
inline const ::User& Post::author() const {
  // @@protoc_insertion_point(field_get:Post.author)
  return _internal_author();
}
inline void Post::unsafe_arena_set_allocated_author(::User* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = reinterpret_cast<::User*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.author)
}
inline ::User* Post::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::User* released = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User* Post::unsafe_arena_release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.author)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::User* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::User* Post::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::User>(GetArenaForAllocation());
    _impl_.author_ = reinterpret_cast<::User*>(p);
  }
  return _impl_.author_;
}
inline ::User* Post::mutable_author() {
  ::User* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:Post.author)
  return _msg;
}
inline void Post::set_allocated_author(::User* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.author_ = reinterpret_cast<::User*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.author)
}

// .Agree agree = 37;
inline bool Post::has_agree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.agree_ != nullptr);
  return value;
}
inline const ::Agree& Post::_internal_agree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Agree* p = _impl_.agree_;
  return p != nullptr ? *p : reinterpret_cast<const ::Agree&>(::_Agree_default_instance_);
}
inline const ::Agree& Post::agree() const {
  // @@protoc_insertion_point(field_get:Post.agree)
  return _internal_agree();
}
inline void Post::unsafe_arena_set_allocated_agree(::Agree* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }
  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.agree)
}
inline ::Agree* Post::release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Agree* released = _impl_.agree_;
  _impl_.agree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Agree* Post::unsafe_arena_release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.agree)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Agree* temp = _impl_.agree_;
  _impl_.agree_ = nullptr;
  return temp;
}
inline ::Agree* Post::_internal_mutable_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.agree_ == nullptr) {
    auto* p = CreateMaybeMessage<::Agree>(GetArenaForAllocation());
    _impl_.agree_ = reinterpret_cast<::Agree*>(p);
  }
  return _impl_.agree_;
}
inline ::Agree* Post::mutable_agree() {
  ::Agree* _msg = _internal_mutable_agree();
  // @@protoc_insertion_point(field_mutable:Post.agree)
  return _msg;
}
inline void Post::set_allocated_agree(::Agree* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.agree)
}

// .SimpleForum from_forum = 38;
inline bool Post::has_from_forum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_forum_ != nullptr);
  return value;
}
inline const ::SimpleForum& Post::_internal_from_forum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::SimpleForum* p = _impl_.from_forum_;
  return p != nullptr ? *p : reinterpret_cast<const ::SimpleForum&>(::_SimpleForum_default_instance_);
}
inline const ::SimpleForum& Post::from_forum() const {
  // @@protoc_insertion_point(field_get:Post.from_forum)
  return _internal_from_forum();
}
inline void Post::unsafe_arena_set_allocated_from_forum(::SimpleForum* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_forum_);
  }
  _impl_.from_forum_ = reinterpret_cast<::SimpleForum*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.from_forum)
}
inline ::SimpleForum* Post::release_from_forum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::SimpleForum* released = _impl_.from_forum_;
  _impl_.from_forum_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SimpleForum* Post::unsafe_arena_release_from_forum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.from_forum)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::SimpleForum* temp = _impl_.from_forum_;
  _impl_.from_forum_ = nullptr;
  return temp;
}
inline ::SimpleForum* Post::_internal_mutable_from_forum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.from_forum_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimpleForum>(GetArenaForAllocation());
    _impl_.from_forum_ = reinterpret_cast<::SimpleForum*>(p);
  }
  return _impl_.from_forum_;
}
inline ::SimpleForum* Post::mutable_from_forum() {
  ::SimpleForum* _msg = _internal_mutable_from_forum();
  // @@protoc_insertion_point(field_mutable:Post.from_forum)
  return _msg;
}
inline void Post::set_allocated_from_forum(::SimpleForum* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_forum_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.from_forum_ = reinterpret_cast<::SimpleForum*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.from_forum)
}

// int64 tid = 46;
inline void Post::clear_tid() {
  _impl_.tid_ = ::int64_t{0};
}
inline ::int64_t Post::tid() const {
  // @@protoc_insertion_point(field_get:Post.tid)
  return _internal_tid();
}
inline void Post::set_tid(::int64_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:Post.tid)
}
inline ::int64_t Post::_internal_tid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tid_;
}
inline void Post::_internal_set_tid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tid_ = value;
}

// .Post.CustomFigure custom_figure = 60;
inline bool Post::has_custom_figure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_figure_ != nullptr);
  return value;
}
inline void Post::clear_custom_figure() {
  if (_impl_.custom_figure_ != nullptr) _impl_.custom_figure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::Post_CustomFigure& Post::_internal_custom_figure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Post_CustomFigure* p = _impl_.custom_figure_;
  return p != nullptr ? *p : reinterpret_cast<const ::Post_CustomFigure&>(::_Post_CustomFigure_default_instance_);
}
inline const ::Post_CustomFigure& Post::custom_figure() const {
  // @@protoc_insertion_point(field_get:Post.custom_figure)
  return _internal_custom_figure();
}
inline void Post::unsafe_arena_set_allocated_custom_figure(::Post_CustomFigure* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.custom_figure_);
  }
  _impl_.custom_figure_ = reinterpret_cast<::Post_CustomFigure*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.custom_figure)
}
inline ::Post_CustomFigure* Post::release_custom_figure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Post_CustomFigure* released = _impl_.custom_figure_;
  _impl_.custom_figure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Post_CustomFigure* Post::unsafe_arena_release_custom_figure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.custom_figure)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Post_CustomFigure* temp = _impl_.custom_figure_;
  _impl_.custom_figure_ = nullptr;
  return temp;
}
inline ::Post_CustomFigure* Post::_internal_mutable_custom_figure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.custom_figure_ == nullptr) {
    auto* p = CreateMaybeMessage<::Post_CustomFigure>(GetArenaForAllocation());
    _impl_.custom_figure_ = reinterpret_cast<::Post_CustomFigure*>(p);
  }
  return _impl_.custom_figure_;
}
inline ::Post_CustomFigure* Post::mutable_custom_figure() {
  ::Post_CustomFigure* _msg = _internal_mutable_custom_figure();
  // @@protoc_insertion_point(field_mutable:Post.custom_figure)
  return _msg;
}
inline void Post::set_allocated_custom_figure(::Post_CustomFigure* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Post_CustomFigure*>(_impl_.custom_figure_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Post_CustomFigure*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.custom_figure_ = reinterpret_cast<::Post_CustomFigure*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.custom_figure)
}

// .Post.CustomState custom_state = 61;
inline bool Post::has_custom_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_state_ != nullptr);
  return value;
}
inline void Post::clear_custom_state() {
  if (_impl_.custom_state_ != nullptr) _impl_.custom_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::Post_CustomState& Post::_internal_custom_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Post_CustomState* p = _impl_.custom_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Post_CustomState&>(::_Post_CustomState_default_instance_);
}
inline const ::Post_CustomState& Post::custom_state() const {
  // @@protoc_insertion_point(field_get:Post.custom_state)
  return _internal_custom_state();
}
inline void Post::unsafe_arena_set_allocated_custom_state(::Post_CustomState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.custom_state_);
  }
  _impl_.custom_state_ = reinterpret_cast<::Post_CustomState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Post.custom_state)
}
inline ::Post_CustomState* Post::release_custom_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::Post_CustomState* released = _impl_.custom_state_;
  _impl_.custom_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Post_CustomState* Post::unsafe_arena_release_custom_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Post.custom_state)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::Post_CustomState* temp = _impl_.custom_state_;
  _impl_.custom_state_ = nullptr;
  return temp;
}
inline ::Post_CustomState* Post::_internal_mutable_custom_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.custom_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Post_CustomState>(GetArenaForAllocation());
    _impl_.custom_state_ = reinterpret_cast<::Post_CustomState*>(p);
  }
  return _impl_.custom_state_;
}
inline ::Post_CustomState* Post::mutable_custom_state() {
  ::Post_CustomState* _msg = _internal_mutable_custom_state();
  // @@protoc_insertion_point(field_mutable:Post.custom_state)
  return _msg;
}
inline void Post::set_allocated_custom_state(::Post_CustomState* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Post_CustomState*>(_impl_.custom_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::Post_CustomState*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.custom_state_ = reinterpret_cast<::Post_CustomState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Post.custom_state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Post_2eproto_2epb_2eh
