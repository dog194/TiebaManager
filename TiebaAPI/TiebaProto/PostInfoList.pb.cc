// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PostInfoList.proto

#include "PostInfoList.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR PostInfoList_PostInfoContent::PostInfoList_PostInfoContent(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.post_content_)*/ {},
      /*decltype(_impl_.create_time_)*/ ::uint64_t{0u},
      /*decltype(_impl_.post_type_)*/ ::uint64_t{0u},
      /*decltype(_impl_.post_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PostInfoList_PostInfoContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInfoList_PostInfoContentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInfoList_PostInfoContentDefaultTypeInternal() {}
  union {
    PostInfoList_PostInfoContent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInfoList_PostInfoContentDefaultTypeInternal _PostInfoList_PostInfoContent_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PostInfoList::PostInfoList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.content_)*/ {},
      /*decltype(_impl_.media_)*/ {},
      /*decltype(_impl_.first_post_content_)*/ {},
      /*decltype(_impl_.forum_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.title_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.user_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.user_portrait_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.name_show_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.poll_info_)*/ nullptr,
      /*decltype(_impl_.agree_)*/ nullptr,
      /*decltype(_impl_.forum_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.thread_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.post_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.create_time_)*/ 0u,
      /*decltype(_impl_.reply_num_)*/ 0u,
      /*decltype(_impl_.user_id_)*/ ::int64_t{0},
      /*decltype(_impl_.thread_type_)*/ ::uint64_t{0u},
      /*decltype(_impl_.freq_num_)*/ 0,
      /*decltype(_impl_.share_num_)*/ 0,
      /*decltype(_impl_.is_share_thread_)*/ 0,
    } {}
struct PostInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostInfoListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostInfoListDefaultTypeInternal() {}
  union {
    PostInfoList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostInfoListDefaultTypeInternal _PostInfoList_default_instance_;
static ::_pb::Metadata file_level_metadata_PostInfoList_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_PostInfoList_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_PostInfoList_2eproto = nullptr;
const ::uint32_t TableStruct_PostInfoList_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::PostInfoList_PostInfoContent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::PostInfoList_PostInfoContent, _impl_.post_content_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList_PostInfoContent, _impl_.create_time_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList_PostInfoContent, _impl_.post_type_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList_PostInfoContent, _impl_.post_id_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.forum_id_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.thread_id_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.post_id_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.create_time_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.forum_name_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.user_name_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.media_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.reply_num_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.user_portrait_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.thread_type_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.poll_info_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.freq_num_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.name_show_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.share_num_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.agree_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.is_share_thread_),
    PROTOBUF_FIELD_OFFSET(::PostInfoList, _impl_.first_post_content_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::PostInfoList_PostInfoContent)},
        {12, 40, -1, sizeof(::PostInfoList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_PostInfoList_PostInfoContent_default_instance_._instance,
    &::_PostInfoList_default_instance_._instance,
};
const char descriptor_table_protodef_PostInfoList_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022PostInfoList.proto\032\013Media.proto\032\016PollI"
    "nfo.proto\032\017PbContent.proto\032\013Agree.proto\""
    "\302\004\n\014PostInfoList\022\020\n\010forum_id\030\001 \001(\004\022\021\n\tth"
    "read_id\030\002 \001(\004\022\017\n\007post_id\030\003 \001(\004\022\023\n\013create"
    "_time\030\005 \001(\r\022\022\n\nforum_name\030\006 \001(\t\022\r\n\005title"
    "\030\007 \001(\t\022.\n\007content\030\010 \003(\0132\035.PostInfoList.P"
    "ostInfoContent\022\021\n\tuser_name\030\n \001(\t\022\025\n\005med"
    "ia\030\020 \003(\0132\006.Media\022\021\n\treply_num\030\021 \001(\r\022\017\n\007u"
    "ser_id\030\022 \001(\003\022\025\n\ruser_portrait\030\023 \001(\t\022\023\n\013t"
    "hread_type\030\032 \001(\004\022\034\n\tpoll_info\030\034 \001(\0132\t.Po"
    "llInfo\022\020\n\010freq_num\030! \001(\005\022\021\n\tname_show\030# "
    "\001(\t\022\021\n\tshare_num\030\' \001(\005\022\025\n\005agree\030( \001(\0132\006."
    "Agree\022\027\n\017is_share_thread\030, \001(\005\022&\n\022first_"
    "post_content\0301 \003(\0132\n.PbContent\032l\n\017PostIn"
    "foContent\022 \n\014post_content\030\001 \003(\0132\n.PbCont"
    "ent\022\023\n\013create_time\030\002 \001(\004\022\021\n\tpost_type\030\003 "
    "\001(\004\022\017\n\007post_id\030\004 \001(\004b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_PostInfoList_2eproto_deps[4] =
    {
        &::descriptor_table_Agree_2eproto,
        &::descriptor_table_Media_2eproto,
        &::descriptor_table_PbContent_2eproto,
        &::descriptor_table_PollInfo_2eproto,
};
static ::absl::once_flag descriptor_table_PostInfoList_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PostInfoList_2eproto = {
    false,
    false,
    668,
    descriptor_table_protodef_PostInfoList_2eproto,
    "PostInfoList.proto",
    &descriptor_table_PostInfoList_2eproto_once,
    descriptor_table_PostInfoList_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_PostInfoList_2eproto::offsets,
    file_level_metadata_PostInfoList_2eproto,
    file_level_enum_descriptors_PostInfoList_2eproto,
    file_level_service_descriptors_PostInfoList_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PostInfoList_2eproto_getter() {
  return &descriptor_table_PostInfoList_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PostInfoList_2eproto(&descriptor_table_PostInfoList_2eproto);
// ===================================================================

class PostInfoList_PostInfoContent::_Internal {
 public:
};

void PostInfoList_PostInfoContent::clear_post_content() {
  _internal_mutable_post_content()->Clear();
}
PostInfoList_PostInfoContent::PostInfoList_PostInfoContent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PostInfoList.PostInfoContent)
}
PostInfoList_PostInfoContent::PostInfoList_PostInfoContent(const PostInfoList_PostInfoContent& from) : ::google::protobuf::Message() {
  PostInfoList_PostInfoContent* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.post_content_){from._impl_.post_content_},
      decltype(_impl_.create_time_){},
      decltype(_impl_.post_type_){},
      decltype(_impl_.post_id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.create_time_, &from._impl_.create_time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.post_id_) -
    reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.post_id_));

  // @@protoc_insertion_point(copy_constructor:PostInfoList.PostInfoContent)
}
inline void PostInfoList_PostInfoContent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.post_content_){arena},
      decltype(_impl_.create_time_){::uint64_t{0u}},
      decltype(_impl_.post_type_){::uint64_t{0u}},
      decltype(_impl_.post_id_){::uint64_t{0u}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
PostInfoList_PostInfoContent::~PostInfoList_PostInfoContent() {
  // @@protoc_insertion_point(destructor:PostInfoList.PostInfoContent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PostInfoList_PostInfoContent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.post_content_.~RepeatedPtrField();
}
void PostInfoList_PostInfoContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PostInfoList_PostInfoContent::Clear() {
// @@protoc_insertion_point(message_clear_start:PostInfoList.PostInfoContent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_post_content()->Clear();
  ::memset(&_impl_.create_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.post_id_) -
      reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.post_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PostInfoList_PostInfoContent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> PostInfoList_PostInfoContent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PostInfoList_PostInfoContent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint64 post_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PostInfoList_PostInfoContent, _impl_.post_id_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_id_)}},
    // repeated .PbContent post_content = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_content_)}},
    // uint64 create_time = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PostInfoList_PostInfoContent, _impl_.create_time_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.create_time_)}},
    // uint64 post_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PostInfoList_PostInfoContent, _impl_.post_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .PbContent post_content = 1;
    {PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_content_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 create_time = 2;
    {PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.create_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 post_type = 3;
    {PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 post_id = 4;
    {PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PbContent>()},
  }}, {{
  }},
};

::uint8_t* PostInfoList_PostInfoContent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PostInfoList.PostInfoContent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .PbContent post_content = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_post_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_post_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 create_time = 2;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_create_time(), target);
  }

  // uint64 post_type = 3;
  if (this->_internal_post_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_post_type(), target);
  }

  // uint64 post_id = 4;
  if (this->_internal_post_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_post_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PostInfoList.PostInfoContent)
  return target;
}

::size_t PostInfoList_PostInfoContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PostInfoList.PostInfoContent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PbContent post_content = 1;
  total_size += 1UL * this->_internal_post_content_size();
  for (const auto& msg : this->_internal_post_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // uint64 create_time = 2;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_create_time());
  }

  // uint64 post_type = 3;
  if (this->_internal_post_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_post_type());
  }

  // uint64 post_id = 4;
  if (this->_internal_post_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_post_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PostInfoList_PostInfoContent::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PostInfoList_PostInfoContent::MergeImpl
};
const ::google::protobuf::Message::ClassData*PostInfoList_PostInfoContent::GetClassData() const { return &_class_data_; }


void PostInfoList_PostInfoContent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PostInfoList_PostInfoContent*>(&to_msg);
  auto& from = static_cast<const PostInfoList_PostInfoContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PostInfoList.PostInfoContent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_post_content()->MergeFrom(from._internal_post_content());
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_post_type() != 0) {
    _this->_internal_set_post_type(from._internal_post_type());
  }
  if (from._internal_post_id() != 0) {
    _this->_internal_set_post_id(from._internal_post_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PostInfoList_PostInfoContent::CopyFrom(const PostInfoList_PostInfoContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PostInfoList.PostInfoContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PostInfoList_PostInfoContent::IsInitialized() const {
  return true;
}

void PostInfoList_PostInfoContent::InternalSwap(PostInfoList_PostInfoContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.post_content_.InternalSwap(&other->_impl_.post_content_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.post_id_)
      + sizeof(PostInfoList_PostInfoContent::_impl_.post_id_)
      - PROTOBUF_FIELD_OFFSET(PostInfoList_PostInfoContent, _impl_.create_time_)>(
          reinterpret_cast<char*>(&_impl_.create_time_),
          reinterpret_cast<char*>(&other->_impl_.create_time_));
}

::google::protobuf::Metadata PostInfoList_PostInfoContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PostInfoList_2eproto_getter, &descriptor_table_PostInfoList_2eproto_once,
      file_level_metadata_PostInfoList_2eproto[0]);
}
// ===================================================================

class PostInfoList::_Internal {
 public:
  using HasBits = decltype(std::declval<PostInfoList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_._has_bits_);
  static const ::PollInfo& poll_info(const PostInfoList* msg);
  static void set_has_poll_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Agree& agree(const PostInfoList* msg);
  static void set_has_agree(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PollInfo& PostInfoList::_Internal::poll_info(const PostInfoList* msg) {
  return *msg->_impl_.poll_info_;
}
const ::Agree& PostInfoList::_Internal::agree(const PostInfoList* msg) {
  return *msg->_impl_.agree_;
}
void PostInfoList::clear_media() {
  _internal_mutable_media()->Clear();
}
void PostInfoList::clear_poll_info() {
  if (_impl_.poll_info_ != nullptr) _impl_.poll_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PostInfoList::clear_agree() {
  if (_impl_.agree_ != nullptr) _impl_.agree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PostInfoList::clear_first_post_content() {
  _internal_mutable_first_post_content()->Clear();
}
PostInfoList::PostInfoList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PostInfoList)
}
PostInfoList::PostInfoList(const PostInfoList& from) : ::google::protobuf::Message() {
  PostInfoList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){from._impl_.content_},
      decltype(_impl_.media_){from._impl_.media_},
      decltype(_impl_.first_post_content_){from._impl_.first_post_content_},
      decltype(_impl_.forum_name_){},
      decltype(_impl_.title_){},
      decltype(_impl_.user_name_){},
      decltype(_impl_.user_portrait_){},
      decltype(_impl_.name_show_){},
      decltype(_impl_.poll_info_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.forum_id_){},
      decltype(_impl_.thread_id_){},
      decltype(_impl_.post_id_){},
      decltype(_impl_.create_time_){},
      decltype(_impl_.reply_num_){},
      decltype(_impl_.user_id_){},
      decltype(_impl_.thread_type_){},
      decltype(_impl_.freq_num_){},
      decltype(_impl_.share_num_){},
      decltype(_impl_.is_share_thread_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.forum_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forum_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forum_name().empty()) {
    _this->_impl_.forum_name_.Set(from._internal_forum_name(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.user_portrait_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_portrait_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_portrait().empty()) {
    _this->_impl_.user_portrait_.Set(from._internal_user_portrait(), _this->GetArenaForAllocation());
  }
  _impl_.name_show_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_show_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name_show().empty()) {
    _this->_impl_.name_show_.Set(from._internal_name_show(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.poll_info_ = new ::PollInfo(*from._impl_.poll_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.agree_ = new ::Agree(*from._impl_.agree_);
  }
  ::memcpy(&_impl_.forum_id_, &from._impl_.forum_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_share_thread_) -
    reinterpret_cast<char*>(&_impl_.forum_id_)) + sizeof(_impl_.is_share_thread_));

  // @@protoc_insertion_point(copy_constructor:PostInfoList)
}
inline void PostInfoList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){arena},
      decltype(_impl_.media_){arena},
      decltype(_impl_.first_post_content_){arena},
      decltype(_impl_.forum_name_){},
      decltype(_impl_.title_){},
      decltype(_impl_.user_name_){},
      decltype(_impl_.user_portrait_){},
      decltype(_impl_.name_show_){},
      decltype(_impl_.poll_info_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.forum_id_){::uint64_t{0u}},
      decltype(_impl_.thread_id_){::uint64_t{0u}},
      decltype(_impl_.post_id_){::uint64_t{0u}},
      decltype(_impl_.create_time_){0u},
      decltype(_impl_.reply_num_){0u},
      decltype(_impl_.user_id_){::int64_t{0}},
      decltype(_impl_.thread_type_){::uint64_t{0u}},
      decltype(_impl_.freq_num_){0},
      decltype(_impl_.share_num_){0},
      decltype(_impl_.is_share_thread_){0},
  };
  _impl_.forum_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forum_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_portrait_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_portrait_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_show_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_show_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
PostInfoList::~PostInfoList() {
  // @@protoc_insertion_point(destructor:PostInfoList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PostInfoList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedPtrField();
  _impl_.media_.~RepeatedPtrField();
  _impl_.first_post_content_.~RepeatedPtrField();
  _impl_.forum_name_.Destroy();
  _impl_.title_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.user_portrait_.Destroy();
  _impl_.name_show_.Destroy();
  if (this != internal_default_instance()) delete _impl_.poll_info_;
  if (this != internal_default_instance()) delete _impl_.agree_;
}
void PostInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PostInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:PostInfoList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_content()->Clear();
  _internal_mutable_media()->Clear();
  _internal_mutable_first_post_content()->Clear();
  _impl_.forum_name_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.user_portrait_.ClearToEmpty();
  _impl_.name_show_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.poll_info_ != nullptr);
      _impl_.poll_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.agree_ != nullptr);
      _impl_.agree_->Clear();
    }
  }
  ::memset(&_impl_.forum_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_share_thread_) -
      reinterpret_cast<char*>(&_impl_.forum_id_)) + sizeof(_impl_.is_share_thread_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PostInfoList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 5, 83, 9> PostInfoList::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_._has_bits_),
    0, // no _extensions_
    49, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4126702856,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PostInfoList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 forum_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PostInfoList, _impl_.forum_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.forum_id_)}},
    // uint64 thread_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PostInfoList, _impl_.thread_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.thread_id_)}},
    // uint64 post_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PostInfoList, _impl_.post_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.post_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 create_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PostInfoList, _impl_.create_time_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.create_time_)}},
    // string forum_name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.forum_name_)}},
    // string title = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.title_)}},
    // repeated .PostInfoList.PostInfoContent content = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.content_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string user_name = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.user_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .Media media = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 1, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.media_)}},
    // uint32 reply_num = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.reply_num_)}},
    // int64 user_id = 18;
    {::_pbi::TcParser::FastV64S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.user_id_)}},
    // string user_portrait = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.user_portrait_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 share_num = 39;
    {::_pbi::TcParser::FastV32S2,
     {696, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.share_num_)}},
    // .Agree agree = 40;
    {::_pbi::TcParser::FastMtS2,
     {706, 1, 3, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.agree_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 thread_type = 26;
    {::_pbi::TcParser::FastV64S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.thread_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .PollInfo poll_info = 28;
    {::_pbi::TcParser::FastMtS2,
     {482, 0, 2, PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.poll_info_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 2,
    63290, 14, 65534, 19,
    65535, 65535
  }}, {{
    // uint64 forum_id = 1;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.forum_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 thread_id = 2;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.thread_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 post_id = 3;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.post_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 create_time = 5;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.create_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string forum_name = 6;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.forum_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string title = 7;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .PostInfoList.PostInfoContent content = 8;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string user_name = 10;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.user_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Media media = 16;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.media_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 reply_num = 17;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.reply_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int64 user_id = 18;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.user_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string user_portrait = 19;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.user_portrait_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 thread_type = 26;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.thread_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .PollInfo poll_info = 28;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.poll_info_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 freq_num = 33;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.freq_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name_show = 35;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.name_show_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 share_num = 39;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.share_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .Agree agree = 40;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.agree_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 is_share_thread = 44;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.is_share_thread_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .PbContent first_post_content = 49;
    {PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.first_post_content_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PostInfoList_PostInfoContent>()},
    {::_pbi::TcParser::GetTable<::Media>()},
    {::_pbi::TcParser::GetTable<::PollInfo>()},
    {::_pbi::TcParser::GetTable<::Agree>()},
    {::_pbi::TcParser::GetTable<::PbContent>()},
  }}, {{
    "\14\0\0\0\0\12\5\0\11\0\0\0\15\0\0\0\11\0\0\0\0\0\0\0"
    "PostInfoList"
    "forum_name"
    "title"
    "user_name"
    "user_portrait"
    "name_show"
  }},
};

::uint8_t* PostInfoList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PostInfoList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 forum_id = 1;
  if (this->_internal_forum_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_forum_id(), target);
  }

  // uint64 thread_id = 2;
  if (this->_internal_thread_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_thread_id(), target);
  }

  // uint64 post_id = 3;
  if (this->_internal_post_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_post_id(), target);
  }

  // uint32 create_time = 5;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_create_time(), target);
  }

  // string forum_name = 6;
  if (!this->_internal_forum_name().empty()) {
    const std::string& _s = this->_internal_forum_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PostInfoList.forum_name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PostInfoList.title");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // repeated .PostInfoList.PostInfoContent content = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string user_name = 10;
  if (!this->_internal_user_name().empty()) {
    const std::string& _s = this->_internal_user_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PostInfoList.user_name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated .Media media = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_size()); i < n; i++) {
    const auto& repfield = this->_internal_media().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 reply_num = 17;
  if (this->_internal_reply_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_reply_num(), target);
  }

  // int64 user_id = 18;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        18, this->_internal_user_id(), target);
  }

  // string user_portrait = 19;
  if (!this->_internal_user_portrait().empty()) {
    const std::string& _s = this->_internal_user_portrait();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PostInfoList.user_portrait");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // uint64 thread_type = 26;
  if (this->_internal_thread_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        26, this->_internal_thread_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .PollInfo poll_info = 28;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::poll_info(this),
        _Internal::poll_info(this).GetCachedSize(), target, stream);
  }

  // int32 freq_num = 33;
  if (this->_internal_freq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        33, this->_internal_freq_num(), target);
  }

  // string name_show = 35;
  if (!this->_internal_name_show().empty()) {
    const std::string& _s = this->_internal_name_show();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PostInfoList.name_show");
    target = stream->WriteStringMaybeAliased(35, _s, target);
  }

  // int32 share_num = 39;
  if (this->_internal_share_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        39, this->_internal_share_num(), target);
  }

  // .Agree agree = 40;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::agree(this),
        _Internal::agree(this).GetCachedSize(), target, stream);
  }

  // int32 is_share_thread = 44;
  if (this->_internal_is_share_thread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        44, this->_internal_is_share_thread(), target);
  }

  // repeated .PbContent first_post_content = 49;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_first_post_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_first_post_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(49, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PostInfoList)
  return target;
}

::size_t PostInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PostInfoList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PostInfoList.PostInfoContent content = 8;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->_internal_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .Media media = 16;
  total_size += 2UL * this->_internal_media_size();
  for (const auto& msg : this->_internal_media()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .PbContent first_post_content = 49;
  total_size += 2UL * this->_internal_first_post_content_size();
  for (const auto& msg : this->_internal_first_post_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string forum_name = 6;
  if (!this->_internal_forum_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_forum_name());
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string user_name = 10;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_name());
  }

  // string user_portrait = 19;
  if (!this->_internal_user_portrait().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_portrait());
  }

  // string name_show = 35;
  if (!this->_internal_name_show().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name_show());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .PollInfo poll_info = 28;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.poll_info_);
    }

    // .Agree agree = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.agree_);
    }

  }
  // uint64 forum_id = 1;
  if (this->_internal_forum_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_forum_id());
  }

  // uint64 thread_id = 2;
  if (this->_internal_thread_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_thread_id());
  }

  // uint64 post_id = 3;
  if (this->_internal_post_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_post_id());
  }

  // uint32 create_time = 5;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_create_time());
  }

  // uint32 reply_num = 17;
  if (this->_internal_reply_num() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_reply_num());
  }

  // int64 user_id = 18;
  if (this->_internal_user_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_user_id());
  }

  // uint64 thread_type = 26;
  if (this->_internal_thread_type() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_thread_type());
  }

  // int32 freq_num = 33;
  if (this->_internal_freq_num() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_freq_num());
  }

  // int32 share_num = 39;
  if (this->_internal_share_num() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_share_num());
  }

  // int32 is_share_thread = 44;
  if (this->_internal_is_share_thread() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_is_share_thread());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PostInfoList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PostInfoList::MergeImpl
};
const ::google::protobuf::Message::ClassData*PostInfoList::GetClassData() const { return &_class_data_; }


void PostInfoList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PostInfoList*>(&to_msg);
  auto& from = static_cast<const PostInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PostInfoList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content()->MergeFrom(from._internal_content());
  _this->_internal_mutable_media()->MergeFrom(from._internal_media());
  _this->_internal_mutable_first_post_content()->MergeFrom(from._internal_first_post_content());
  if (!from._internal_forum_name().empty()) {
    _this->_internal_set_forum_name(from._internal_forum_name());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_user_portrait().empty()) {
    _this->_internal_set_user_portrait(from._internal_user_portrait());
  }
  if (!from._internal_name_show().empty()) {
    _this->_internal_set_name_show(from._internal_name_show());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_poll_info()->::PollInfo::MergeFrom(
          from._internal_poll_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_agree()->::Agree::MergeFrom(
          from._internal_agree());
    }
  }
  if (from._internal_forum_id() != 0) {
    _this->_internal_set_forum_id(from._internal_forum_id());
  }
  if (from._internal_thread_id() != 0) {
    _this->_internal_set_thread_id(from._internal_thread_id());
  }
  if (from._internal_post_id() != 0) {
    _this->_internal_set_post_id(from._internal_post_id());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_reply_num() != 0) {
    _this->_internal_set_reply_num(from._internal_reply_num());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_thread_type() != 0) {
    _this->_internal_set_thread_type(from._internal_thread_type());
  }
  if (from._internal_freq_num() != 0) {
    _this->_internal_set_freq_num(from._internal_freq_num());
  }
  if (from._internal_share_num() != 0) {
    _this->_internal_set_share_num(from._internal_share_num());
  }
  if (from._internal_is_share_thread() != 0) {
    _this->_internal_set_is_share_thread(from._internal_is_share_thread());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PostInfoList::CopyFrom(const PostInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PostInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PostInfoList::IsInitialized() const {
  return true;
}

void PostInfoList::InternalSwap(PostInfoList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  _impl_.media_.InternalSwap(&other->_impl_.media_);
  _impl_.first_post_content_.InternalSwap(&other->_impl_.first_post_content_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forum_name_, lhs_arena,
                                       &other->_impl_.forum_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, lhs_arena,
                                       &other->_impl_.user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_portrait_, lhs_arena,
                                       &other->_impl_.user_portrait_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_show_, lhs_arena,
                                       &other->_impl_.name_show_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.is_share_thread_)
      + sizeof(PostInfoList::_impl_.is_share_thread_)
      - PROTOBUF_FIELD_OFFSET(PostInfoList, _impl_.poll_info_)>(
          reinterpret_cast<char*>(&_impl_.poll_info_),
          reinterpret_cast<char*>(&other->_impl_.poll_info_));
}

::google::protobuf::Metadata PostInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PostInfoList_2eproto_getter, &descriptor_table_PostInfoList_2eproto_once,
      file_level_metadata_PostInfoList_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
