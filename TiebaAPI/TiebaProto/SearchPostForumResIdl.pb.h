// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SearchPostForumResIdl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SearchPostForumResIdl_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_SearchPostForumResIdl_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "FrsTabInfo.pb.h"
#include "Error.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_SearchPostForumResIdl_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_SearchPostForumResIdl_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_SearchPostForumResIdl_2eproto;
class SearchPostForumResIdl;
struct SearchPostForumResIdlDefaultTypeInternal;
extern SearchPostForumResIdlDefaultTypeInternal _SearchPostForumResIdl_default_instance_;
class SearchPostForumResIdl_DataRes;
struct SearchPostForumResIdl_DataResDefaultTypeInternal;
extern SearchPostForumResIdl_DataResDefaultTypeInternal _SearchPostForumResIdl_DataRes_default_instance_;
class SearchPostForumResIdl_DataRes_SearchForum;
struct SearchPostForumResIdl_DataRes_SearchForumDefaultTypeInternal;
extern SearchPostForumResIdl_DataRes_SearchForumDefaultTypeInternal _SearchPostForumResIdl_DataRes_SearchForum_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class SearchPostForumResIdl_DataRes_SearchForum final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchPostForumResIdl.DataRes.SearchForum) */ {
 public:
  inline SearchPostForumResIdl_DataRes_SearchForum() : SearchPostForumResIdl_DataRes_SearchForum(nullptr) {}
  ~SearchPostForumResIdl_DataRes_SearchForum() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchPostForumResIdl_DataRes_SearchForum(::google::protobuf::internal::ConstantInitialized);

  SearchPostForumResIdl_DataRes_SearchForum(const SearchPostForumResIdl_DataRes_SearchForum& from);
  SearchPostForumResIdl_DataRes_SearchForum(SearchPostForumResIdl_DataRes_SearchForum&& from) noexcept
    : SearchPostForumResIdl_DataRes_SearchForum() {
    *this = ::std::move(from);
  }

  inline SearchPostForumResIdl_DataRes_SearchForum& operator=(const SearchPostForumResIdl_DataRes_SearchForum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchPostForumResIdl_DataRes_SearchForum& operator=(SearchPostForumResIdl_DataRes_SearchForum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchPostForumResIdl_DataRes_SearchForum& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchPostForumResIdl_DataRes_SearchForum* internal_default_instance() {
    return reinterpret_cast<const SearchPostForumResIdl_DataRes_SearchForum*>(
               &_SearchPostForumResIdl_DataRes_SearchForum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchPostForumResIdl_DataRes_SearchForum& a, SearchPostForumResIdl_DataRes_SearchForum& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchPostForumResIdl_DataRes_SearchForum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchPostForumResIdl_DataRes_SearchForum* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchPostForumResIdl_DataRes_SearchForum* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchPostForumResIdl_DataRes_SearchForum>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchPostForumResIdl_DataRes_SearchForum& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchPostForumResIdl_DataRes_SearchForum& from) {
    SearchPostForumResIdl_DataRes_SearchForum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchPostForumResIdl_DataRes_SearchForum* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SearchPostForumResIdl.DataRes.SearchForum";
  }
  protected:
  explicit SearchPostForumResIdl_DataRes_SearchForum(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabInfoFieldNumber = 9,
    kForumNameFieldNumber = 2,
    kForumIdFieldNumber = 1,
  };
  // repeated .FrsTabInfo tab_info = 9;
  int tab_info_size() const;
  private:
  int _internal_tab_info_size() const;

  public:
  void clear_tab_info() ;
  ::FrsTabInfo* mutable_tab_info(int index);
  ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >*
      mutable_tab_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::FrsTabInfo>& _internal_tab_info() const;
  ::google::protobuf::RepeatedPtrField<::FrsTabInfo>* _internal_mutable_tab_info();
  public:
  const ::FrsTabInfo& tab_info(int index) const;
  ::FrsTabInfo* add_tab_info();
  const ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >&
      tab_info() const;
  // string forum_name = 2;
  void clear_forum_name() ;
  const std::string& forum_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forum_name(Arg_&& arg, Args_... args);
  std::string* mutable_forum_name();
  PROTOBUF_NODISCARD std::string* release_forum_name();
  void set_allocated_forum_name(std::string* ptr);

  private:
  const std::string& _internal_forum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forum_name(
      const std::string& value);
  std::string* _internal_mutable_forum_name();

  public:
  // int64 forum_id = 1;
  void clear_forum_id() ;
  ::int64_t forum_id() const;
  void set_forum_id(::int64_t value);

  private:
  ::int64_t _internal_forum_id() const;
  void _internal_set_forum_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SearchPostForumResIdl.DataRes.SearchForum)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3, 1, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::FrsTabInfo > tab_info_;
    ::google::protobuf::internal::ArenaStringPtr forum_name_;
    ::int64_t forum_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SearchPostForumResIdl_2eproto;
};// -------------------------------------------------------------------

class SearchPostForumResIdl_DataRes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchPostForumResIdl.DataRes) */ {
 public:
  inline SearchPostForumResIdl_DataRes() : SearchPostForumResIdl_DataRes(nullptr) {}
  ~SearchPostForumResIdl_DataRes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchPostForumResIdl_DataRes(::google::protobuf::internal::ConstantInitialized);

  SearchPostForumResIdl_DataRes(const SearchPostForumResIdl_DataRes& from);
  SearchPostForumResIdl_DataRes(SearchPostForumResIdl_DataRes&& from) noexcept
    : SearchPostForumResIdl_DataRes() {
    *this = ::std::move(from);
  }

  inline SearchPostForumResIdl_DataRes& operator=(const SearchPostForumResIdl_DataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchPostForumResIdl_DataRes& operator=(SearchPostForumResIdl_DataRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchPostForumResIdl_DataRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchPostForumResIdl_DataRes* internal_default_instance() {
    return reinterpret_cast<const SearchPostForumResIdl_DataRes*>(
               &_SearchPostForumResIdl_DataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchPostForumResIdl_DataRes& a, SearchPostForumResIdl_DataRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchPostForumResIdl_DataRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchPostForumResIdl_DataRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchPostForumResIdl_DataRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchPostForumResIdl_DataRes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchPostForumResIdl_DataRes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchPostForumResIdl_DataRes& from) {
    SearchPostForumResIdl_DataRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchPostForumResIdl_DataRes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SearchPostForumResIdl.DataRes";
  }
  protected:
  explicit SearchPostForumResIdl_DataRes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchPostForumResIdl_DataRes_SearchForum SearchForum;

  // accessors -------------------------------------------------------

  enum : int {
    kExactMatchFieldNumber = 1,
  };
  // .SearchPostForumResIdl.DataRes.SearchForum exact_match = 1;
  bool has_exact_match() const;
  void clear_exact_match() ;
  const ::SearchPostForumResIdl_DataRes_SearchForum& exact_match() const;
  PROTOBUF_NODISCARD ::SearchPostForumResIdl_DataRes_SearchForum* release_exact_match();
  ::SearchPostForumResIdl_DataRes_SearchForum* mutable_exact_match();
  void set_allocated_exact_match(::SearchPostForumResIdl_DataRes_SearchForum* value);
  void unsafe_arena_set_allocated_exact_match(::SearchPostForumResIdl_DataRes_SearchForum* value);
  ::SearchPostForumResIdl_DataRes_SearchForum* unsafe_arena_release_exact_match();

  private:
  const ::SearchPostForumResIdl_DataRes_SearchForum& _internal_exact_match() const;
  ::SearchPostForumResIdl_DataRes_SearchForum* _internal_mutable_exact_match();

  public:
  // @@protoc_insertion_point(class_scope:SearchPostForumResIdl.DataRes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::SearchPostForumResIdl_DataRes_SearchForum* exact_match_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SearchPostForumResIdl_2eproto;
};// -------------------------------------------------------------------

class SearchPostForumResIdl final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SearchPostForumResIdl) */ {
 public:
  inline SearchPostForumResIdl() : SearchPostForumResIdl(nullptr) {}
  ~SearchPostForumResIdl() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchPostForumResIdl(::google::protobuf::internal::ConstantInitialized);

  SearchPostForumResIdl(const SearchPostForumResIdl& from);
  SearchPostForumResIdl(SearchPostForumResIdl&& from) noexcept
    : SearchPostForumResIdl() {
    *this = ::std::move(from);
  }

  inline SearchPostForumResIdl& operator=(const SearchPostForumResIdl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchPostForumResIdl& operator=(SearchPostForumResIdl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchPostForumResIdl& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchPostForumResIdl* internal_default_instance() {
    return reinterpret_cast<const SearchPostForumResIdl*>(
               &_SearchPostForumResIdl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchPostForumResIdl& a, SearchPostForumResIdl& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchPostForumResIdl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchPostForumResIdl* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchPostForumResIdl* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchPostForumResIdl>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchPostForumResIdl& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchPostForumResIdl& from) {
    SearchPostForumResIdl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchPostForumResIdl* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SearchPostForumResIdl";
  }
  protected:
  explicit SearchPostForumResIdl(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchPostForumResIdl_DataRes DataRes;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .Error error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::Error& error() const;
  PROTOBUF_NODISCARD ::Error* release_error();
  ::Error* mutable_error();
  void set_allocated_error(::Error* value);
  void unsafe_arena_set_allocated_error(::Error* value);
  ::Error* unsafe_arena_release_error();

  private:
  const ::Error& _internal_error() const;
  ::Error* _internal_mutable_error();

  public:
  // .SearchPostForumResIdl.DataRes data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::SearchPostForumResIdl_DataRes& data() const;
  PROTOBUF_NODISCARD ::SearchPostForumResIdl_DataRes* release_data();
  ::SearchPostForumResIdl_DataRes* mutable_data();
  void set_allocated_data(::SearchPostForumResIdl_DataRes* value);
  void unsafe_arena_set_allocated_data(::SearchPostForumResIdl_DataRes* value);
  ::SearchPostForumResIdl_DataRes* unsafe_arena_release_data();

  private:
  const ::SearchPostForumResIdl_DataRes& _internal_data() const;
  ::SearchPostForumResIdl_DataRes* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:SearchPostForumResIdl)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Error* error_;
    ::SearchPostForumResIdl_DataRes* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SearchPostForumResIdl_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SearchPostForumResIdl_DataRes_SearchForum

// int64 forum_id = 1;
inline void SearchPostForumResIdl_DataRes_SearchForum::clear_forum_id() {
  _impl_.forum_id_ = ::int64_t{0};
}
inline ::int64_t SearchPostForumResIdl_DataRes_SearchForum::forum_id() const {
  // @@protoc_insertion_point(field_get:SearchPostForumResIdl.DataRes.SearchForum.forum_id)
  return _internal_forum_id();
}
inline void SearchPostForumResIdl_DataRes_SearchForum::set_forum_id(::int64_t value) {
  _internal_set_forum_id(value);
  // @@protoc_insertion_point(field_set:SearchPostForumResIdl.DataRes.SearchForum.forum_id)
}
inline ::int64_t SearchPostForumResIdl_DataRes_SearchForum::_internal_forum_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_id_;
}
inline void SearchPostForumResIdl_DataRes_SearchForum::_internal_set_forum_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_id_ = value;
}

// string forum_name = 2;
inline void SearchPostForumResIdl_DataRes_SearchForum::clear_forum_name() {
  _impl_.forum_name_.ClearToEmpty();
}
inline const std::string& SearchPostForumResIdl_DataRes_SearchForum::forum_name() const {
  // @@protoc_insertion_point(field_get:SearchPostForumResIdl.DataRes.SearchForum.forum_name)
  return _internal_forum_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchPostForumResIdl_DataRes_SearchForum::set_forum_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchPostForumResIdl.DataRes.SearchForum.forum_name)
}
inline std::string* SearchPostForumResIdl_DataRes_SearchForum::mutable_forum_name() {
  std::string* _s = _internal_mutable_forum_name();
  // @@protoc_insertion_point(field_mutable:SearchPostForumResIdl.DataRes.SearchForum.forum_name)
  return _s;
}
inline const std::string& SearchPostForumResIdl_DataRes_SearchForum::_internal_forum_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_name_.Get();
}
inline void SearchPostForumResIdl_DataRes_SearchForum::_internal_set_forum_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchPostForumResIdl_DataRes_SearchForum::_internal_mutable_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.forum_name_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchPostForumResIdl_DataRes_SearchForum::release_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchPostForumResIdl.DataRes.SearchForum.forum_name)
  return _impl_.forum_name_.Release();
}
inline void SearchPostForumResIdl_DataRes_SearchForum::set_allocated_forum_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forum_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.forum_name_.IsDefault()) {
          _impl_.forum_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchPostForumResIdl.DataRes.SearchForum.forum_name)
}

// repeated .FrsTabInfo tab_info = 9;
inline int SearchPostForumResIdl_DataRes_SearchForum::_internal_tab_info_size() const {
  return _internal_tab_info().size();
}
inline int SearchPostForumResIdl_DataRes_SearchForum::tab_info_size() const {
  return _internal_tab_info_size();
}
inline ::FrsTabInfo* SearchPostForumResIdl_DataRes_SearchForum::mutable_tab_info(int index) {
  // @@protoc_insertion_point(field_mutable:SearchPostForumResIdl.DataRes.SearchForum.tab_info)
  return _internal_mutable_tab_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >*
SearchPostForumResIdl_DataRes_SearchForum::mutable_tab_info() {
  // @@protoc_insertion_point(field_mutable_list:SearchPostForumResIdl.DataRes.SearchForum.tab_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tab_info();
}
inline const ::FrsTabInfo& SearchPostForumResIdl_DataRes_SearchForum::tab_info(int index) const {
  // @@protoc_insertion_point(field_get:SearchPostForumResIdl.DataRes.SearchForum.tab_info)
    return _internal_tab_info().Get(index);
}
inline ::FrsTabInfo* SearchPostForumResIdl_DataRes_SearchForum::add_tab_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::FrsTabInfo* _add = _internal_mutable_tab_info()->Add();
  // @@protoc_insertion_point(field_add:SearchPostForumResIdl.DataRes.SearchForum.tab_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >&
SearchPostForumResIdl_DataRes_SearchForum::tab_info() const {
  // @@protoc_insertion_point(field_list:SearchPostForumResIdl.DataRes.SearchForum.tab_info)
  return _internal_tab_info();
}
inline const ::google::protobuf::RepeatedPtrField<::FrsTabInfo>&
SearchPostForumResIdl_DataRes_SearchForum::_internal_tab_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tab_info_;
}
inline ::google::protobuf::RepeatedPtrField<::FrsTabInfo>*
SearchPostForumResIdl_DataRes_SearchForum::_internal_mutable_tab_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tab_info_;
}

// -------------------------------------------------------------------

// SearchPostForumResIdl_DataRes

// .SearchPostForumResIdl.DataRes.SearchForum exact_match = 1;
inline bool SearchPostForumResIdl_DataRes::has_exact_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exact_match_ != nullptr);
  return value;
}
inline void SearchPostForumResIdl_DataRes::clear_exact_match() {
  if (_impl_.exact_match_ != nullptr) _impl_.exact_match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SearchPostForumResIdl_DataRes_SearchForum& SearchPostForumResIdl_DataRes::_internal_exact_match() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::SearchPostForumResIdl_DataRes_SearchForum* p = _impl_.exact_match_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchPostForumResIdl_DataRes_SearchForum&>(::_SearchPostForumResIdl_DataRes_SearchForum_default_instance_);
}
inline const ::SearchPostForumResIdl_DataRes_SearchForum& SearchPostForumResIdl_DataRes::exact_match() const {
  // @@protoc_insertion_point(field_get:SearchPostForumResIdl.DataRes.exact_match)
  return _internal_exact_match();
}
inline void SearchPostForumResIdl_DataRes::unsafe_arena_set_allocated_exact_match(::SearchPostForumResIdl_DataRes_SearchForum* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exact_match_);
  }
  _impl_.exact_match_ = reinterpret_cast<::SearchPostForumResIdl_DataRes_SearchForum*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchPostForumResIdl.DataRes.exact_match)
}
inline ::SearchPostForumResIdl_DataRes_SearchForum* SearchPostForumResIdl_DataRes::release_exact_match() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SearchPostForumResIdl_DataRes_SearchForum* released = _impl_.exact_match_;
  _impl_.exact_match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SearchPostForumResIdl_DataRes_SearchForum* SearchPostForumResIdl_DataRes::unsafe_arena_release_exact_match() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchPostForumResIdl.DataRes.exact_match)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SearchPostForumResIdl_DataRes_SearchForum* temp = _impl_.exact_match_;
  _impl_.exact_match_ = nullptr;
  return temp;
}
inline ::SearchPostForumResIdl_DataRes_SearchForum* SearchPostForumResIdl_DataRes::_internal_mutable_exact_match() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.exact_match_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchPostForumResIdl_DataRes_SearchForum>(GetArenaForAllocation());
    _impl_.exact_match_ = reinterpret_cast<::SearchPostForumResIdl_DataRes_SearchForum*>(p);
  }
  return _impl_.exact_match_;
}
inline ::SearchPostForumResIdl_DataRes_SearchForum* SearchPostForumResIdl_DataRes::mutable_exact_match() {
  ::SearchPostForumResIdl_DataRes_SearchForum* _msg = _internal_mutable_exact_match();
  // @@protoc_insertion_point(field_mutable:SearchPostForumResIdl.DataRes.exact_match)
  return _msg;
}
inline void SearchPostForumResIdl_DataRes::set_allocated_exact_match(::SearchPostForumResIdl_DataRes_SearchForum* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::SearchPostForumResIdl_DataRes_SearchForum*>(_impl_.exact_match_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::SearchPostForumResIdl_DataRes_SearchForum*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.exact_match_ = reinterpret_cast<::SearchPostForumResIdl_DataRes_SearchForum*>(value);
  // @@protoc_insertion_point(field_set_allocated:SearchPostForumResIdl.DataRes.exact_match)
}

// -------------------------------------------------------------------

// SearchPostForumResIdl

// .Error error = 1;
inline bool SearchPostForumResIdl::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline const ::Error& SearchPostForumResIdl::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::Error&>(::_Error_default_instance_);
}
inline const ::Error& SearchPostForumResIdl::error() const {
  // @@protoc_insertion_point(field_get:SearchPostForumResIdl.error)
  return _internal_error();
}
inline void SearchPostForumResIdl::unsafe_arena_set_allocated_error(::Error* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::Error*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchPostForumResIdl.error)
}
inline ::Error* SearchPostForumResIdl::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Error* released = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Error* SearchPostForumResIdl::unsafe_arena_release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchPostForumResIdl.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::Error* SearchPostForumResIdl::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::Error>(GetArenaForAllocation());
    _impl_.error_ = reinterpret_cast<::Error*>(p);
  }
  return _impl_.error_;
}
inline ::Error* SearchPostForumResIdl::mutable_error() {
  ::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:SearchPostForumResIdl.error)
  return _msg;
}
inline void SearchPostForumResIdl::set_allocated_error(::Error* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::Error*>(value);
  // @@protoc_insertion_point(field_set_allocated:SearchPostForumResIdl.error)
}

// .SearchPostForumResIdl.DataRes data = 2;
inline bool SearchPostForumResIdl::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void SearchPostForumResIdl::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SearchPostForumResIdl_DataRes& SearchPostForumResIdl::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::SearchPostForumResIdl_DataRes* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::SearchPostForumResIdl_DataRes&>(::_SearchPostForumResIdl_DataRes_default_instance_);
}
inline const ::SearchPostForumResIdl_DataRes& SearchPostForumResIdl::data() const {
  // @@protoc_insertion_point(field_get:SearchPostForumResIdl.data)
  return _internal_data();
}
inline void SearchPostForumResIdl::unsafe_arena_set_allocated_data(::SearchPostForumResIdl_DataRes* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::SearchPostForumResIdl_DataRes*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchPostForumResIdl.data)
}
inline ::SearchPostForumResIdl_DataRes* SearchPostForumResIdl::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SearchPostForumResIdl_DataRes* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SearchPostForumResIdl_DataRes* SearchPostForumResIdl::unsafe_arena_release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SearchPostForumResIdl.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SearchPostForumResIdl_DataRes* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::SearchPostForumResIdl_DataRes* SearchPostForumResIdl::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::SearchPostForumResIdl_DataRes>(GetArenaForAllocation());
    _impl_.data_ = reinterpret_cast<::SearchPostForumResIdl_DataRes*>(p);
  }
  return _impl_.data_;
}
inline ::SearchPostForumResIdl_DataRes* SearchPostForumResIdl::mutable_data() {
  ::SearchPostForumResIdl_DataRes* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:SearchPostForumResIdl.data)
  return _msg;
}
inline void SearchPostForumResIdl::set_allocated_data(::SearchPostForumResIdl_DataRes* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::SearchPostForumResIdl_DataRes*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::SearchPostForumResIdl_DataRes*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::SearchPostForumResIdl_DataRes*>(value);
  // @@protoc_insertion_point(field_set_allocated:SearchPostForumResIdl.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_SearchPostForumResIdl_2eproto_2epb_2eh
