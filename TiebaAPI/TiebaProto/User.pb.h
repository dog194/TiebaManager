// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_User_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_User_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_User_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_User_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_User_2eproto;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_Balv;
struct User_BalvDefaultTypeInternal;
extern User_BalvDefaultTypeInternal _User_Balv_default_instance_;
class User_GodInfo;
struct User_GodInfoDefaultTypeInternal;
extern User_GodInfoDefaultTypeInternal _User_GodInfo_default_instance_;
class User_Icon;
struct User_IconDefaultTypeInternal;
extern User_IconDefaultTypeInternal _User_Icon_default_instance_;
class User_LikeForumInfo;
struct User_LikeForumInfoDefaultTypeInternal;
extern User_LikeForumInfoDefaultTypeInternal _User_LikeForumInfo_default_instance_;
class User_NewGodInfo;
struct User_NewGodInfoDefaultTypeInternal;
extern User_NewGodInfoDefaultTypeInternal _User_NewGodInfo_default_instance_;
class User_PrivSets;
struct User_PrivSetsDefaultTypeInternal;
extern User_PrivSetsDefaultTypeInternal _User_PrivSets_default_instance_;
class User_TbVipInfo;
struct User_TbVipInfoDefaultTypeInternal;
extern User_TbVipInfoDefaultTypeInternal _User_TbVipInfo_default_instance_;
class User_TshowInfo;
struct User_TshowInfoDefaultTypeInternal;
extern User_TshowInfoDefaultTypeInternal _User_TshowInfo_default_instance_;
class User_UserGrowth;
struct User_UserGrowthDefaultTypeInternal;
extern User_UserGrowthDefaultTypeInternal _User_UserGrowth_default_instance_;
class User_UserVipInfo;
struct User_UserVipInfoDefaultTypeInternal;
extern User_UserVipInfoDefaultTypeInternal _User_UserVipInfo_default_instance_;
class User_VipShowInfo;
struct User_VipShowInfoDefaultTypeInternal;
extern User_VipShowInfoDefaultTypeInternal _User_VipShowInfo_default_instance_;
class User_VirtualImageInfo;
struct User_VirtualImageInfoDefaultTypeInternal;
extern User_VirtualImageInfoDefaultTypeInternal _User_VirtualImageInfo_default_instance_;
class User_VirtualImageInfo_StateInfo;
struct User_VirtualImageInfo_StateInfoDefaultTypeInternal;
extern User_VirtualImageInfo_StateInfoDefaultTypeInternal _User_VirtualImageInfo_StateInfo_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class User_Balv final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.Balv) */ {
 public:
  inline User_Balv() : User_Balv(nullptr) {}
  ~User_Balv() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_Balv(::google::protobuf::internal::ConstantInitialized);

  User_Balv(const User_Balv& from);
  User_Balv(User_Balv&& from) noexcept
    : User_Balv() {
    *this = ::std::move(from);
  }

  inline User_Balv& operator=(const User_Balv& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Balv& operator=(User_Balv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Balv& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Balv* internal_default_instance() {
    return reinterpret_cast<const User_Balv*>(
               &_User_Balv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User_Balv& a, User_Balv& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Balv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Balv* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Balv* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Balv>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_Balv& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_Balv& from) {
    User_Balv::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_Balv* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.Balv";
  }
  protected:
  explicit User_Balv(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsBlackFieldNumber = 1,
    kIsBlockFieldNumber = 2,
    kDaysTofreeFieldNumber = 3,
  };
  // int32 is_black = 1;
  void clear_is_black() ;
  ::int32_t is_black() const;
  void set_is_black(::int32_t value);

  private:
  ::int32_t _internal_is_black() const;
  void _internal_set_is_black(::int32_t value);

  public:
  // int32 is_block = 2;
  void clear_is_block() ;
  ::int32_t is_block() const;
  void set_is_block(::int32_t value);

  private:
  ::int32_t _internal_is_block() const;
  void _internal_set_is_block(::int32_t value);

  public:
  // int32 days_tofree = 3;
  void clear_days_tofree() ;
  ::int32_t days_tofree() const;
  void set_days_tofree(::int32_t value);

  private:
  ::int32_t _internal_days_tofree() const;
  void _internal_set_days_tofree(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.Balv)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t is_black_;
    ::int32_t is_block_;
    ::int32_t days_tofree_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_Icon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.Icon) */ {
 public:
  inline User_Icon() : User_Icon(nullptr) {}
  ~User_Icon() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_Icon(::google::protobuf::internal::ConstantInitialized);

  User_Icon(const User_Icon& from);
  User_Icon(User_Icon&& from) noexcept
    : User_Icon() {
    *this = ::std::move(from);
  }

  inline User_Icon& operator=(const User_Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Icon& operator=(User_Icon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Icon& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Icon* internal_default_instance() {
    return reinterpret_cast<const User_Icon*>(
               &_User_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User_Icon& a, User_Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Icon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Icon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Icon* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Icon>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_Icon& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_Icon& from) {
    User_Icon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_Icon* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.Icon";
  }
  protected:
  explicit User_Icon(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpriteInfoFieldNumber = 8,
    kNameFieldNumber = 1,
    kUrlFieldNumber = 3,
    kIconFieldNumber = 4,
  };
  // repeated string sprite_info = 8;
  int sprite_info_size() const;
  private:
  int _internal_sprite_info_size() const;

  public:
  void clear_sprite_info() ;
  const std::string& sprite_info(int index) const;
  std::string* mutable_sprite_info(int index);
  void set_sprite_info(int index, const std::string& value);
  void set_sprite_info(int index, std::string&& value);
  void set_sprite_info(int index, const char* value);
  void set_sprite_info(int index, const char* value, std::size_t size);
  void set_sprite_info(int index, absl::string_view value);
  std::string* add_sprite_info();
  void add_sprite_info(const std::string& value);
  void add_sprite_info(std::string&& value);
  void add_sprite_info(const char* value);
  void add_sprite_info(const char* value, std::size_t size);
  void add_sprite_info(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& sprite_info() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_sprite_info();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_sprite_info() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_sprite_info();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string url = 3;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string icon = 4;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* ptr);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // @@protoc_insertion_point(class_scope:User.Icon)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 4, 0, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> sprite_info_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_TshowInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.TshowInfo) */ {
 public:
  inline User_TshowInfo() : User_TshowInfo(nullptr) {}
  ~User_TshowInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_TshowInfo(::google::protobuf::internal::ConstantInitialized);

  User_TshowInfo(const User_TshowInfo& from);
  User_TshowInfo(User_TshowInfo&& from) noexcept
    : User_TshowInfo() {
    *this = ::std::move(from);
  }

  inline User_TshowInfo& operator=(const User_TshowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_TshowInfo& operator=(User_TshowInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_TshowInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_TshowInfo* internal_default_instance() {
    return reinterpret_cast<const User_TshowInfo*>(
               &_User_TshowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User_TshowInfo& a, User_TshowInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_TshowInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_TshowInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_TshowInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_TshowInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_TshowInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_TshowInfo& from) {
    User_TshowInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_TshowInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.TshowInfo";
  }
  protected:
  explicit User_TshowInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
    kNameFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // string icon = 1;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* ptr);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string url = 3;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:User.TshowInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 34, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr icon_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_PrivSets final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.PrivSets) */ {
 public:
  inline User_PrivSets() : User_PrivSets(nullptr) {}
  ~User_PrivSets() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_PrivSets(::google::protobuf::internal::ConstantInitialized);

  User_PrivSets(const User_PrivSets& from);
  User_PrivSets(User_PrivSets&& from) noexcept
    : User_PrivSets() {
    *this = ::std::move(from);
  }

  inline User_PrivSets& operator=(const User_PrivSets& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_PrivSets& operator=(User_PrivSets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_PrivSets& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_PrivSets* internal_default_instance() {
    return reinterpret_cast<const User_PrivSets*>(
               &_User_PrivSets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User_PrivSets& a, User_PrivSets& b) {
    a.Swap(&b);
  }
  inline void Swap(User_PrivSets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_PrivSets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_PrivSets* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_PrivSets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_PrivSets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_PrivSets& from) {
    User_PrivSets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_PrivSets* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.PrivSets";
  }
  protected:
  explicit User_PrivSets(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kLikeFieldNumber = 2,
    kGroupFieldNumber = 3,
    kPostFieldNumber = 4,
    kFriendFieldNumber = 5,
    kLiveFieldNumber = 6,
    kReplyFieldNumber = 7,
    kBazhuShowInsideFieldNumber = 8,
    kBazhuShowOutsideFieldNumber = 9,
  };
  // int32 location = 1;
  void clear_location() ;
  ::int32_t location() const;
  void set_location(::int32_t value);

  private:
  ::int32_t _internal_location() const;
  void _internal_set_location(::int32_t value);

  public:
  // int32 like = 2;
  void clear_like() ;
  ::int32_t like() const;
  void set_like(::int32_t value);

  private:
  ::int32_t _internal_like() const;
  void _internal_set_like(::int32_t value);

  public:
  // int32 group = 3;
  void clear_group() ;
  ::int32_t group() const;
  void set_group(::int32_t value);

  private:
  ::int32_t _internal_group() const;
  void _internal_set_group(::int32_t value);

  public:
  // int32 post = 4;
  void clear_post() ;
  ::int32_t post() const;
  void set_post(::int32_t value);

  private:
  ::int32_t _internal_post() const;
  void _internal_set_post(::int32_t value);

  public:
  // int32 friend = 5;
  void clear_friend_() ;
  ::int32_t friend_() const;
  void set_friend_(::int32_t value);

  private:
  ::int32_t _internal_friend_() const;
  void _internal_set_friend_(::int32_t value);

  public:
  // int32 live = 6;
  void clear_live() ;
  ::int32_t live() const;
  void set_live(::int32_t value);

  private:
  ::int32_t _internal_live() const;
  void _internal_set_live(::int32_t value);

  public:
  // int32 reply = 7;
  void clear_reply() ;
  ::int32_t reply() const;
  void set_reply(::int32_t value);

  private:
  ::int32_t _internal_reply() const;
  void _internal_set_reply(::int32_t value);

  public:
  // int32 bazhu_show_inside = 8;
  void clear_bazhu_show_inside() ;
  ::int32_t bazhu_show_inside() const;
  void set_bazhu_show_inside(::int32_t value);

  private:
  ::int32_t _internal_bazhu_show_inside() const;
  void _internal_set_bazhu_show_inside(::int32_t value);

  public:
  // int32 bazhu_show_outside = 9;
  void clear_bazhu_show_outside() ;
  ::int32_t bazhu_show_outside() const;
  void set_bazhu_show_outside(::int32_t value);

  private:
  ::int32_t _internal_bazhu_show_outside() const;
  void _internal_set_bazhu_show_outside(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.PrivSets)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t location_;
    ::int32_t like_;
    ::int32_t group_;
    ::int32_t post_;
    ::int32_t friend__;
    ::int32_t live_;
    ::int32_t reply_;
    ::int32_t bazhu_show_inside_;
    ::int32_t bazhu_show_outside_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_LikeForumInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.LikeForumInfo) */ {
 public:
  inline User_LikeForumInfo() : User_LikeForumInfo(nullptr) {}
  ~User_LikeForumInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_LikeForumInfo(::google::protobuf::internal::ConstantInitialized);

  User_LikeForumInfo(const User_LikeForumInfo& from);
  User_LikeForumInfo(User_LikeForumInfo&& from) noexcept
    : User_LikeForumInfo() {
    *this = ::std::move(from);
  }

  inline User_LikeForumInfo& operator=(const User_LikeForumInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_LikeForumInfo& operator=(User_LikeForumInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_LikeForumInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_LikeForumInfo* internal_default_instance() {
    return reinterpret_cast<const User_LikeForumInfo*>(
               &_User_LikeForumInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User_LikeForumInfo& a, User_LikeForumInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_LikeForumInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_LikeForumInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_LikeForumInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_LikeForumInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_LikeForumInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_LikeForumInfo& from) {
    User_LikeForumInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_LikeForumInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.LikeForumInfo";
  }
  protected:
  explicit User_LikeForumInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForumNameFieldNumber = 1,
    kForumIdFieldNumber = 2,
  };
  // string forum_name = 1;
  void clear_forum_name() ;
  const std::string& forum_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forum_name(Arg_&& arg, Args_... args);
  std::string* mutable_forum_name();
  PROTOBUF_NODISCARD std::string* release_forum_name();
  void set_allocated_forum_name(std::string* ptr);

  private:
  const std::string& _internal_forum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forum_name(
      const std::string& value);
  std::string* _internal_mutable_forum_name();

  public:
  // uint64 forum_id = 2;
  void clear_forum_id() ;
  ::uint64_t forum_id() const;
  void set_forum_id(::uint64_t value);

  private:
  ::uint64_t _internal_forum_id() const;
  void _internal_set_forum_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.LikeForumInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 37, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr forum_name_;
    ::uint64_t forum_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_UserVipInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.UserVipInfo) */ {
 public:
  inline User_UserVipInfo() : User_UserVipInfo(nullptr) {}
  ~User_UserVipInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_UserVipInfo(::google::protobuf::internal::ConstantInitialized);

  User_UserVipInfo(const User_UserVipInfo& from);
  User_UserVipInfo(User_UserVipInfo&& from) noexcept
    : User_UserVipInfo() {
    *this = ::std::move(from);
  }

  inline User_UserVipInfo& operator=(const User_UserVipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_UserVipInfo& operator=(User_UserVipInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_UserVipInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_UserVipInfo* internal_default_instance() {
    return reinterpret_cast<const User_UserVipInfo*>(
               &_User_UserVipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(User_UserVipInfo& a, User_UserVipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_UserVipInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_UserVipInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_UserVipInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_UserVipInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_UserVipInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_UserVipInfo& from) {
    User_UserVipInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_UserVipInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.UserVipInfo";
  }
  protected:
  explicit User_UserVipInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconUrlFieldNumber = 8,
    kVStatusFieldNumber = 1,
    kSTimeFieldNumber = 2,
    kETimeFieldNumber = 3,
    kExtScoreFieldNumber = 4,
    kVLevelFieldNumber = 5,
    kAScoreFieldNumber = 6,
    kNScoreFieldNumber = 7,
    kStayDayFieldNumber = 9,
  };
  // string icon_url = 8;
  void clear_icon_url() ;
  const std::string& icon_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon_url(Arg_&& arg, Args_... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* ptr);

  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(
      const std::string& value);
  std::string* _internal_mutable_icon_url();

  public:
  // uint32 v_status = 1;
  void clear_v_status() ;
  ::uint32_t v_status() const;
  void set_v_status(::uint32_t value);

  private:
  ::uint32_t _internal_v_status() const;
  void _internal_set_v_status(::uint32_t value);

  public:
  // uint32 s_time = 2;
  void clear_s_time() ;
  ::uint32_t s_time() const;
  void set_s_time(::uint32_t value);

  private:
  ::uint32_t _internal_s_time() const;
  void _internal_set_s_time(::uint32_t value);

  public:
  // uint32 e_time = 3;
  void clear_e_time() ;
  ::uint32_t e_time() const;
  void set_e_time(::uint32_t value);

  private:
  ::uint32_t _internal_e_time() const;
  void _internal_set_e_time(::uint32_t value);

  public:
  // uint32 ext_score = 4;
  void clear_ext_score() ;
  ::uint32_t ext_score() const;
  void set_ext_score(::uint32_t value);

  private:
  ::uint32_t _internal_ext_score() const;
  void _internal_set_ext_score(::uint32_t value);

  public:
  // uint32 v_level = 5;
  void clear_v_level() ;
  ::uint32_t v_level() const;
  void set_v_level(::uint32_t value);

  private:
  ::uint32_t _internal_v_level() const;
  void _internal_set_v_level(::uint32_t value);

  public:
  // int32 a_score = 6;
  void clear_a_score() ;
  ::int32_t a_score() const;
  void set_a_score(::int32_t value);

  private:
  ::int32_t _internal_a_score() const;
  void _internal_set_a_score(::int32_t value);

  public:
  // uint32 n_score = 7;
  void clear_n_score() ;
  ::uint32_t n_score() const;
  void set_n_score(::uint32_t value);

  private:
  ::uint32_t _internal_n_score() const;
  void _internal_set_n_score(::uint32_t value);

  public:
  // uint32 stay_day = 9;
  void clear_stay_day() ;
  ::uint32_t stay_day() const;
  void set_stay_day(::uint32_t value);

  private:
  ::uint32_t _internal_stay_day() const;
  void _internal_set_stay_day(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.UserVipInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr icon_url_;
    ::uint32_t v_status_;
    ::uint32_t s_time_;
    ::uint32_t e_time_;
    ::uint32_t ext_score_;
    ::uint32_t v_level_;
    ::int32_t a_score_;
    ::uint32_t n_score_;
    ::uint32_t stay_day_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_GodInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.GodInfo) */ {
 public:
  inline User_GodInfo() : User_GodInfo(nullptr) {}
  ~User_GodInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_GodInfo(::google::protobuf::internal::ConstantInitialized);

  User_GodInfo(const User_GodInfo& from);
  User_GodInfo(User_GodInfo&& from) noexcept
    : User_GodInfo() {
    *this = ::std::move(from);
  }

  inline User_GodInfo& operator=(const User_GodInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_GodInfo& operator=(User_GodInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_GodInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_GodInfo* internal_default_instance() {
    return reinterpret_cast<const User_GodInfo*>(
               &_User_GodInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(User_GodInfo& a, User_GodInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_GodInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_GodInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_GodInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_GodInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_GodInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_GodInfo& from) {
    User_GodInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_GodInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.GodInfo";
  }
  protected:
  explicit User_GodInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntroFieldNumber = 2,
    kRecommendReasonFieldNumber = 6,
    kForumNameFieldNumber = 7,
    kPrefixFieldNumber = 9,
    kIdFieldNumber = 1,
    kFidFieldNumber = 4,
    kTypeFieldNumber = 3,
    kFollowedFieldNumber = 5,
    kCanSendMsgFieldNumber = 8,
  };
  // string intro = 2;
  void clear_intro() ;
  const std::string& intro() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intro(Arg_&& arg, Args_... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* ptr);

  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(
      const std::string& value);
  std::string* _internal_mutable_intro();

  public:
  // string recommend_reason = 6;
  void clear_recommend_reason() ;
  const std::string& recommend_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recommend_reason(Arg_&& arg, Args_... args);
  std::string* mutable_recommend_reason();
  PROTOBUF_NODISCARD std::string* release_recommend_reason();
  void set_allocated_recommend_reason(std::string* ptr);

  private:
  const std::string& _internal_recommend_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recommend_reason(
      const std::string& value);
  std::string* _internal_mutable_recommend_reason();

  public:
  // string forum_name = 7;
  void clear_forum_name() ;
  const std::string& forum_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forum_name(Arg_&& arg, Args_... args);
  std::string* mutable_forum_name();
  PROTOBUF_NODISCARD std::string* release_forum_name();
  void set_allocated_forum_name(std::string* ptr);

  private:
  const std::string& _internal_forum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forum_name(
      const std::string& value);
  std::string* _internal_mutable_forum_name();

  public:
  // string prefix = 9;
  void clear_prefix() ;
  const std::string& prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* ptr);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 fid = 4;
  void clear_fid() ;
  ::int64_t fid() const;
  void set_fid(::int64_t value);

  private:
  ::int64_t _internal_fid() const;
  void _internal_set_fid(::int64_t value);

  public:
  // int32 type = 3;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // int32 followed = 5;
  void clear_followed() ;
  ::int32_t followed() const;
  void set_followed(::int32_t value);

  private:
  ::int32_t _internal_followed() const;
  void _internal_set_followed(::int32_t value);

  public:
  // int32 can_send_msg = 8;
  void clear_can_send_msg() ;
  ::int32_t can_send_msg() const;
  void set_can_send_msg(::int32_t value);

  private:
  ::int32_t _internal_can_send_msg() const;
  void _internal_set_can_send_msg(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.GodInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 66, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr intro_;
    ::google::protobuf::internal::ArenaStringPtr recommend_reason_;
    ::google::protobuf::internal::ArenaStringPtr forum_name_;
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    ::int64_t id_;
    ::int64_t fid_;
    ::int32_t type_;
    ::int32_t followed_;
    ::int32_t can_send_msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_VipShowInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.VipShowInfo) */ {
 public:
  inline User_VipShowInfo() : User_VipShowInfo(nullptr) {}
  ~User_VipShowInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_VipShowInfo(::google::protobuf::internal::ConstantInitialized);

  User_VipShowInfo(const User_VipShowInfo& from);
  User_VipShowInfo(User_VipShowInfo&& from) noexcept
    : User_VipShowInfo() {
    *this = ::std::move(from);
  }

  inline User_VipShowInfo& operator=(const User_VipShowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_VipShowInfo& operator=(User_VipShowInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_VipShowInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_VipShowInfo* internal_default_instance() {
    return reinterpret_cast<const User_VipShowInfo*>(
               &_User_VipShowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(User_VipShowInfo& a, User_VipShowInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_VipShowInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_VipShowInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_VipShowInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_VipShowInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_VipShowInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_VipShowInfo& from) {
    User_VipShowInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_VipShowInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.VipShowInfo";
  }
  protected:
  explicit User_VipShowInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVipIconFieldNumber = 1,
    kContentFieldNumber = 2,
    kLinkFieldNumber = 3,
    kTitleFieldNumber = 4,
  };
  // string vip_icon = 1;
  void clear_vip_icon() ;
  const std::string& vip_icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vip_icon(Arg_&& arg, Args_... args);
  std::string* mutable_vip_icon();
  PROTOBUF_NODISCARD std::string* release_vip_icon();
  void set_allocated_vip_icon(std::string* ptr);

  private:
  const std::string& _internal_vip_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vip_icon(
      const std::string& value);
  std::string* _internal_mutable_vip_icon();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* ptr);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string link = 3;
  void clear_link() ;
  const std::string& link() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_link(Arg_&& arg, Args_... args);
  std::string* mutable_link();
  PROTOBUF_NODISCARD std::string* release_link();
  void set_allocated_link(std::string* ptr);

  private:
  const std::string& _internal_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_link(
      const std::string& value);
  std::string* _internal_mutable_link();

  public:
  // string title = 4;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // @@protoc_insertion_point(class_scope:User.VipShowInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr vip_icon_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr link_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_TbVipInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.TbVipInfo) */ {
 public:
  inline User_TbVipInfo() : User_TbVipInfo(nullptr) {}
  ~User_TbVipInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_TbVipInfo(::google::protobuf::internal::ConstantInitialized);

  User_TbVipInfo(const User_TbVipInfo& from);
  User_TbVipInfo(User_TbVipInfo&& from) noexcept
    : User_TbVipInfo() {
    *this = ::std::move(from);
  }

  inline User_TbVipInfo& operator=(const User_TbVipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_TbVipInfo& operator=(User_TbVipInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_TbVipInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_TbVipInfo* internal_default_instance() {
    return reinterpret_cast<const User_TbVipInfo*>(
               &_User_TbVipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(User_TbVipInfo& a, User_TbVipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_TbVipInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_TbVipInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_TbVipInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_TbVipInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_TbVipInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_TbVipInfo& from) {
    User_TbVipInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_TbVipInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.TbVipInfo";
  }
  protected:
  explicit User_TbVipInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntroFieldNumber = 1,
    kVUrlFieldNumber = 2,
    kVDetailFieldNumber = 3,
  };
  // string intro = 1;
  void clear_intro() ;
  const std::string& intro() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intro(Arg_&& arg, Args_... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* ptr);

  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(
      const std::string& value);
  std::string* _internal_mutable_intro();

  public:
  // string v_url = 2;
  void clear_v_url() ;
  const std::string& v_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_v_url(Arg_&& arg, Args_... args);
  std::string* mutable_v_url();
  PROTOBUF_NODISCARD std::string* release_v_url();
  void set_allocated_v_url(std::string* ptr);

  private:
  const std::string& _internal_v_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v_url(
      const std::string& value);
  std::string* _internal_mutable_v_url();

  public:
  // string v_detail = 3;
  void clear_v_detail() ;
  const std::string& v_detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_v_detail(Arg_&& arg, Args_... args);
  std::string* mutable_v_detail();
  PROTOBUF_NODISCARD std::string* release_v_detail();
  void set_allocated_v_detail(std::string* ptr);

  private:
  const std::string& _internal_v_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v_detail(
      const std::string& value);
  std::string* _internal_mutable_v_detail();

  public:
  // @@protoc_insertion_point(class_scope:User.TbVipInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr intro_;
    ::google::protobuf::internal::ArenaStringPtr v_url_;
    ::google::protobuf::internal::ArenaStringPtr v_detail_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_NewGodInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.NewGodInfo) */ {
 public:
  inline User_NewGodInfo() : User_NewGodInfo(nullptr) {}
  ~User_NewGodInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_NewGodInfo(::google::protobuf::internal::ConstantInitialized);

  User_NewGodInfo(const User_NewGodInfo& from);
  User_NewGodInfo(User_NewGodInfo&& from) noexcept
    : User_NewGodInfo() {
    *this = ::std::move(from);
  }

  inline User_NewGodInfo& operator=(const User_NewGodInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_NewGodInfo& operator=(User_NewGodInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_NewGodInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_NewGodInfo* internal_default_instance() {
    return reinterpret_cast<const User_NewGodInfo*>(
               &_User_NewGodInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(User_NewGodInfo& a, User_NewGodInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_NewGodInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_NewGodInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_NewGodInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_NewGodInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_NewGodInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_NewGodInfo& from) {
    User_NewGodInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_NewGodInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.NewGodInfo";
  }
  protected:
  explicit User_NewGodInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 3,
    kTypeNameFieldNumber = 5,
    kStatusFieldNumber = 1,
    kFieldIdFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // string field_name = 3;
  void clear_field_name() ;
  const std::string& field_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_name(Arg_&& arg, Args_... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* ptr);

  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(
      const std::string& value);
  std::string* _internal_mutable_field_name();

  public:
  // string type_name = 5;
  void clear_type_name() ;
  const std::string& type_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* ptr);

  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(
      const std::string& value);
  std::string* _internal_mutable_type_name();

  public:
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // uint32 field_id = 2;
  void clear_field_id() ;
  ::uint32_t field_id() const;
  void set_field_id(::uint32_t value);

  private:
  ::uint32_t _internal_field_id() const;
  void _internal_set_field_id(::uint32_t value);

  public:
  // uint32 type = 4;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.NewGodInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr field_name_;
    ::google::protobuf::internal::ArenaStringPtr type_name_;
    ::int32_t status_;
    ::uint32_t field_id_;
    ::uint32_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_VirtualImageInfo_StateInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.VirtualImageInfo.StateInfo) */ {
 public:
  inline User_VirtualImageInfo_StateInfo() : User_VirtualImageInfo_StateInfo(nullptr) {}
  ~User_VirtualImageInfo_StateInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_VirtualImageInfo_StateInfo(::google::protobuf::internal::ConstantInitialized);

  User_VirtualImageInfo_StateInfo(const User_VirtualImageInfo_StateInfo& from);
  User_VirtualImageInfo_StateInfo(User_VirtualImageInfo_StateInfo&& from) noexcept
    : User_VirtualImageInfo_StateInfo() {
    *this = ::std::move(from);
  }

  inline User_VirtualImageInfo_StateInfo& operator=(const User_VirtualImageInfo_StateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_VirtualImageInfo_StateInfo& operator=(User_VirtualImageInfo_StateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_VirtualImageInfo_StateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_VirtualImageInfo_StateInfo* internal_default_instance() {
    return reinterpret_cast<const User_VirtualImageInfo_StateInfo*>(
               &_User_VirtualImageInfo_StateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(User_VirtualImageInfo_StateInfo& a, User_VirtualImageInfo_StateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_VirtualImageInfo_StateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_VirtualImageInfo_StateInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_VirtualImageInfo_StateInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_VirtualImageInfo_StateInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_VirtualImageInfo_StateInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_VirtualImageInfo_StateInfo& from) {
    User_VirtualImageInfo_StateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_VirtualImageInfo_StateInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.VirtualImageInfo.StateInfo";
  }
  protected:
  explicit User_VirtualImageInfo_StateInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string icon = 1;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* ptr);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // @@protoc_insertion_point(class_scope:User.VirtualImageInfo.StateInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr icon_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_VirtualImageInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.VirtualImageInfo) */ {
 public:
  inline User_VirtualImageInfo() : User_VirtualImageInfo(nullptr) {}
  ~User_VirtualImageInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_VirtualImageInfo(::google::protobuf::internal::ConstantInitialized);

  User_VirtualImageInfo(const User_VirtualImageInfo& from);
  User_VirtualImageInfo(User_VirtualImageInfo&& from) noexcept
    : User_VirtualImageInfo() {
    *this = ::std::move(from);
  }

  inline User_VirtualImageInfo& operator=(const User_VirtualImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_VirtualImageInfo& operator=(User_VirtualImageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_VirtualImageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_VirtualImageInfo* internal_default_instance() {
    return reinterpret_cast<const User_VirtualImageInfo*>(
               &_User_VirtualImageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(User_VirtualImageInfo& a, User_VirtualImageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_VirtualImageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_VirtualImageInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_VirtualImageInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_VirtualImageInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_VirtualImageInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_VirtualImageInfo& from) {
    User_VirtualImageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_VirtualImageInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.VirtualImageInfo";
  }
  protected:
  explicit User_VirtualImageInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef User_VirtualImageInfo_StateInfo StateInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualBackgroundFieldNumber = 6,
    kPersonalStateFieldNumber = 9,
    kIssetVirtualImageFieldNumber = 1,
    kIsDisplayFieldNumber = 12,
  };
  // string virtual_background = 6;
  void clear_virtual_background() ;
  const std::string& virtual_background() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_background(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_background();
  PROTOBUF_NODISCARD std::string* release_virtual_background();
  void set_allocated_virtual_background(std::string* ptr);

  private:
  const std::string& _internal_virtual_background() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_background(
      const std::string& value);
  std::string* _internal_mutable_virtual_background();

  public:
  // .User.VirtualImageInfo.StateInfo personal_state = 9;
  bool has_personal_state() const;
  void clear_personal_state() ;
  const ::User_VirtualImageInfo_StateInfo& personal_state() const;
  PROTOBUF_NODISCARD ::User_VirtualImageInfo_StateInfo* release_personal_state();
  ::User_VirtualImageInfo_StateInfo* mutable_personal_state();
  void set_allocated_personal_state(::User_VirtualImageInfo_StateInfo* value);
  void unsafe_arena_set_allocated_personal_state(::User_VirtualImageInfo_StateInfo* value);
  ::User_VirtualImageInfo_StateInfo* unsafe_arena_release_personal_state();

  private:
  const ::User_VirtualImageInfo_StateInfo& _internal_personal_state() const;
  ::User_VirtualImageInfo_StateInfo* _internal_mutable_personal_state();

  public:
  // int32 isset_virtual_image = 1;
  void clear_isset_virtual_image() ;
  ::int32_t isset_virtual_image() const;
  void set_isset_virtual_image(::int32_t value);

  private:
  ::int32_t _internal_isset_virtual_image() const;
  void _internal_set_isset_virtual_image(::int32_t value);

  public:
  // int32 is_display = 12;
  void clear_is_display() ;
  ::int32_t is_display() const;
  void set_is_display(::int32_t value);

  private:
  ::int32_t _internal_is_display() const;
  void _internal_set_is_display(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.VirtualImageInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr virtual_background_;
    ::User_VirtualImageInfo_StateInfo* personal_state_;
    ::int32_t isset_virtual_image_;
    ::int32_t is_display_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_UserGrowth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.UserGrowth) */ {
 public:
  inline User_UserGrowth() : User_UserGrowth(nullptr) {}
  ~User_UserGrowth() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_UserGrowth(::google::protobuf::internal::ConstantInitialized);

  User_UserGrowth(const User_UserGrowth& from);
  User_UserGrowth(User_UserGrowth&& from) noexcept
    : User_UserGrowth() {
    *this = ::std::move(from);
  }

  inline User_UserGrowth& operator=(const User_UserGrowth& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_UserGrowth& operator=(User_UserGrowth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_UserGrowth& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_UserGrowth* internal_default_instance() {
    return reinterpret_cast<const User_UserGrowth*>(
               &_User_UserGrowth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(User_UserGrowth& a, User_UserGrowth& b) {
    a.Swap(&b);
  }
  inline void Swap(User_UserGrowth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_UserGrowth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_UserGrowth* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_UserGrowth>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_UserGrowth& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_UserGrowth& from) {
    User_UserGrowth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_UserGrowth* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.UserGrowth";
  }
  protected:
  explicit User_UserGrowth(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kTargetScoreFieldNumber = 3,
    kTmoneyFieldNumber = 4,
    kLevelIdFieldNumber = 1,
  };
  // int64 score = 2;
  void clear_score() ;
  ::int64_t score() const;
  void set_score(::int64_t value);

  private:
  ::int64_t _internal_score() const;
  void _internal_set_score(::int64_t value);

  public:
  // int64 target_score = 3;
  void clear_target_score() ;
  ::int64_t target_score() const;
  void set_target_score(::int64_t value);

  private:
  ::int64_t _internal_target_score() const;
  void _internal_set_target_score(::int64_t value);

  public:
  // double tmoney = 4;
  void clear_tmoney() ;
  double tmoney() const;
  void set_tmoney(double value);

  private:
  double _internal_tmoney() const;
  void _internal_set_tmoney(double value);

  public:
  // uint32 level_id = 1;
  void clear_level_id() ;
  ::uint32_t level_id() const;
  void set_level_id(::uint32_t value);

  private:
  ::uint32_t _internal_level_id() const;
  void _internal_set_level_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.UserGrowth)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t score_;
    ::int64_t target_score_;
    double tmoney_;
    ::uint32_t level_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User(::google::protobuf::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef User_Balv Balv;
  typedef User_Icon Icon;
  typedef User_TshowInfo TshowInfo;
  typedef User_PrivSets PrivSets;
  typedef User_LikeForumInfo LikeForumInfo;
  typedef User_UserVipInfo UserVipInfo;
  typedef User_GodInfo GodInfo;
  typedef User_VipShowInfo VipShowInfo;
  typedef User_TbVipInfo TbVipInfo;
  typedef User_NewGodInfo NewGodInfo;
  typedef User_VirtualImageInfo VirtualImageInfo;
  typedef User_UserGrowth UserGrowth;

  // accessors -------------------------------------------------------

  enum : int {
    kIconinfoFieldNumber = 17,
    kTshowIconFieldNumber = 18,
    kLikeForumFieldNumber = 47,
    kNewTshowIconFieldNumber = 65,
    kNameFieldNumber = 3,
    kNameShowFieldNumber = 4,
    kPortraitFieldNumber = 5,
    kRankFieldNumber = 12,
    kBawuTypeFieldNumber = 26,
    kPortraithFieldNumber = 27,
    kIpFieldNumber = 28,
    kBDUSSFieldNumber = 29,
    kIntroFieldNumber = 34,
    kTbAgeFieldNumber = 38,
    kSealPrefixFieldNumber = 79,
    kModifyAvatarDescFieldNumber = 98,
    kLevelInfluenceFieldNumber = 100,
    kUkFieldNumber = 107,
    kTiebaUidFieldNumber = 120,
    kLevelNameFieldNumber = 125,
    kIpAddressFieldNumber = 127,
    kEditingNicknameFieldNumber = 129,
    kDisplayIntroFieldNumber = 138,
    kAvatarUrlFieldNumber = 152,
    kBalvFieldNumber = 10,
    kPrivSetsFieldNumber = 45,
    kVipInfoFieldNumber = 61,
    kGodDataFieldNumber = 62,
    kVipShowInfoFieldNumber = 64,
    kTbVipFieldNumber = 72,
    kNewGodDataFieldNumber = 101,
    kVirtualImageInfoFieldNumber = 136,
    kUserGrowthFieldNumber = 137,
    kIdFieldNumber = 2,
    kUserhideFieldNumber = 9,
    kIsVerifyFieldNumber = 15,
    kIsInterestmanFieldNumber = 16,
    kUserTypeFieldNumber = 19,
    kIsCoreuserFieldNumber = 20,
    kLevelIdFieldNumber = 23,
    kIsBawuFieldNumber = 25,
    kFansNumFieldNumber = 30,
    kConcernNumFieldNumber = 31,
    kSexFieldNumber = 32,
    kMyLikeNumFieldNumber = 33,
    kPostNumFieldNumber = 37,
    kGenderFieldNumber = 42,
    kIsMaskFieldNumber = 43,
    kIsGuanfangFieldNumber = 52,
    kHeavyUserFieldNumber = 63,
    kNicknameUpdateTimeFieldNumber = 86,
    kThreadNumFieldNumber = 87,
    kAgreeNumFieldNumber = 88,
    kLeftCallNumFieldNumber = 89,
    kPrivThreadFieldNumber = 92,
    kCanModifyAvatarFieldNumber = 97,
    kInfluenceFieldNumber = 99,
    kIsDefaultAvatarFieldNumber = 106,
    kFavoriteNumFieldNumber = 109,
    kTotalAgreeNumFieldNumber = 118,
    kDisplayAuthTypeFieldNumber = 123,
    kIsNicknameEditingFieldNumber = 128,
  };
  // repeated .User.Icon iconinfo = 17;
  int iconinfo_size() const;
  private:
  int _internal_iconinfo_size() const;

  public:
  void clear_iconinfo() ;
  ::User_Icon* mutable_iconinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::User_Icon >*
      mutable_iconinfo();
  private:
  const ::google::protobuf::RepeatedPtrField<::User_Icon>& _internal_iconinfo() const;
  ::google::protobuf::RepeatedPtrField<::User_Icon>* _internal_mutable_iconinfo();
  public:
  const ::User_Icon& iconinfo(int index) const;
  ::User_Icon* add_iconinfo();
  const ::google::protobuf::RepeatedPtrField< ::User_Icon >&
      iconinfo() const;
  // repeated .User.TshowInfo tshow_icon = 18;
  int tshow_icon_size() const;
  private:
  int _internal_tshow_icon_size() const;

  public:
  void clear_tshow_icon() ;
  ::User_TshowInfo* mutable_tshow_icon(int index);
  ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >*
      mutable_tshow_icon();
  private:
  const ::google::protobuf::RepeatedPtrField<::User_TshowInfo>& _internal_tshow_icon() const;
  ::google::protobuf::RepeatedPtrField<::User_TshowInfo>* _internal_mutable_tshow_icon();
  public:
  const ::User_TshowInfo& tshow_icon(int index) const;
  ::User_TshowInfo* add_tshow_icon();
  const ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >&
      tshow_icon() const;
  // repeated .User.LikeForumInfo likeForum = 47;
  int likeforum_size() const;
  private:
  int _internal_likeforum_size() const;

  public:
  void clear_likeforum() ;
  ::User_LikeForumInfo* mutable_likeforum(int index);
  ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >*
      mutable_likeforum();
  private:
  const ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>& _internal_likeforum() const;
  ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>* _internal_mutable_likeforum();
  public:
  const ::User_LikeForumInfo& likeforum(int index) const;
  ::User_LikeForumInfo* add_likeforum();
  const ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >&
      likeforum() const;
  // repeated .User.TshowInfo new_tshow_icon = 65;
  int new_tshow_icon_size() const;
  private:
  int _internal_new_tshow_icon_size() const;

  public:
  void clear_new_tshow_icon() ;
  ::User_TshowInfo* mutable_new_tshow_icon(int index);
  ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >*
      mutable_new_tshow_icon();
  private:
  const ::google::protobuf::RepeatedPtrField<::User_TshowInfo>& _internal_new_tshow_icon() const;
  ::google::protobuf::RepeatedPtrField<::User_TshowInfo>* _internal_mutable_new_tshow_icon();
  public:
  const ::User_TshowInfo& new_tshow_icon(int index) const;
  ::User_TshowInfo* add_new_tshow_icon();
  const ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >&
      new_tshow_icon() const;
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string name_show = 4;
  void clear_name_show() ;
  const std::string& name_show() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_show(Arg_&& arg, Args_... args);
  std::string* mutable_name_show();
  PROTOBUF_NODISCARD std::string* release_name_show();
  void set_allocated_name_show(std::string* ptr);

  private:
  const std::string& _internal_name_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_show(
      const std::string& value);
  std::string* _internal_mutable_name_show();

  public:
  // string portrait = 5;
  void clear_portrait() ;
  const std::string& portrait() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_portrait(Arg_&& arg, Args_... args);
  std::string* mutable_portrait();
  PROTOBUF_NODISCARD std::string* release_portrait();
  void set_allocated_portrait(std::string* ptr);

  private:
  const std::string& _internal_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_portrait(
      const std::string& value);
  std::string* _internal_mutable_portrait();

  public:
  // string rank = 12;
  void clear_rank() ;
  const std::string& rank() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rank(Arg_&& arg, Args_... args);
  std::string* mutable_rank();
  PROTOBUF_NODISCARD std::string* release_rank();
  void set_allocated_rank(std::string* ptr);

  private:
  const std::string& _internal_rank() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rank(
      const std::string& value);
  std::string* _internal_mutable_rank();

  public:
  // string bawu_type = 26;
  void clear_bawu_type() ;
  const std::string& bawu_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bawu_type(Arg_&& arg, Args_... args);
  std::string* mutable_bawu_type();
  PROTOBUF_NODISCARD std::string* release_bawu_type();
  void set_allocated_bawu_type(std::string* ptr);

  private:
  const std::string& _internal_bawu_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bawu_type(
      const std::string& value);
  std::string* _internal_mutable_bawu_type();

  public:
  // string portraith = 27;
  void clear_portraith() ;
  const std::string& portraith() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_portraith(Arg_&& arg, Args_... args);
  std::string* mutable_portraith();
  PROTOBUF_NODISCARD std::string* release_portraith();
  void set_allocated_portraith(std::string* ptr);

  private:
  const std::string& _internal_portraith() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_portraith(
      const std::string& value);
  std::string* _internal_mutable_portraith();

  public:
  // string ip = 28;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ptr);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string BDUSS = 29;
  void clear_bduss() ;
  const std::string& bduss() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bduss(Arg_&& arg, Args_... args);
  std::string* mutable_bduss();
  PROTOBUF_NODISCARD std::string* release_bduss();
  void set_allocated_bduss(std::string* ptr);

  private:
  const std::string& _internal_bduss() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bduss(
      const std::string& value);
  std::string* _internal_mutable_bduss();

  public:
  // string intro = 34;
  void clear_intro() ;
  const std::string& intro() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intro(Arg_&& arg, Args_... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* ptr);

  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(
      const std::string& value);
  std::string* _internal_mutable_intro();

  public:
  // string tb_age = 38;
  void clear_tb_age() ;
  const std::string& tb_age() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tb_age(Arg_&& arg, Args_... args);
  std::string* mutable_tb_age();
  PROTOBUF_NODISCARD std::string* release_tb_age();
  void set_allocated_tb_age(std::string* ptr);

  private:
  const std::string& _internal_tb_age() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tb_age(
      const std::string& value);
  std::string* _internal_mutable_tb_age();

  public:
  // string seal_prefix = 79;
  void clear_seal_prefix() ;
  const std::string& seal_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_seal_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_seal_prefix();
  PROTOBUF_NODISCARD std::string* release_seal_prefix();
  void set_allocated_seal_prefix(std::string* ptr);

  private:
  const std::string& _internal_seal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seal_prefix(
      const std::string& value);
  std::string* _internal_mutable_seal_prefix();

  public:
  // string modify_avatar_desc = 98;
  void clear_modify_avatar_desc() ;
  const std::string& modify_avatar_desc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modify_avatar_desc(Arg_&& arg, Args_... args);
  std::string* mutable_modify_avatar_desc();
  PROTOBUF_NODISCARD std::string* release_modify_avatar_desc();
  void set_allocated_modify_avatar_desc(std::string* ptr);

  private:
  const std::string& _internal_modify_avatar_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modify_avatar_desc(
      const std::string& value);
  std::string* _internal_mutable_modify_avatar_desc();

  public:
  // string level_influence = 100;
  void clear_level_influence() ;
  const std::string& level_influence() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_level_influence(Arg_&& arg, Args_... args);
  std::string* mutable_level_influence();
  PROTOBUF_NODISCARD std::string* release_level_influence();
  void set_allocated_level_influence(std::string* ptr);

  private:
  const std::string& _internal_level_influence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level_influence(
      const std::string& value);
  std::string* _internal_mutable_level_influence();

  public:
  // string uk = 107;
  void clear_uk() ;
  const std::string& uk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uk(Arg_&& arg, Args_... args);
  std::string* mutable_uk();
  PROTOBUF_NODISCARD std::string* release_uk();
  void set_allocated_uk(std::string* ptr);

  private:
  const std::string& _internal_uk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uk(
      const std::string& value);
  std::string* _internal_mutable_uk();

  public:
  // string tieba_uid = 120;
  void clear_tieba_uid() ;
  const std::string& tieba_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tieba_uid(Arg_&& arg, Args_... args);
  std::string* mutable_tieba_uid();
  PROTOBUF_NODISCARD std::string* release_tieba_uid();
  void set_allocated_tieba_uid(std::string* ptr);

  private:
  const std::string& _internal_tieba_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tieba_uid(
      const std::string& value);
  std::string* _internal_mutable_tieba_uid();

  public:
  // string level_name = 125;
  void clear_level_name() ;
  const std::string& level_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_level_name(Arg_&& arg, Args_... args);
  std::string* mutable_level_name();
  PROTOBUF_NODISCARD std::string* release_level_name();
  void set_allocated_level_name(std::string* ptr);

  private:
  const std::string& _internal_level_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level_name(
      const std::string& value);
  std::string* _internal_mutable_level_name();

  public:
  // string ip_address = 127;
  void clear_ip_address() ;
  const std::string& ip_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_address(Arg_&& arg, Args_... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ptr);

  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(
      const std::string& value);
  std::string* _internal_mutable_ip_address();

  public:
  // string editing_nickname = 129;
  void clear_editing_nickname() ;
  const std::string& editing_nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_editing_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_editing_nickname();
  PROTOBUF_NODISCARD std::string* release_editing_nickname();
  void set_allocated_editing_nickname(std::string* ptr);

  private:
  const std::string& _internal_editing_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_editing_nickname(
      const std::string& value);
  std::string* _internal_mutable_editing_nickname();

  public:
  // string display_intro = 138;
  void clear_display_intro() ;
  const std::string& display_intro() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_intro(Arg_&& arg, Args_... args);
  std::string* mutable_display_intro();
  PROTOBUF_NODISCARD std::string* release_display_intro();
  void set_allocated_display_intro(std::string* ptr);

  private:
  const std::string& _internal_display_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_intro(
      const std::string& value);
  std::string* _internal_mutable_display_intro();

  public:
  // string avatar_url = 152;
  void clear_avatar_url() ;
  const std::string& avatar_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avatar_url(Arg_&& arg, Args_... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* ptr);

  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(
      const std::string& value);
  std::string* _internal_mutable_avatar_url();

  public:
  // .User.Balv balv = 10;
  bool has_balv() const;
  void clear_balv() ;
  const ::User_Balv& balv() const;
  PROTOBUF_NODISCARD ::User_Balv* release_balv();
  ::User_Balv* mutable_balv();
  void set_allocated_balv(::User_Balv* value);
  void unsafe_arena_set_allocated_balv(::User_Balv* value);
  ::User_Balv* unsafe_arena_release_balv();

  private:
  const ::User_Balv& _internal_balv() const;
  ::User_Balv* _internal_mutable_balv();

  public:
  // .User.PrivSets priv_sets = 45;
  bool has_priv_sets() const;
  void clear_priv_sets() ;
  const ::User_PrivSets& priv_sets() const;
  PROTOBUF_NODISCARD ::User_PrivSets* release_priv_sets();
  ::User_PrivSets* mutable_priv_sets();
  void set_allocated_priv_sets(::User_PrivSets* value);
  void unsafe_arena_set_allocated_priv_sets(::User_PrivSets* value);
  ::User_PrivSets* unsafe_arena_release_priv_sets();

  private:
  const ::User_PrivSets& _internal_priv_sets() const;
  ::User_PrivSets* _internal_mutable_priv_sets();

  public:
  // .User.UserVipInfo vipInfo = 61;
  bool has_vipinfo() const;
  void clear_vipinfo() ;
  const ::User_UserVipInfo& vipinfo() const;
  PROTOBUF_NODISCARD ::User_UserVipInfo* release_vipinfo();
  ::User_UserVipInfo* mutable_vipinfo();
  void set_allocated_vipinfo(::User_UserVipInfo* value);
  void unsafe_arena_set_allocated_vipinfo(::User_UserVipInfo* value);
  ::User_UserVipInfo* unsafe_arena_release_vipinfo();

  private:
  const ::User_UserVipInfo& _internal_vipinfo() const;
  ::User_UserVipInfo* _internal_mutable_vipinfo();

  public:
  // .User.GodInfo god_data = 62;
  bool has_god_data() const;
  void clear_god_data() ;
  const ::User_GodInfo& god_data() const;
  PROTOBUF_NODISCARD ::User_GodInfo* release_god_data();
  ::User_GodInfo* mutable_god_data();
  void set_allocated_god_data(::User_GodInfo* value);
  void unsafe_arena_set_allocated_god_data(::User_GodInfo* value);
  ::User_GodInfo* unsafe_arena_release_god_data();

  private:
  const ::User_GodInfo& _internal_god_data() const;
  ::User_GodInfo* _internal_mutable_god_data();

  public:
  // .User.VipShowInfo vip_show_info = 64;
  bool has_vip_show_info() const;
  void clear_vip_show_info() ;
  const ::User_VipShowInfo& vip_show_info() const;
  PROTOBUF_NODISCARD ::User_VipShowInfo* release_vip_show_info();
  ::User_VipShowInfo* mutable_vip_show_info();
  void set_allocated_vip_show_info(::User_VipShowInfo* value);
  void unsafe_arena_set_allocated_vip_show_info(::User_VipShowInfo* value);
  ::User_VipShowInfo* unsafe_arena_release_vip_show_info();

  private:
  const ::User_VipShowInfo& _internal_vip_show_info() const;
  ::User_VipShowInfo* _internal_mutable_vip_show_info();

  public:
  // .User.TbVipInfo tb_vip = 72;
  bool has_tb_vip() const;
  void clear_tb_vip() ;
  const ::User_TbVipInfo& tb_vip() const;
  PROTOBUF_NODISCARD ::User_TbVipInfo* release_tb_vip();
  ::User_TbVipInfo* mutable_tb_vip();
  void set_allocated_tb_vip(::User_TbVipInfo* value);
  void unsafe_arena_set_allocated_tb_vip(::User_TbVipInfo* value);
  ::User_TbVipInfo* unsafe_arena_release_tb_vip();

  private:
  const ::User_TbVipInfo& _internal_tb_vip() const;
  ::User_TbVipInfo* _internal_mutable_tb_vip();

  public:
  // .User.NewGodInfo new_god_data = 101;
  bool has_new_god_data() const;
  void clear_new_god_data() ;
  const ::User_NewGodInfo& new_god_data() const;
  PROTOBUF_NODISCARD ::User_NewGodInfo* release_new_god_data();
  ::User_NewGodInfo* mutable_new_god_data();
  void set_allocated_new_god_data(::User_NewGodInfo* value);
  void unsafe_arena_set_allocated_new_god_data(::User_NewGodInfo* value);
  ::User_NewGodInfo* unsafe_arena_release_new_god_data();

  private:
  const ::User_NewGodInfo& _internal_new_god_data() const;
  ::User_NewGodInfo* _internal_mutable_new_god_data();

  public:
  // .User.VirtualImageInfo virtual_image_info = 136;
  bool has_virtual_image_info() const;
  void clear_virtual_image_info() ;
  const ::User_VirtualImageInfo& virtual_image_info() const;
  PROTOBUF_NODISCARD ::User_VirtualImageInfo* release_virtual_image_info();
  ::User_VirtualImageInfo* mutable_virtual_image_info();
  void set_allocated_virtual_image_info(::User_VirtualImageInfo* value);
  void unsafe_arena_set_allocated_virtual_image_info(::User_VirtualImageInfo* value);
  ::User_VirtualImageInfo* unsafe_arena_release_virtual_image_info();

  private:
  const ::User_VirtualImageInfo& _internal_virtual_image_info() const;
  ::User_VirtualImageInfo* _internal_mutable_virtual_image_info();

  public:
  // .User.UserGrowth user_growth = 137;
  bool has_user_growth() const;
  void clear_user_growth() ;
  const ::User_UserGrowth& user_growth() const;
  PROTOBUF_NODISCARD ::User_UserGrowth* release_user_growth();
  ::User_UserGrowth* mutable_user_growth();
  void set_allocated_user_growth(::User_UserGrowth* value);
  void unsafe_arena_set_allocated_user_growth(::User_UserGrowth* value);
  ::User_UserGrowth* unsafe_arena_release_user_growth();

  private:
  const ::User_UserGrowth& _internal_user_growth() const;
  ::User_UserGrowth* _internal_mutable_user_growth();

  public:
  // int64 id = 2;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int32 userhide = 9;
  void clear_userhide() ;
  ::int32_t userhide() const;
  void set_userhide(::int32_t value);

  private:
  ::int32_t _internal_userhide() const;
  void _internal_set_userhide(::int32_t value);

  public:
  // int32 is_verify = 15;
  void clear_is_verify() ;
  ::int32_t is_verify() const;
  void set_is_verify(::int32_t value);

  private:
  ::int32_t _internal_is_verify() const;
  void _internal_set_is_verify(::int32_t value);

  public:
  // int32 is_interestman = 16;
  void clear_is_interestman() ;
  ::int32_t is_interestman() const;
  void set_is_interestman(::int32_t value);

  private:
  ::int32_t _internal_is_interestman() const;
  void _internal_set_is_interestman(::int32_t value);

  public:
  // int32 user_type = 19;
  void clear_user_type() ;
  ::int32_t user_type() const;
  void set_user_type(::int32_t value);

  private:
  ::int32_t _internal_user_type() const;
  void _internal_set_user_type(::int32_t value);

  public:
  // int32 is_coreuser = 20;
  void clear_is_coreuser() ;
  ::int32_t is_coreuser() const;
  void set_is_coreuser(::int32_t value);

  private:
  ::int32_t _internal_is_coreuser() const;
  void _internal_set_is_coreuser(::int32_t value);

  public:
  // int32 level_id = 23;
  void clear_level_id() ;
  ::int32_t level_id() const;
  void set_level_id(::int32_t value);

  private:
  ::int32_t _internal_level_id() const;
  void _internal_set_level_id(::int32_t value);

  public:
  // int32 is_bawu = 25;
  void clear_is_bawu() ;
  ::int32_t is_bawu() const;
  void set_is_bawu(::int32_t value);

  private:
  ::int32_t _internal_is_bawu() const;
  void _internal_set_is_bawu(::int32_t value);

  public:
  // int32 fans_num = 30;
  void clear_fans_num() ;
  ::int32_t fans_num() const;
  void set_fans_num(::int32_t value);

  private:
  ::int32_t _internal_fans_num() const;
  void _internal_set_fans_num(::int32_t value);

  public:
  // int32 concern_num = 31;
  void clear_concern_num() ;
  ::int32_t concern_num() const;
  void set_concern_num(::int32_t value);

  private:
  ::int32_t _internal_concern_num() const;
  void _internal_set_concern_num(::int32_t value);

  public:
  // int32 sex = 32;
  void clear_sex() ;
  ::int32_t sex() const;
  void set_sex(::int32_t value);

  private:
  ::int32_t _internal_sex() const;
  void _internal_set_sex(::int32_t value);

  public:
  // int32 my_like_num = 33;
  void clear_my_like_num() ;
  ::int32_t my_like_num() const;
  void set_my_like_num(::int32_t value);

  private:
  ::int32_t _internal_my_like_num() const;
  void _internal_set_my_like_num(::int32_t value);

  public:
  // int32 post_num = 37;
  void clear_post_num() ;
  ::int32_t post_num() const;
  void set_post_num(::int32_t value);

  private:
  ::int32_t _internal_post_num() const;
  void _internal_set_post_num(::int32_t value);

  public:
  // int32 gender = 42;
  void clear_gender() ;
  ::int32_t gender() const;
  void set_gender(::int32_t value);

  private:
  ::int32_t _internal_gender() const;
  void _internal_set_gender(::int32_t value);

  public:
  // int32 is_mask = 43;
  void clear_is_mask() ;
  ::int32_t is_mask() const;
  void set_is_mask(::int32_t value);

  private:
  ::int32_t _internal_is_mask() const;
  void _internal_set_is_mask(::int32_t value);

  public:
  // int32 is_guanfang = 52;
  void clear_is_guanfang() ;
  ::int32_t is_guanfang() const;
  void set_is_guanfang(::int32_t value);

  private:
  ::int32_t _internal_is_guanfang() const;
  void _internal_set_is_guanfang(::int32_t value);

  public:
  // int32 heavy_user = 63;
  void clear_heavy_user() ;
  ::int32_t heavy_user() const;
  void set_heavy_user(::int32_t value);

  private:
  ::int32_t _internal_heavy_user() const;
  void _internal_set_heavy_user(::int32_t value);

  public:
  // int32 nickname_update_time = 86;
  void clear_nickname_update_time() ;
  ::int32_t nickname_update_time() const;
  void set_nickname_update_time(::int32_t value);

  private:
  ::int32_t _internal_nickname_update_time() const;
  void _internal_set_nickname_update_time(::int32_t value);

  public:
  // int32 thread_num = 87;
  void clear_thread_num() ;
  ::int32_t thread_num() const;
  void set_thread_num(::int32_t value);

  private:
  ::int32_t _internal_thread_num() const;
  void _internal_set_thread_num(::int32_t value);

  public:
  // int32 agree_num = 88;
  void clear_agree_num() ;
  ::int32_t agree_num() const;
  void set_agree_num(::int32_t value);

  private:
  ::int32_t _internal_agree_num() const;
  void _internal_set_agree_num(::int32_t value);

  public:
  // int32 left_call_num = 89;
  void clear_left_call_num() ;
  ::int32_t left_call_num() const;
  void set_left_call_num(::int32_t value);

  private:
  ::int32_t _internal_left_call_num() const;
  void _internal_set_left_call_num(::int32_t value);

  public:
  // int32 priv_thread = 92;
  void clear_priv_thread() ;
  ::int32_t priv_thread() const;
  void set_priv_thread(::int32_t value);

  private:
  ::int32_t _internal_priv_thread() const;
  void _internal_set_priv_thread(::int32_t value);

  public:
  // int32 can_modify_avatar = 97;
  void clear_can_modify_avatar() ;
  ::int32_t can_modify_avatar() const;
  void set_can_modify_avatar(::int32_t value);

  private:
  ::int32_t _internal_can_modify_avatar() const;
  void _internal_set_can_modify_avatar(::int32_t value);

  public:
  // int32 influence = 99;
  void clear_influence() ;
  ::int32_t influence() const;
  void set_influence(::int32_t value);

  private:
  ::int32_t _internal_influence() const;
  void _internal_set_influence(::int32_t value);

  public:
  // int32 is_default_avatar = 106;
  void clear_is_default_avatar() ;
  ::int32_t is_default_avatar() const;
  void set_is_default_avatar(::int32_t value);

  private:
  ::int32_t _internal_is_default_avatar() const;
  void _internal_set_is_default_avatar(::int32_t value);

  public:
  // int32 favorite_num = 109;
  void clear_favorite_num() ;
  ::int32_t favorite_num() const;
  void set_favorite_num(::int32_t value);

  private:
  ::int32_t _internal_favorite_num() const;
  void _internal_set_favorite_num(::int32_t value);

  public:
  // uint32 total_agree_num = 118;
  void clear_total_agree_num() ;
  ::uint32_t total_agree_num() const;
  void set_total_agree_num(::uint32_t value);

  private:
  ::uint32_t _internal_total_agree_num() const;
  void _internal_set_total_agree_num(::uint32_t value);

  public:
  // int32 display_auth_type = 123;
  void clear_display_auth_type() ;
  ::int32_t display_auth_type() const;
  void set_display_auth_type(::int32_t value);

  private:
  ::int32_t _internal_display_auth_type() const;
  void _internal_set_display_auth_type(::int32_t value);

  public:
  // int32 is_nickname_editing = 128;
  void clear_is_nickname_editing() ;
  ::int32_t is_nickname_editing() const;
  void set_is_nickname_editing(::int32_t value);

  private:
  ::int32_t _internal_is_nickname_editing() const;
  void _internal_set_is_nickname_editing(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 62, 13, 244, 21> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::User_Icon > iconinfo_;
    ::google::protobuf::RepeatedPtrField< ::User_TshowInfo > tshow_icon_;
    ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo > likeforum_;
    ::google::protobuf::RepeatedPtrField< ::User_TshowInfo > new_tshow_icon_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr name_show_;
    ::google::protobuf::internal::ArenaStringPtr portrait_;
    ::google::protobuf::internal::ArenaStringPtr rank_;
    ::google::protobuf::internal::ArenaStringPtr bawu_type_;
    ::google::protobuf::internal::ArenaStringPtr portraith_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr bduss_;
    ::google::protobuf::internal::ArenaStringPtr intro_;
    ::google::protobuf::internal::ArenaStringPtr tb_age_;
    ::google::protobuf::internal::ArenaStringPtr seal_prefix_;
    ::google::protobuf::internal::ArenaStringPtr modify_avatar_desc_;
    ::google::protobuf::internal::ArenaStringPtr level_influence_;
    ::google::protobuf::internal::ArenaStringPtr uk_;
    ::google::protobuf::internal::ArenaStringPtr tieba_uid_;
    ::google::protobuf::internal::ArenaStringPtr level_name_;
    ::google::protobuf::internal::ArenaStringPtr ip_address_;
    ::google::protobuf::internal::ArenaStringPtr editing_nickname_;
    ::google::protobuf::internal::ArenaStringPtr display_intro_;
    ::google::protobuf::internal::ArenaStringPtr avatar_url_;
    ::User_Balv* balv_;
    ::User_PrivSets* priv_sets_;
    ::User_UserVipInfo* vipinfo_;
    ::User_GodInfo* god_data_;
    ::User_VipShowInfo* vip_show_info_;
    ::User_TbVipInfo* tb_vip_;
    ::User_NewGodInfo* new_god_data_;
    ::User_VirtualImageInfo* virtual_image_info_;
    ::User_UserGrowth* user_growth_;
    ::int64_t id_;
    ::int32_t userhide_;
    ::int32_t is_verify_;
    ::int32_t is_interestman_;
    ::int32_t user_type_;
    ::int32_t is_coreuser_;
    ::int32_t level_id_;
    ::int32_t is_bawu_;
    ::int32_t fans_num_;
    ::int32_t concern_num_;
    ::int32_t sex_;
    ::int32_t my_like_num_;
    ::int32_t post_num_;
    ::int32_t gender_;
    ::int32_t is_mask_;
    ::int32_t is_guanfang_;
    ::int32_t heavy_user_;
    ::int32_t nickname_update_time_;
    ::int32_t thread_num_;
    ::int32_t agree_num_;
    ::int32_t left_call_num_;
    ::int32_t priv_thread_;
    ::int32_t can_modify_avatar_;
    ::int32_t influence_;
    ::int32_t is_default_avatar_;
    ::int32_t favorite_num_;
    ::uint32_t total_agree_num_;
    ::int32_t display_auth_type_;
    ::int32_t is_nickname_editing_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// User_Balv

// int32 is_black = 1;
inline void User_Balv::clear_is_black() {
  _impl_.is_black_ = 0;
}
inline ::int32_t User_Balv::is_black() const {
  // @@protoc_insertion_point(field_get:User.Balv.is_black)
  return _internal_is_black();
}
inline void User_Balv::set_is_black(::int32_t value) {
  _internal_set_is_black(value);
  // @@protoc_insertion_point(field_set:User.Balv.is_black)
}
inline ::int32_t User_Balv::_internal_is_black() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_black_;
}
inline void User_Balv::_internal_set_is_black(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_black_ = value;
}

// int32 is_block = 2;
inline void User_Balv::clear_is_block() {
  _impl_.is_block_ = 0;
}
inline ::int32_t User_Balv::is_block() const {
  // @@protoc_insertion_point(field_get:User.Balv.is_block)
  return _internal_is_block();
}
inline void User_Balv::set_is_block(::int32_t value) {
  _internal_set_is_block(value);
  // @@protoc_insertion_point(field_set:User.Balv.is_block)
}
inline ::int32_t User_Balv::_internal_is_block() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_block_;
}
inline void User_Balv::_internal_set_is_block(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_block_ = value;
}

// int32 days_tofree = 3;
inline void User_Balv::clear_days_tofree() {
  _impl_.days_tofree_ = 0;
}
inline ::int32_t User_Balv::days_tofree() const {
  // @@protoc_insertion_point(field_get:User.Balv.days_tofree)
  return _internal_days_tofree();
}
inline void User_Balv::set_days_tofree(::int32_t value) {
  _internal_set_days_tofree(value);
  // @@protoc_insertion_point(field_set:User.Balv.days_tofree)
}
inline ::int32_t User_Balv::_internal_days_tofree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.days_tofree_;
}
inline void User_Balv::_internal_set_days_tofree(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.days_tofree_ = value;
}

// -------------------------------------------------------------------

// User_Icon

// string name = 1;
inline void User_Icon::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User_Icon::name() const {
  // @@protoc_insertion_point(field_get:User.Icon.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_Icon::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.Icon.name)
}
inline std::string* User_Icon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.Icon.name)
  return _s;
}
inline const std::string& User_Icon::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void User_Icon::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Icon::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_Icon::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.Icon.name)
  return _impl_.name_.Release();
}
inline void User_Icon::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.Icon.name)
}

// string url = 3;
inline void User_Icon::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& User_Icon::url() const {
  // @@protoc_insertion_point(field_get:User.Icon.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_Icon::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.Icon.url)
}
inline std::string* User_Icon::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:User.Icon.url)
  return _s;
}
inline const std::string& User_Icon::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void User_Icon::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Icon::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* User_Icon::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.Icon.url)
  return _impl_.url_.Release();
}
inline void User_Icon::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.Icon.url)
}

// string icon = 4;
inline void User_Icon::clear_icon() {
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& User_Icon::icon() const {
  // @@protoc_insertion_point(field_get:User.Icon.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_Icon::set_icon(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.Icon.icon)
}
inline std::string* User_Icon::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:User.Icon.icon)
  return _s;
}
inline const std::string& User_Icon::_internal_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_.Get();
}
inline void User_Icon::_internal_set_icon(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Icon::_internal_mutable_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_.Mutable( GetArenaForAllocation());
}
inline std::string* User_Icon::release_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.Icon.icon)
  return _impl_.icon_.Release();
}
inline void User_Icon::set_allocated_icon(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_.IsDefault()) {
          _impl_.icon_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.Icon.icon)
}

// repeated string sprite_info = 8;
inline int User_Icon::_internal_sprite_info_size() const {
  return _internal_sprite_info().size();
}
inline int User_Icon::sprite_info_size() const {
  return _internal_sprite_info_size();
}
inline void User_Icon::clear_sprite_info() {
  _internal_mutable_sprite_info()->Clear();
}
inline std::string* User_Icon::add_sprite_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_sprite_info()->Add();
  // @@protoc_insertion_point(field_add_mutable:User.Icon.sprite_info)
  return _s;
}
inline const std::string& User_Icon::sprite_info(int index) const {
  // @@protoc_insertion_point(field_get:User.Icon.sprite_info)
  return _internal_sprite_info().Get(index);
}
inline std::string* User_Icon::mutable_sprite_info(int index) {
  // @@protoc_insertion_point(field_mutable:User.Icon.sprite_info)
  return _internal_mutable_sprite_info()->Mutable(index);
}
inline void User_Icon::set_sprite_info(int index, const std::string& value) {
  _internal_mutable_sprite_info()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:User.Icon.sprite_info)
}
inline void User_Icon::set_sprite_info(int index, std::string&& value) {
  _internal_mutable_sprite_info()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:User.Icon.sprite_info)
}
inline void User_Icon::set_sprite_info(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_sprite_info()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:User.Icon.sprite_info)
}
inline void User_Icon::set_sprite_info(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_sprite_info()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:User.Icon.sprite_info)
}
inline void User_Icon::set_sprite_info(int index, absl::string_view value) {
  _internal_mutable_sprite_info()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:User.Icon.sprite_info)
}
inline void User_Icon::add_sprite_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sprite_info()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:User.Icon.sprite_info)
}
inline void User_Icon::add_sprite_info(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sprite_info()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:User.Icon.sprite_info)
}
inline void User_Icon::add_sprite_info(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sprite_info()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:User.Icon.sprite_info)
}
inline void User_Icon::add_sprite_info(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sprite_info()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:User.Icon.sprite_info)
}
inline void User_Icon::add_sprite_info(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sprite_info()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:User.Icon.sprite_info)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
User_Icon::sprite_info() const {
  // @@protoc_insertion_point(field_list:User.Icon.sprite_info)
  return _internal_sprite_info();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* User_Icon::mutable_sprite_info() {
  // @@protoc_insertion_point(field_mutable_list:User.Icon.sprite_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sprite_info();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
User_Icon::_internal_sprite_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sprite_info_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
User_Icon::_internal_mutable_sprite_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sprite_info_;
}

// -------------------------------------------------------------------

// User_TshowInfo

// string icon = 1;
inline void User_TshowInfo::clear_icon() {
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& User_TshowInfo::icon() const {
  // @@protoc_insertion_point(field_get:User.TshowInfo.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_TshowInfo::set_icon(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.TshowInfo.icon)
}
inline std::string* User_TshowInfo::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:User.TshowInfo.icon)
  return _s;
}
inline const std::string& User_TshowInfo::_internal_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_.Get();
}
inline void User_TshowInfo::_internal_set_icon(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* User_TshowInfo::_internal_mutable_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_.Mutable( GetArenaForAllocation());
}
inline std::string* User_TshowInfo::release_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.TshowInfo.icon)
  return _impl_.icon_.Release();
}
inline void User_TshowInfo::set_allocated_icon(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_.IsDefault()) {
          _impl_.icon_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.TshowInfo.icon)
}

// string name = 2;
inline void User_TshowInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User_TshowInfo::name() const {
  // @@protoc_insertion_point(field_get:User.TshowInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_TshowInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.TshowInfo.name)
}
inline std::string* User_TshowInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.TshowInfo.name)
  return _s;
}
inline const std::string& User_TshowInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void User_TshowInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_TshowInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_TshowInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.TshowInfo.name)
  return _impl_.name_.Release();
}
inline void User_TshowInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.TshowInfo.name)
}

// string url = 3;
inline void User_TshowInfo::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& User_TshowInfo::url() const {
  // @@protoc_insertion_point(field_get:User.TshowInfo.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_TshowInfo::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.TshowInfo.url)
}
inline std::string* User_TshowInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:User.TshowInfo.url)
  return _s;
}
inline const std::string& User_TshowInfo::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void User_TshowInfo::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* User_TshowInfo::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* User_TshowInfo::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.TshowInfo.url)
  return _impl_.url_.Release();
}
inline void User_TshowInfo::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.TshowInfo.url)
}

// -------------------------------------------------------------------

// User_PrivSets

// int32 location = 1;
inline void User_PrivSets::clear_location() {
  _impl_.location_ = 0;
}
inline ::int32_t User_PrivSets::location() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.location)
  return _internal_location();
}
inline void User_PrivSets::set_location(::int32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.location)
}
inline ::int32_t User_PrivSets::_internal_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.location_;
}
inline void User_PrivSets::_internal_set_location(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.location_ = value;
}

// int32 like = 2;
inline void User_PrivSets::clear_like() {
  _impl_.like_ = 0;
}
inline ::int32_t User_PrivSets::like() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.like)
  return _internal_like();
}
inline void User_PrivSets::set_like(::int32_t value) {
  _internal_set_like(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.like)
}
inline ::int32_t User_PrivSets::_internal_like() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.like_;
}
inline void User_PrivSets::_internal_set_like(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.like_ = value;
}

// int32 group = 3;
inline void User_PrivSets::clear_group() {
  _impl_.group_ = 0;
}
inline ::int32_t User_PrivSets::group() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.group)
  return _internal_group();
}
inline void User_PrivSets::set_group(::int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.group)
}
inline ::int32_t User_PrivSets::_internal_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_;
}
inline void User_PrivSets::_internal_set_group(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.group_ = value;
}

// int32 post = 4;
inline void User_PrivSets::clear_post() {
  _impl_.post_ = 0;
}
inline ::int32_t User_PrivSets::post() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.post)
  return _internal_post();
}
inline void User_PrivSets::set_post(::int32_t value) {
  _internal_set_post(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.post)
}
inline ::int32_t User_PrivSets::_internal_post() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_;
}
inline void User_PrivSets::_internal_set_post(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_ = value;
}

// int32 friend = 5;
inline void User_PrivSets::clear_friend_() {
  _impl_.friend__ = 0;
}
inline ::int32_t User_PrivSets::friend_() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.friend)
  return _internal_friend_();
}
inline void User_PrivSets::set_friend_(::int32_t value) {
  _internal_set_friend_(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.friend)
}
inline ::int32_t User_PrivSets::_internal_friend_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friend__;
}
inline void User_PrivSets::_internal_set_friend_(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.friend__ = value;
}

// int32 live = 6;
inline void User_PrivSets::clear_live() {
  _impl_.live_ = 0;
}
inline ::int32_t User_PrivSets::live() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.live)
  return _internal_live();
}
inline void User_PrivSets::set_live(::int32_t value) {
  _internal_set_live(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.live)
}
inline ::int32_t User_PrivSets::_internal_live() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.live_;
}
inline void User_PrivSets::_internal_set_live(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.live_ = value;
}

// int32 reply = 7;
inline void User_PrivSets::clear_reply() {
  _impl_.reply_ = 0;
}
inline ::int32_t User_PrivSets::reply() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.reply)
  return _internal_reply();
}
inline void User_PrivSets::set_reply(::int32_t value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.reply)
}
inline ::int32_t User_PrivSets::_internal_reply() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reply_;
}
inline void User_PrivSets::_internal_set_reply(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reply_ = value;
}

// int32 bazhu_show_inside = 8;
inline void User_PrivSets::clear_bazhu_show_inside() {
  _impl_.bazhu_show_inside_ = 0;
}
inline ::int32_t User_PrivSets::bazhu_show_inside() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.bazhu_show_inside)
  return _internal_bazhu_show_inside();
}
inline void User_PrivSets::set_bazhu_show_inside(::int32_t value) {
  _internal_set_bazhu_show_inside(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.bazhu_show_inside)
}
inline ::int32_t User_PrivSets::_internal_bazhu_show_inside() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bazhu_show_inside_;
}
inline void User_PrivSets::_internal_set_bazhu_show_inside(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bazhu_show_inside_ = value;
}

// int32 bazhu_show_outside = 9;
inline void User_PrivSets::clear_bazhu_show_outside() {
  _impl_.bazhu_show_outside_ = 0;
}
inline ::int32_t User_PrivSets::bazhu_show_outside() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.bazhu_show_outside)
  return _internal_bazhu_show_outside();
}
inline void User_PrivSets::set_bazhu_show_outside(::int32_t value) {
  _internal_set_bazhu_show_outside(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.bazhu_show_outside)
}
inline ::int32_t User_PrivSets::_internal_bazhu_show_outside() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bazhu_show_outside_;
}
inline void User_PrivSets::_internal_set_bazhu_show_outside(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bazhu_show_outside_ = value;
}

// -------------------------------------------------------------------

// User_LikeForumInfo

// string forum_name = 1;
inline void User_LikeForumInfo::clear_forum_name() {
  _impl_.forum_name_.ClearToEmpty();
}
inline const std::string& User_LikeForumInfo::forum_name() const {
  // @@protoc_insertion_point(field_get:User.LikeForumInfo.forum_name)
  return _internal_forum_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_LikeForumInfo::set_forum_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.LikeForumInfo.forum_name)
}
inline std::string* User_LikeForumInfo::mutable_forum_name() {
  std::string* _s = _internal_mutable_forum_name();
  // @@protoc_insertion_point(field_mutable:User.LikeForumInfo.forum_name)
  return _s;
}
inline const std::string& User_LikeForumInfo::_internal_forum_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_name_.Get();
}
inline void User_LikeForumInfo::_internal_set_forum_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_LikeForumInfo::_internal_mutable_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.forum_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_LikeForumInfo::release_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.LikeForumInfo.forum_name)
  return _impl_.forum_name_.Release();
}
inline void User_LikeForumInfo::set_allocated_forum_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forum_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.forum_name_.IsDefault()) {
          _impl_.forum_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.LikeForumInfo.forum_name)
}

// uint64 forum_id = 2;
inline void User_LikeForumInfo::clear_forum_id() {
  _impl_.forum_id_ = ::uint64_t{0u};
}
inline ::uint64_t User_LikeForumInfo::forum_id() const {
  // @@protoc_insertion_point(field_get:User.LikeForumInfo.forum_id)
  return _internal_forum_id();
}
inline void User_LikeForumInfo::set_forum_id(::uint64_t value) {
  _internal_set_forum_id(value);
  // @@protoc_insertion_point(field_set:User.LikeForumInfo.forum_id)
}
inline ::uint64_t User_LikeForumInfo::_internal_forum_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_id_;
}
inline void User_LikeForumInfo::_internal_set_forum_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_id_ = value;
}

// -------------------------------------------------------------------

// User_UserVipInfo

// uint32 v_status = 1;
inline void User_UserVipInfo::clear_v_status() {
  _impl_.v_status_ = 0u;
}
inline ::uint32_t User_UserVipInfo::v_status() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.v_status)
  return _internal_v_status();
}
inline void User_UserVipInfo::set_v_status(::uint32_t value) {
  _internal_set_v_status(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.v_status)
}
inline ::uint32_t User_UserVipInfo::_internal_v_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_status_;
}
inline void User_UserVipInfo::_internal_set_v_status(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_status_ = value;
}

// uint32 s_time = 2;
inline void User_UserVipInfo::clear_s_time() {
  _impl_.s_time_ = 0u;
}
inline ::uint32_t User_UserVipInfo::s_time() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.s_time)
  return _internal_s_time();
}
inline void User_UserVipInfo::set_s_time(::uint32_t value) {
  _internal_set_s_time(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.s_time)
}
inline ::uint32_t User_UserVipInfo::_internal_s_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.s_time_;
}
inline void User_UserVipInfo::_internal_set_s_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.s_time_ = value;
}

// uint32 e_time = 3;
inline void User_UserVipInfo::clear_e_time() {
  _impl_.e_time_ = 0u;
}
inline ::uint32_t User_UserVipInfo::e_time() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.e_time)
  return _internal_e_time();
}
inline void User_UserVipInfo::set_e_time(::uint32_t value) {
  _internal_set_e_time(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.e_time)
}
inline ::uint32_t User_UserVipInfo::_internal_e_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.e_time_;
}
inline void User_UserVipInfo::_internal_set_e_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.e_time_ = value;
}

// uint32 ext_score = 4;
inline void User_UserVipInfo::clear_ext_score() {
  _impl_.ext_score_ = 0u;
}
inline ::uint32_t User_UserVipInfo::ext_score() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.ext_score)
  return _internal_ext_score();
}
inline void User_UserVipInfo::set_ext_score(::uint32_t value) {
  _internal_set_ext_score(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.ext_score)
}
inline ::uint32_t User_UserVipInfo::_internal_ext_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ext_score_;
}
inline void User_UserVipInfo::_internal_set_ext_score(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ext_score_ = value;
}

// uint32 v_level = 5;
inline void User_UserVipInfo::clear_v_level() {
  _impl_.v_level_ = 0u;
}
inline ::uint32_t User_UserVipInfo::v_level() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.v_level)
  return _internal_v_level();
}
inline void User_UserVipInfo::set_v_level(::uint32_t value) {
  _internal_set_v_level(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.v_level)
}
inline ::uint32_t User_UserVipInfo::_internal_v_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_level_;
}
inline void User_UserVipInfo::_internal_set_v_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_level_ = value;
}

// int32 a_score = 6;
inline void User_UserVipInfo::clear_a_score() {
  _impl_.a_score_ = 0;
}
inline ::int32_t User_UserVipInfo::a_score() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.a_score)
  return _internal_a_score();
}
inline void User_UserVipInfo::set_a_score(::int32_t value) {
  _internal_set_a_score(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.a_score)
}
inline ::int32_t User_UserVipInfo::_internal_a_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.a_score_;
}
inline void User_UserVipInfo::_internal_set_a_score(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.a_score_ = value;
}

// uint32 n_score = 7;
inline void User_UserVipInfo::clear_n_score() {
  _impl_.n_score_ = 0u;
}
inline ::uint32_t User_UserVipInfo::n_score() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.n_score)
  return _internal_n_score();
}
inline void User_UserVipInfo::set_n_score(::uint32_t value) {
  _internal_set_n_score(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.n_score)
}
inline ::uint32_t User_UserVipInfo::_internal_n_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.n_score_;
}
inline void User_UserVipInfo::_internal_set_n_score(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.n_score_ = value;
}

// string icon_url = 8;
inline void User_UserVipInfo::clear_icon_url() {
  _impl_.icon_url_.ClearToEmpty();
}
inline const std::string& User_UserVipInfo::icon_url() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.icon_url)
  return _internal_icon_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_UserVipInfo::set_icon_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.UserVipInfo.icon_url)
}
inline std::string* User_UserVipInfo::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:User.UserVipInfo.icon_url)
  return _s;
}
inline const std::string& User_UserVipInfo::_internal_icon_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_url_.Get();
}
inline void User_UserVipInfo::_internal_set_icon_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* User_UserVipInfo::_internal_mutable_icon_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_url_.Mutable( GetArenaForAllocation());
}
inline std::string* User_UserVipInfo::release_icon_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.UserVipInfo.icon_url)
  return _impl_.icon_url_.Release();
}
inline void User_UserVipInfo::set_allocated_icon_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_url_.IsDefault()) {
          _impl_.icon_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.UserVipInfo.icon_url)
}

// uint32 stay_day = 9;
inline void User_UserVipInfo::clear_stay_day() {
  _impl_.stay_day_ = 0u;
}
inline ::uint32_t User_UserVipInfo::stay_day() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.stay_day)
  return _internal_stay_day();
}
inline void User_UserVipInfo::set_stay_day(::uint32_t value) {
  _internal_set_stay_day(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.stay_day)
}
inline ::uint32_t User_UserVipInfo::_internal_stay_day() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stay_day_;
}
inline void User_UserVipInfo::_internal_set_stay_day(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stay_day_ = value;
}

// -------------------------------------------------------------------

// User_GodInfo

// int64 id = 1;
inline void User_GodInfo::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t User_GodInfo::id() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.id)
  return _internal_id();
}
inline void User_GodInfo::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:User.GodInfo.id)
}
inline ::int64_t User_GodInfo::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void User_GodInfo::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string intro = 2;
inline void User_GodInfo::clear_intro() {
  _impl_.intro_.ClearToEmpty();
}
inline const std::string& User_GodInfo::intro() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.intro)
  return _internal_intro();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_GodInfo::set_intro(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intro_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.GodInfo.intro)
}
inline std::string* User_GodInfo::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:User.GodInfo.intro)
  return _s;
}
inline const std::string& User_GodInfo::_internal_intro() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intro_.Get();
}
inline void User_GodInfo::_internal_set_intro(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* User_GodInfo::_internal_mutable_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.intro_.Mutable( GetArenaForAllocation());
}
inline std::string* User_GodInfo::release_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.GodInfo.intro)
  return _impl_.intro_.Release();
}
inline void User_GodInfo::set_allocated_intro(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intro_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intro_.IsDefault()) {
          _impl_.intro_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.GodInfo.intro)
}

// int32 type = 3;
inline void User_GodInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t User_GodInfo::type() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.type)
  return _internal_type();
}
inline void User_GodInfo::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:User.GodInfo.type)
}
inline ::int32_t User_GodInfo::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void User_GodInfo::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int64 fid = 4;
inline void User_GodInfo::clear_fid() {
  _impl_.fid_ = ::int64_t{0};
}
inline ::int64_t User_GodInfo::fid() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.fid)
  return _internal_fid();
}
inline void User_GodInfo::set_fid(::int64_t value) {
  _internal_set_fid(value);
  // @@protoc_insertion_point(field_set:User.GodInfo.fid)
}
inline ::int64_t User_GodInfo::_internal_fid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fid_;
}
inline void User_GodInfo::_internal_set_fid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fid_ = value;
}

// int32 followed = 5;
inline void User_GodInfo::clear_followed() {
  _impl_.followed_ = 0;
}
inline ::int32_t User_GodInfo::followed() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.followed)
  return _internal_followed();
}
inline void User_GodInfo::set_followed(::int32_t value) {
  _internal_set_followed(value);
  // @@protoc_insertion_point(field_set:User.GodInfo.followed)
}
inline ::int32_t User_GodInfo::_internal_followed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.followed_;
}
inline void User_GodInfo::_internal_set_followed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.followed_ = value;
}

// string recommend_reason = 6;
inline void User_GodInfo::clear_recommend_reason() {
  _impl_.recommend_reason_.ClearToEmpty();
}
inline const std::string& User_GodInfo::recommend_reason() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.recommend_reason)
  return _internal_recommend_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_GodInfo::set_recommend_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recommend_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.GodInfo.recommend_reason)
}
inline std::string* User_GodInfo::mutable_recommend_reason() {
  std::string* _s = _internal_mutable_recommend_reason();
  // @@protoc_insertion_point(field_mutable:User.GodInfo.recommend_reason)
  return _s;
}
inline const std::string& User_GodInfo::_internal_recommend_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recommend_reason_.Get();
}
inline void User_GodInfo::_internal_set_recommend_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.recommend_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* User_GodInfo::_internal_mutable_recommend_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.recommend_reason_.Mutable( GetArenaForAllocation());
}
inline std::string* User_GodInfo::release_recommend_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.GodInfo.recommend_reason)
  return _impl_.recommend_reason_.Release();
}
inline void User_GodInfo::set_allocated_recommend_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recommend_reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recommend_reason_.IsDefault()) {
          _impl_.recommend_reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.GodInfo.recommend_reason)
}

// string forum_name = 7;
inline void User_GodInfo::clear_forum_name() {
  _impl_.forum_name_.ClearToEmpty();
}
inline const std::string& User_GodInfo::forum_name() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.forum_name)
  return _internal_forum_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_GodInfo::set_forum_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.GodInfo.forum_name)
}
inline std::string* User_GodInfo::mutable_forum_name() {
  std::string* _s = _internal_mutable_forum_name();
  // @@protoc_insertion_point(field_mutable:User.GodInfo.forum_name)
  return _s;
}
inline const std::string& User_GodInfo::_internal_forum_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_name_.Get();
}
inline void User_GodInfo::_internal_set_forum_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_GodInfo::_internal_mutable_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.forum_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_GodInfo::release_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.GodInfo.forum_name)
  return _impl_.forum_name_.Release();
}
inline void User_GodInfo::set_allocated_forum_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forum_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.forum_name_.IsDefault()) {
          _impl_.forum_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.GodInfo.forum_name)
}

// int32 can_send_msg = 8;
inline void User_GodInfo::clear_can_send_msg() {
  _impl_.can_send_msg_ = 0;
}
inline ::int32_t User_GodInfo::can_send_msg() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.can_send_msg)
  return _internal_can_send_msg();
}
inline void User_GodInfo::set_can_send_msg(::int32_t value) {
  _internal_set_can_send_msg(value);
  // @@protoc_insertion_point(field_set:User.GodInfo.can_send_msg)
}
inline ::int32_t User_GodInfo::_internal_can_send_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.can_send_msg_;
}
inline void User_GodInfo::_internal_set_can_send_msg(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.can_send_msg_ = value;
}

// string prefix = 9;
inline void User_GodInfo::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& User_GodInfo::prefix() const {
  // @@protoc_insertion_point(field_get:User.GodInfo.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_GodInfo::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.GodInfo.prefix)
}
inline std::string* User_GodInfo::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:User.GodInfo.prefix)
  return _s;
}
inline const std::string& User_GodInfo::_internal_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prefix_.Get();
}
inline void User_GodInfo::_internal_set_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* User_GodInfo::_internal_mutable_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* User_GodInfo::release_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.GodInfo.prefix)
  return _impl_.prefix_.Release();
}
inline void User_GodInfo::set_allocated_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefix_.IsDefault()) {
          _impl_.prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.GodInfo.prefix)
}

// -------------------------------------------------------------------

// User_VipShowInfo

// string vip_icon = 1;
inline void User_VipShowInfo::clear_vip_icon() {
  _impl_.vip_icon_.ClearToEmpty();
}
inline const std::string& User_VipShowInfo::vip_icon() const {
  // @@protoc_insertion_point(field_get:User.VipShowInfo.vip_icon)
  return _internal_vip_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VipShowInfo::set_vip_icon(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vip_icon_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VipShowInfo.vip_icon)
}
inline std::string* User_VipShowInfo::mutable_vip_icon() {
  std::string* _s = _internal_mutable_vip_icon();
  // @@protoc_insertion_point(field_mutable:User.VipShowInfo.vip_icon)
  return _s;
}
inline const std::string& User_VipShowInfo::_internal_vip_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vip_icon_.Get();
}
inline void User_VipShowInfo::_internal_set_vip_icon(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vip_icon_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::_internal_mutable_vip_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.vip_icon_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::release_vip_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VipShowInfo.vip_icon)
  return _impl_.vip_icon_.Release();
}
inline void User_VipShowInfo::set_allocated_vip_icon(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vip_icon_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vip_icon_.IsDefault()) {
          _impl_.vip_icon_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VipShowInfo.vip_icon)
}

// string content = 2;
inline void User_VipShowInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& User_VipShowInfo::content() const {
  // @@protoc_insertion_point(field_get:User.VipShowInfo.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VipShowInfo::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VipShowInfo.content)
}
inline std::string* User_VipShowInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:User.VipShowInfo.content)
  return _s;
}
inline const std::string& User_VipShowInfo::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void User_VipShowInfo::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VipShowInfo.content)
  return _impl_.content_.Release();
}
inline void User_VipShowInfo::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VipShowInfo.content)
}

// string link = 3;
inline void User_VipShowInfo::clear_link() {
  _impl_.link_.ClearToEmpty();
}
inline const std::string& User_VipShowInfo::link() const {
  // @@protoc_insertion_point(field_get:User.VipShowInfo.link)
  return _internal_link();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VipShowInfo::set_link(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.link_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VipShowInfo.link)
}
inline std::string* User_VipShowInfo::mutable_link() {
  std::string* _s = _internal_mutable_link();
  // @@protoc_insertion_point(field_mutable:User.VipShowInfo.link)
  return _s;
}
inline const std::string& User_VipShowInfo::_internal_link() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.link_.Get();
}
inline void User_VipShowInfo::_internal_set_link(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.link_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::_internal_mutable_link() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.link_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::release_link() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VipShowInfo.link)
  return _impl_.link_.Release();
}
inline void User_VipShowInfo::set_allocated_link(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.link_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.link_.IsDefault()) {
          _impl_.link_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VipShowInfo.link)
}

// string title = 4;
inline void User_VipShowInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& User_VipShowInfo::title() const {
  // @@protoc_insertion_point(field_get:User.VipShowInfo.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VipShowInfo::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VipShowInfo.title)
}
inline std::string* User_VipShowInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:User.VipShowInfo.title)
  return _s;
}
inline const std::string& User_VipShowInfo::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void User_VipShowInfo::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VipShowInfo::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VipShowInfo.title)
  return _impl_.title_.Release();
}
inline void User_VipShowInfo::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VipShowInfo.title)
}

// -------------------------------------------------------------------

// User_TbVipInfo

// string intro = 1;
inline void User_TbVipInfo::clear_intro() {
  _impl_.intro_.ClearToEmpty();
}
inline const std::string& User_TbVipInfo::intro() const {
  // @@protoc_insertion_point(field_get:User.TbVipInfo.intro)
  return _internal_intro();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_TbVipInfo::set_intro(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intro_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.TbVipInfo.intro)
}
inline std::string* User_TbVipInfo::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:User.TbVipInfo.intro)
  return _s;
}
inline const std::string& User_TbVipInfo::_internal_intro() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intro_.Get();
}
inline void User_TbVipInfo::_internal_set_intro(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* User_TbVipInfo::_internal_mutable_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.intro_.Mutable( GetArenaForAllocation());
}
inline std::string* User_TbVipInfo::release_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.TbVipInfo.intro)
  return _impl_.intro_.Release();
}
inline void User_TbVipInfo::set_allocated_intro(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intro_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intro_.IsDefault()) {
          _impl_.intro_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.TbVipInfo.intro)
}

// string v_url = 2;
inline void User_TbVipInfo::clear_v_url() {
  _impl_.v_url_.ClearToEmpty();
}
inline const std::string& User_TbVipInfo::v_url() const {
  // @@protoc_insertion_point(field_get:User.TbVipInfo.v_url)
  return _internal_v_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_TbVipInfo::set_v_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.TbVipInfo.v_url)
}
inline std::string* User_TbVipInfo::mutable_v_url() {
  std::string* _s = _internal_mutable_v_url();
  // @@protoc_insertion_point(field_mutable:User.TbVipInfo.v_url)
  return _s;
}
inline const std::string& User_TbVipInfo::_internal_v_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_url_.Get();
}
inline void User_TbVipInfo::_internal_set_v_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_url_.Set(value, GetArenaForAllocation());
}
inline std::string* User_TbVipInfo::_internal_mutable_v_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.v_url_.Mutable( GetArenaForAllocation());
}
inline std::string* User_TbVipInfo::release_v_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.TbVipInfo.v_url)
  return _impl_.v_url_.Release();
}
inline void User_TbVipInfo::set_allocated_v_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.v_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.v_url_.IsDefault()) {
          _impl_.v_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.TbVipInfo.v_url)
}

// string v_detail = 3;
inline void User_TbVipInfo::clear_v_detail() {
  _impl_.v_detail_.ClearToEmpty();
}
inline const std::string& User_TbVipInfo::v_detail() const {
  // @@protoc_insertion_point(field_get:User.TbVipInfo.v_detail)
  return _internal_v_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_TbVipInfo::set_v_detail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.TbVipInfo.v_detail)
}
inline std::string* User_TbVipInfo::mutable_v_detail() {
  std::string* _s = _internal_mutable_v_detail();
  // @@protoc_insertion_point(field_mutable:User.TbVipInfo.v_detail)
  return _s;
}
inline const std::string& User_TbVipInfo::_internal_v_detail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_detail_.Get();
}
inline void User_TbVipInfo::_internal_set_v_detail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* User_TbVipInfo::_internal_mutable_v_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.v_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* User_TbVipInfo::release_v_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.TbVipInfo.v_detail)
  return _impl_.v_detail_.Release();
}
inline void User_TbVipInfo::set_allocated_v_detail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.v_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.v_detail_.IsDefault()) {
          _impl_.v_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.TbVipInfo.v_detail)
}

// -------------------------------------------------------------------

// User_NewGodInfo

// int32 status = 1;
inline void User_NewGodInfo::clear_status() {
  _impl_.status_ = 0;
}
inline ::int32_t User_NewGodInfo::status() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.status)
  return _internal_status();
}
inline void User_NewGodInfo::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:User.NewGodInfo.status)
}
inline ::int32_t User_NewGodInfo::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void User_NewGodInfo::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// uint32 field_id = 2;
inline void User_NewGodInfo::clear_field_id() {
  _impl_.field_id_ = 0u;
}
inline ::uint32_t User_NewGodInfo::field_id() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.field_id)
  return _internal_field_id();
}
inline void User_NewGodInfo::set_field_id(::uint32_t value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:User.NewGodInfo.field_id)
}
inline ::uint32_t User_NewGodInfo::_internal_field_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_id_;
}
inline void User_NewGodInfo::_internal_set_field_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_id_ = value;
}

// string field_name = 3;
inline void User_NewGodInfo::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& User_NewGodInfo::field_name() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.field_name)
  return _internal_field_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_NewGodInfo::set_field_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.NewGodInfo.field_name)
}
inline std::string* User_NewGodInfo::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:User.NewGodInfo.field_name)
  return _s;
}
inline const std::string& User_NewGodInfo::_internal_field_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_name_.Get();
}
inline void User_NewGodInfo::_internal_set_field_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::_internal_mutable_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::release_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.NewGodInfo.field_name)
  return _impl_.field_name_.Release();
}
inline void User_NewGodInfo::set_allocated_field_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_name_.IsDefault()) {
          _impl_.field_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.NewGodInfo.field_name)
}

// uint32 type = 4;
inline void User_NewGodInfo::clear_type() {
  _impl_.type_ = 0u;
}
inline ::uint32_t User_NewGodInfo::type() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.type)
  return _internal_type();
}
inline void User_NewGodInfo::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:User.NewGodInfo.type)
}
inline ::uint32_t User_NewGodInfo::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void User_NewGodInfo::_internal_set_type(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string type_name = 5;
inline void User_NewGodInfo::clear_type_name() {
  _impl_.type_name_.ClearToEmpty();
}
inline const std::string& User_NewGodInfo::type_name() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.type_name)
  return _internal_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_NewGodInfo::set_type_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.NewGodInfo.type_name)
}
inline std::string* User_NewGodInfo::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:User.NewGodInfo.type_name)
  return _s;
}
inline const std::string& User_NewGodInfo::_internal_type_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_name_.Get();
}
inline void User_NewGodInfo::_internal_set_type_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::_internal_mutable_type_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::release_type_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.NewGodInfo.type_name)
  return _impl_.type_name_.Release();
}
inline void User_NewGodInfo::set_allocated_type_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_name_.IsDefault()) {
          _impl_.type_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.NewGodInfo.type_name)
}

// -------------------------------------------------------------------

// User_VirtualImageInfo_StateInfo

// string icon = 1;
inline void User_VirtualImageInfo_StateInfo::clear_icon() {
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& User_VirtualImageInfo_StateInfo::icon() const {
  // @@protoc_insertion_point(field_get:User.VirtualImageInfo.StateInfo.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VirtualImageInfo_StateInfo::set_icon(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VirtualImageInfo.StateInfo.icon)
}
inline std::string* User_VirtualImageInfo_StateInfo::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:User.VirtualImageInfo.StateInfo.icon)
  return _s;
}
inline const std::string& User_VirtualImageInfo_StateInfo::_internal_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_.Get();
}
inline void User_VirtualImageInfo_StateInfo::_internal_set_icon(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VirtualImageInfo_StateInfo::_internal_mutable_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VirtualImageInfo_StateInfo::release_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VirtualImageInfo.StateInfo.icon)
  return _impl_.icon_.Release();
}
inline void User_VirtualImageInfo_StateInfo::set_allocated_icon(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_.IsDefault()) {
          _impl_.icon_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VirtualImageInfo.StateInfo.icon)
}

// string text = 2;
inline void User_VirtualImageInfo_StateInfo::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& User_VirtualImageInfo_StateInfo::text() const {
  // @@protoc_insertion_point(field_get:User.VirtualImageInfo.StateInfo.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VirtualImageInfo_StateInfo::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VirtualImageInfo.StateInfo.text)
}
inline std::string* User_VirtualImageInfo_StateInfo::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:User.VirtualImageInfo.StateInfo.text)
  return _s;
}
inline const std::string& User_VirtualImageInfo_StateInfo::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void User_VirtualImageInfo_StateInfo::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VirtualImageInfo_StateInfo::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VirtualImageInfo_StateInfo::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VirtualImageInfo.StateInfo.text)
  return _impl_.text_.Release();
}
inline void User_VirtualImageInfo_StateInfo::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VirtualImageInfo.StateInfo.text)
}

// -------------------------------------------------------------------

// User_VirtualImageInfo

// int32 isset_virtual_image = 1;
inline void User_VirtualImageInfo::clear_isset_virtual_image() {
  _impl_.isset_virtual_image_ = 0;
}
inline ::int32_t User_VirtualImageInfo::isset_virtual_image() const {
  // @@protoc_insertion_point(field_get:User.VirtualImageInfo.isset_virtual_image)
  return _internal_isset_virtual_image();
}
inline void User_VirtualImageInfo::set_isset_virtual_image(::int32_t value) {
  _internal_set_isset_virtual_image(value);
  // @@protoc_insertion_point(field_set:User.VirtualImageInfo.isset_virtual_image)
}
inline ::int32_t User_VirtualImageInfo::_internal_isset_virtual_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isset_virtual_image_;
}
inline void User_VirtualImageInfo::_internal_set_isset_virtual_image(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.isset_virtual_image_ = value;
}

// string virtual_background = 6;
inline void User_VirtualImageInfo::clear_virtual_background() {
  _impl_.virtual_background_.ClearToEmpty();
}
inline const std::string& User_VirtualImageInfo::virtual_background() const {
  // @@protoc_insertion_point(field_get:User.VirtualImageInfo.virtual_background)
  return _internal_virtual_background();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_VirtualImageInfo::set_virtual_background(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_background_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.VirtualImageInfo.virtual_background)
}
inline std::string* User_VirtualImageInfo::mutable_virtual_background() {
  std::string* _s = _internal_mutable_virtual_background();
  // @@protoc_insertion_point(field_mutable:User.VirtualImageInfo.virtual_background)
  return _s;
}
inline const std::string& User_VirtualImageInfo::_internal_virtual_background() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_background_.Get();
}
inline void User_VirtualImageInfo::_internal_set_virtual_background(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_background_.Set(value, GetArenaForAllocation());
}
inline std::string* User_VirtualImageInfo::_internal_mutable_virtual_background() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_background_.Mutable( GetArenaForAllocation());
}
inline std::string* User_VirtualImageInfo::release_virtual_background() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VirtualImageInfo.virtual_background)
  return _impl_.virtual_background_.Release();
}
inline void User_VirtualImageInfo::set_allocated_virtual_background(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_background_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_background_.IsDefault()) {
          _impl_.virtual_background_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.VirtualImageInfo.virtual_background)
}

// .User.VirtualImageInfo.StateInfo personal_state = 9;
inline bool User_VirtualImageInfo::has_personal_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.personal_state_ != nullptr);
  return value;
}
inline void User_VirtualImageInfo::clear_personal_state() {
  if (_impl_.personal_state_ != nullptr) _impl_.personal_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::User_VirtualImageInfo_StateInfo& User_VirtualImageInfo::_internal_personal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_VirtualImageInfo_StateInfo* p = _impl_.personal_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_VirtualImageInfo_StateInfo&>(::_User_VirtualImageInfo_StateInfo_default_instance_);
}
inline const ::User_VirtualImageInfo_StateInfo& User_VirtualImageInfo::personal_state() const {
  // @@protoc_insertion_point(field_get:User.VirtualImageInfo.personal_state)
  return _internal_personal_state();
}
inline void User_VirtualImageInfo::unsafe_arena_set_allocated_personal_state(::User_VirtualImageInfo_StateInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.personal_state_);
  }
  _impl_.personal_state_ = reinterpret_cast<::User_VirtualImageInfo_StateInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.VirtualImageInfo.personal_state)
}
inline ::User_VirtualImageInfo_StateInfo* User_VirtualImageInfo::release_personal_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User_VirtualImageInfo_StateInfo* released = _impl_.personal_state_;
  _impl_.personal_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_VirtualImageInfo_StateInfo* User_VirtualImageInfo::unsafe_arena_release_personal_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.VirtualImageInfo.personal_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User_VirtualImageInfo_StateInfo* temp = _impl_.personal_state_;
  _impl_.personal_state_ = nullptr;
  return temp;
}
inline ::User_VirtualImageInfo_StateInfo* User_VirtualImageInfo::_internal_mutable_personal_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.personal_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_VirtualImageInfo_StateInfo>(GetArenaForAllocation());
    _impl_.personal_state_ = reinterpret_cast<::User_VirtualImageInfo_StateInfo*>(p);
  }
  return _impl_.personal_state_;
}
inline ::User_VirtualImageInfo_StateInfo* User_VirtualImageInfo::mutable_personal_state() {
  ::User_VirtualImageInfo_StateInfo* _msg = _internal_mutable_personal_state();
  // @@protoc_insertion_point(field_mutable:User.VirtualImageInfo.personal_state)
  return _msg;
}
inline void User_VirtualImageInfo::set_allocated_personal_state(::User_VirtualImageInfo_StateInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_VirtualImageInfo_StateInfo*>(_impl_.personal_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_VirtualImageInfo_StateInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.personal_state_ = reinterpret_cast<::User_VirtualImageInfo_StateInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.VirtualImageInfo.personal_state)
}

// int32 is_display = 12;
inline void User_VirtualImageInfo::clear_is_display() {
  _impl_.is_display_ = 0;
}
inline ::int32_t User_VirtualImageInfo::is_display() const {
  // @@protoc_insertion_point(field_get:User.VirtualImageInfo.is_display)
  return _internal_is_display();
}
inline void User_VirtualImageInfo::set_is_display(::int32_t value) {
  _internal_set_is_display(value);
  // @@protoc_insertion_point(field_set:User.VirtualImageInfo.is_display)
}
inline ::int32_t User_VirtualImageInfo::_internal_is_display() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_display_;
}
inline void User_VirtualImageInfo::_internal_set_is_display(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_display_ = value;
}

// -------------------------------------------------------------------

// User_UserGrowth

// uint32 level_id = 1;
inline void User_UserGrowth::clear_level_id() {
  _impl_.level_id_ = 0u;
}
inline ::uint32_t User_UserGrowth::level_id() const {
  // @@protoc_insertion_point(field_get:User.UserGrowth.level_id)
  return _internal_level_id();
}
inline void User_UserGrowth::set_level_id(::uint32_t value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:User.UserGrowth.level_id)
}
inline ::uint32_t User_UserGrowth::_internal_level_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_id_;
}
inline void User_UserGrowth::_internal_set_level_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_id_ = value;
}

// int64 score = 2;
inline void User_UserGrowth::clear_score() {
  _impl_.score_ = ::int64_t{0};
}
inline ::int64_t User_UserGrowth::score() const {
  // @@protoc_insertion_point(field_get:User.UserGrowth.score)
  return _internal_score();
}
inline void User_UserGrowth::set_score(::int64_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:User.UserGrowth.score)
}
inline ::int64_t User_UserGrowth::_internal_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_;
}
inline void User_UserGrowth::_internal_set_score(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.score_ = value;
}

// int64 target_score = 3;
inline void User_UserGrowth::clear_target_score() {
  _impl_.target_score_ = ::int64_t{0};
}
inline ::int64_t User_UserGrowth::target_score() const {
  // @@protoc_insertion_point(field_get:User.UserGrowth.target_score)
  return _internal_target_score();
}
inline void User_UserGrowth::set_target_score(::int64_t value) {
  _internal_set_target_score(value);
  // @@protoc_insertion_point(field_set:User.UserGrowth.target_score)
}
inline ::int64_t User_UserGrowth::_internal_target_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_score_;
}
inline void User_UserGrowth::_internal_set_target_score(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_score_ = value;
}

// double tmoney = 4;
inline void User_UserGrowth::clear_tmoney() {
  _impl_.tmoney_ = 0;
}
inline double User_UserGrowth::tmoney() const {
  // @@protoc_insertion_point(field_get:User.UserGrowth.tmoney)
  return _internal_tmoney();
}
inline void User_UserGrowth::set_tmoney(double value) {
  _internal_set_tmoney(value);
  // @@protoc_insertion_point(field_set:User.UserGrowth.tmoney)
}
inline double User_UserGrowth::_internal_tmoney() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tmoney_;
}
inline void User_UserGrowth::_internal_set_tmoney(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tmoney_ = value;
}

// -------------------------------------------------------------------

// User

// int64 id = 2;
inline void User::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t User::id() const {
  // @@protoc_insertion_point(field_get:User.id)
  return _internal_id();
}
inline void User::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:User.id)
}
inline ::int64_t User::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void User::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 3;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// string name_show = 4;
inline void User::clear_name_show() {
  _impl_.name_show_.ClearToEmpty();
}
inline const std::string& User::name_show() const {
  // @@protoc_insertion_point(field_get:User.name_show)
  return _internal_name_show();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_name_show(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_show_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name_show)
}
inline std::string* User::mutable_name_show() {
  std::string* _s = _internal_mutable_name_show();
  // @@protoc_insertion_point(field_mutable:User.name_show)
  return _s;
}
inline const std::string& User::_internal_name_show() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_show_.Get();
}
inline void User::_internal_set_name_show(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_show_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_show_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.name_show)
  return _impl_.name_show_.Release();
}
inline void User::set_allocated_name_show(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_show_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_show_.IsDefault()) {
          _impl_.name_show_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name_show)
}

// string portrait = 5;
inline void User::clear_portrait() {
  _impl_.portrait_.ClearToEmpty();
}
inline const std::string& User::portrait() const {
  // @@protoc_insertion_point(field_get:User.portrait)
  return _internal_portrait();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_portrait(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.portrait_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.portrait)
}
inline std::string* User::mutable_portrait() {
  std::string* _s = _internal_mutable_portrait();
  // @@protoc_insertion_point(field_mutable:User.portrait)
  return _s;
}
inline const std::string& User::_internal_portrait() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.portrait_.Get();
}
inline void User::_internal_set_portrait(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.portrait_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.portrait_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.portrait)
  return _impl_.portrait_.Release();
}
inline void User::set_allocated_portrait(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.portrait_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.portrait_.IsDefault()) {
          _impl_.portrait_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.portrait)
}

// int32 userhide = 9;
inline void User::clear_userhide() {
  _impl_.userhide_ = 0;
}
inline ::int32_t User::userhide() const {
  // @@protoc_insertion_point(field_get:User.userhide)
  return _internal_userhide();
}
inline void User::set_userhide(::int32_t value) {
  _internal_set_userhide(value);
  // @@protoc_insertion_point(field_set:User.userhide)
}
inline ::int32_t User::_internal_userhide() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userhide_;
}
inline void User::_internal_set_userhide(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userhide_ = value;
}

// .User.Balv balv = 10;
inline bool User::has_balv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.balv_ != nullptr);
  return value;
}
inline void User::clear_balv() {
  if (_impl_.balv_ != nullptr) _impl_.balv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::User_Balv& User::_internal_balv() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_Balv* p = _impl_.balv_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_Balv&>(::_User_Balv_default_instance_);
}
inline const ::User_Balv& User::balv() const {
  // @@protoc_insertion_point(field_get:User.balv)
  return _internal_balv();
}
inline void User::unsafe_arena_set_allocated_balv(::User_Balv* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.balv_);
  }
  _impl_.balv_ = reinterpret_cast<::User_Balv*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.balv)
}
inline ::User_Balv* User::release_balv() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User_Balv* released = _impl_.balv_;
  _impl_.balv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_Balv* User::unsafe_arena_release_balv() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.balv)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User_Balv* temp = _impl_.balv_;
  _impl_.balv_ = nullptr;
  return temp;
}
inline ::User_Balv* User::_internal_mutable_balv() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.balv_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_Balv>(GetArenaForAllocation());
    _impl_.balv_ = reinterpret_cast<::User_Balv*>(p);
  }
  return _impl_.balv_;
}
inline ::User_Balv* User::mutable_balv() {
  ::User_Balv* _msg = _internal_mutable_balv();
  // @@protoc_insertion_point(field_mutable:User.balv)
  return _msg;
}
inline void User::set_allocated_balv(::User_Balv* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_Balv*>(_impl_.balv_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_Balv*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.balv_ = reinterpret_cast<::User_Balv*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.balv)
}

// string rank = 12;
inline void User::clear_rank() {
  _impl_.rank_.ClearToEmpty();
}
inline const std::string& User::rank() const {
  // @@protoc_insertion_point(field_get:User.rank)
  return _internal_rank();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_rank(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rank_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.rank)
}
inline std::string* User::mutable_rank() {
  std::string* _s = _internal_mutable_rank();
  // @@protoc_insertion_point(field_mutable:User.rank)
  return _s;
}
inline const std::string& User::_internal_rank() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rank_.Get();
}
inline void User::_internal_set_rank(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rank_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_rank() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.rank_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_rank() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.rank)
  return _impl_.rank_.Release();
}
inline void User::set_allocated_rank(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rank_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rank_.IsDefault()) {
          _impl_.rank_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.rank)
}

// int32 is_verify = 15;
inline void User::clear_is_verify() {
  _impl_.is_verify_ = 0;
}
inline ::int32_t User::is_verify() const {
  // @@protoc_insertion_point(field_get:User.is_verify)
  return _internal_is_verify();
}
inline void User::set_is_verify(::int32_t value) {
  _internal_set_is_verify(value);
  // @@protoc_insertion_point(field_set:User.is_verify)
}
inline ::int32_t User::_internal_is_verify() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_verify_;
}
inline void User::_internal_set_is_verify(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_verify_ = value;
}

// int32 is_interestman = 16;
inline void User::clear_is_interestman() {
  _impl_.is_interestman_ = 0;
}
inline ::int32_t User::is_interestman() const {
  // @@protoc_insertion_point(field_get:User.is_interestman)
  return _internal_is_interestman();
}
inline void User::set_is_interestman(::int32_t value) {
  _internal_set_is_interestman(value);
  // @@protoc_insertion_point(field_set:User.is_interestman)
}
inline ::int32_t User::_internal_is_interestman() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_interestman_;
}
inline void User::_internal_set_is_interestman(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_interestman_ = value;
}

// repeated .User.Icon iconinfo = 17;
inline int User::_internal_iconinfo_size() const {
  return _internal_iconinfo().size();
}
inline int User::iconinfo_size() const {
  return _internal_iconinfo_size();
}
inline void User::clear_iconinfo() {
  _internal_mutable_iconinfo()->Clear();
}
inline ::User_Icon* User::mutable_iconinfo(int index) {
  // @@protoc_insertion_point(field_mutable:User.iconinfo)
  return _internal_mutable_iconinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::User_Icon >*
User::mutable_iconinfo() {
  // @@protoc_insertion_point(field_mutable_list:User.iconinfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_iconinfo();
}
inline const ::User_Icon& User::iconinfo(int index) const {
  // @@protoc_insertion_point(field_get:User.iconinfo)
    return _internal_iconinfo().Get(index);
}
inline ::User_Icon* User::add_iconinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::User_Icon* _add = _internal_mutable_iconinfo()->Add();
  // @@protoc_insertion_point(field_add:User.iconinfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_Icon >&
User::iconinfo() const {
  // @@protoc_insertion_point(field_list:User.iconinfo)
  return _internal_iconinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::User_Icon>&
User::_internal_iconinfo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iconinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::User_Icon>*
User::_internal_mutable_iconinfo() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.iconinfo_;
}

// repeated .User.TshowInfo tshow_icon = 18;
inline int User::_internal_tshow_icon_size() const {
  return _internal_tshow_icon().size();
}
inline int User::tshow_icon_size() const {
  return _internal_tshow_icon_size();
}
inline void User::clear_tshow_icon() {
  _internal_mutable_tshow_icon()->Clear();
}
inline ::User_TshowInfo* User::mutable_tshow_icon(int index) {
  // @@protoc_insertion_point(field_mutable:User.tshow_icon)
  return _internal_mutable_tshow_icon()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >*
User::mutable_tshow_icon() {
  // @@protoc_insertion_point(field_mutable_list:User.tshow_icon)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tshow_icon();
}
inline const ::User_TshowInfo& User::tshow_icon(int index) const {
  // @@protoc_insertion_point(field_get:User.tshow_icon)
    return _internal_tshow_icon().Get(index);
}
inline ::User_TshowInfo* User::add_tshow_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::User_TshowInfo* _add = _internal_mutable_tshow_icon()->Add();
  // @@protoc_insertion_point(field_add:User.tshow_icon)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >&
User::tshow_icon() const {
  // @@protoc_insertion_point(field_list:User.tshow_icon)
  return _internal_tshow_icon();
}
inline const ::google::protobuf::RepeatedPtrField<::User_TshowInfo>&
User::_internal_tshow_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tshow_icon_;
}
inline ::google::protobuf::RepeatedPtrField<::User_TshowInfo>*
User::_internal_mutable_tshow_icon() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tshow_icon_;
}

// int32 user_type = 19;
inline void User::clear_user_type() {
  _impl_.user_type_ = 0;
}
inline ::int32_t User::user_type() const {
  // @@protoc_insertion_point(field_get:User.user_type)
  return _internal_user_type();
}
inline void User::set_user_type(::int32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:User.user_type)
}
inline ::int32_t User::_internal_user_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_type_;
}
inline void User::_internal_set_user_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_type_ = value;
}

// int32 is_coreuser = 20;
inline void User::clear_is_coreuser() {
  _impl_.is_coreuser_ = 0;
}
inline ::int32_t User::is_coreuser() const {
  // @@protoc_insertion_point(field_get:User.is_coreuser)
  return _internal_is_coreuser();
}
inline void User::set_is_coreuser(::int32_t value) {
  _internal_set_is_coreuser(value);
  // @@protoc_insertion_point(field_set:User.is_coreuser)
}
inline ::int32_t User::_internal_is_coreuser() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_coreuser_;
}
inline void User::_internal_set_is_coreuser(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_coreuser_ = value;
}

// int32 level_id = 23;
inline void User::clear_level_id() {
  _impl_.level_id_ = 0;
}
inline ::int32_t User::level_id() const {
  // @@protoc_insertion_point(field_get:User.level_id)
  return _internal_level_id();
}
inline void User::set_level_id(::int32_t value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:User.level_id)
}
inline ::int32_t User::_internal_level_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_id_;
}
inline void User::_internal_set_level_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_id_ = value;
}

// int32 is_bawu = 25;
inline void User::clear_is_bawu() {
  _impl_.is_bawu_ = 0;
}
inline ::int32_t User::is_bawu() const {
  // @@protoc_insertion_point(field_get:User.is_bawu)
  return _internal_is_bawu();
}
inline void User::set_is_bawu(::int32_t value) {
  _internal_set_is_bawu(value);
  // @@protoc_insertion_point(field_set:User.is_bawu)
}
inline ::int32_t User::_internal_is_bawu() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_bawu_;
}
inline void User::_internal_set_is_bawu(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_bawu_ = value;
}

// string bawu_type = 26;
inline void User::clear_bawu_type() {
  _impl_.bawu_type_.ClearToEmpty();
}
inline const std::string& User::bawu_type() const {
  // @@protoc_insertion_point(field_get:User.bawu_type)
  return _internal_bawu_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_bawu_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bawu_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.bawu_type)
}
inline std::string* User::mutable_bawu_type() {
  std::string* _s = _internal_mutable_bawu_type();
  // @@protoc_insertion_point(field_mutable:User.bawu_type)
  return _s;
}
inline const std::string& User::_internal_bawu_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bawu_type_.Get();
}
inline void User::_internal_set_bawu_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bawu_type_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_bawu_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bawu_type_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_bawu_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.bawu_type)
  return _impl_.bawu_type_.Release();
}
inline void User::set_allocated_bawu_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bawu_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bawu_type_.IsDefault()) {
          _impl_.bawu_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.bawu_type)
}

// string portraith = 27;
inline void User::clear_portraith() {
  _impl_.portraith_.ClearToEmpty();
}
inline const std::string& User::portraith() const {
  // @@protoc_insertion_point(field_get:User.portraith)
  return _internal_portraith();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_portraith(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.portraith_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.portraith)
}
inline std::string* User::mutable_portraith() {
  std::string* _s = _internal_mutable_portraith();
  // @@protoc_insertion_point(field_mutable:User.portraith)
  return _s;
}
inline const std::string& User::_internal_portraith() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.portraith_.Get();
}
inline void User::_internal_set_portraith(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.portraith_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_portraith() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.portraith_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_portraith() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.portraith)
  return _impl_.portraith_.Release();
}
inline void User::set_allocated_portraith(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.portraith_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.portraith_.IsDefault()) {
          _impl_.portraith_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.portraith)
}

// string ip = 28;
inline void User::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& User::ip() const {
  // @@protoc_insertion_point(field_get:User.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.ip)
}
inline std::string* User::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:User.ip)
  return _s;
}
inline const std::string& User::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void User::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.ip)
  return _impl_.ip_.Release();
}
inline void User::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.ip)
}

// string BDUSS = 29;
inline void User::clear_bduss() {
  _impl_.bduss_.ClearToEmpty();
}
inline const std::string& User::bduss() const {
  // @@protoc_insertion_point(field_get:User.BDUSS)
  return _internal_bduss();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_bduss(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bduss_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.BDUSS)
}
inline std::string* User::mutable_bduss() {
  std::string* _s = _internal_mutable_bduss();
  // @@protoc_insertion_point(field_mutable:User.BDUSS)
  return _s;
}
inline const std::string& User::_internal_bduss() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bduss_.Get();
}
inline void User::_internal_set_bduss(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bduss_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_bduss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bduss_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_bduss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.BDUSS)
  return _impl_.bduss_.Release();
}
inline void User::set_allocated_bduss(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bduss_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bduss_.IsDefault()) {
          _impl_.bduss_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.BDUSS)
}

// int32 fans_num = 30;
inline void User::clear_fans_num() {
  _impl_.fans_num_ = 0;
}
inline ::int32_t User::fans_num() const {
  // @@protoc_insertion_point(field_get:User.fans_num)
  return _internal_fans_num();
}
inline void User::set_fans_num(::int32_t value) {
  _internal_set_fans_num(value);
  // @@protoc_insertion_point(field_set:User.fans_num)
}
inline ::int32_t User::_internal_fans_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fans_num_;
}
inline void User::_internal_set_fans_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fans_num_ = value;
}

// int32 concern_num = 31;
inline void User::clear_concern_num() {
  _impl_.concern_num_ = 0;
}
inline ::int32_t User::concern_num() const {
  // @@protoc_insertion_point(field_get:User.concern_num)
  return _internal_concern_num();
}
inline void User::set_concern_num(::int32_t value) {
  _internal_set_concern_num(value);
  // @@protoc_insertion_point(field_set:User.concern_num)
}
inline ::int32_t User::_internal_concern_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.concern_num_;
}
inline void User::_internal_set_concern_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.concern_num_ = value;
}

// int32 sex = 32;
inline void User::clear_sex() {
  _impl_.sex_ = 0;
}
inline ::int32_t User::sex() const {
  // @@protoc_insertion_point(field_get:User.sex)
  return _internal_sex();
}
inline void User::set_sex(::int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:User.sex)
}
inline ::int32_t User::_internal_sex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sex_;
}
inline void User::_internal_set_sex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sex_ = value;
}

// int32 my_like_num = 33;
inline void User::clear_my_like_num() {
  _impl_.my_like_num_ = 0;
}
inline ::int32_t User::my_like_num() const {
  // @@protoc_insertion_point(field_get:User.my_like_num)
  return _internal_my_like_num();
}
inline void User::set_my_like_num(::int32_t value) {
  _internal_set_my_like_num(value);
  // @@protoc_insertion_point(field_set:User.my_like_num)
}
inline ::int32_t User::_internal_my_like_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_like_num_;
}
inline void User::_internal_set_my_like_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.my_like_num_ = value;
}

// string intro = 34;
inline void User::clear_intro() {
  _impl_.intro_.ClearToEmpty();
}
inline const std::string& User::intro() const {
  // @@protoc_insertion_point(field_get:User.intro)
  return _internal_intro();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_intro(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intro_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.intro)
}
inline std::string* User::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:User.intro)
  return _s;
}
inline const std::string& User::_internal_intro() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intro_.Get();
}
inline void User::_internal_set_intro(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.intro_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.intro)
  return _impl_.intro_.Release();
}
inline void User::set_allocated_intro(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intro_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intro_.IsDefault()) {
          _impl_.intro_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.intro)
}

// int32 post_num = 37;
inline void User::clear_post_num() {
  _impl_.post_num_ = 0;
}
inline ::int32_t User::post_num() const {
  // @@protoc_insertion_point(field_get:User.post_num)
  return _internal_post_num();
}
inline void User::set_post_num(::int32_t value) {
  _internal_set_post_num(value);
  // @@protoc_insertion_point(field_set:User.post_num)
}
inline ::int32_t User::_internal_post_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_num_;
}
inline void User::_internal_set_post_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_num_ = value;
}

// string tb_age = 38;
inline void User::clear_tb_age() {
  _impl_.tb_age_.ClearToEmpty();
}
inline const std::string& User::tb_age() const {
  // @@protoc_insertion_point(field_get:User.tb_age)
  return _internal_tb_age();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_tb_age(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tb_age_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.tb_age)
}
inline std::string* User::mutable_tb_age() {
  std::string* _s = _internal_mutable_tb_age();
  // @@protoc_insertion_point(field_mutable:User.tb_age)
  return _s;
}
inline const std::string& User::_internal_tb_age() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tb_age_.Get();
}
inline void User::_internal_set_tb_age(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tb_age_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_tb_age() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tb_age_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_tb_age() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.tb_age)
  return _impl_.tb_age_.Release();
}
inline void User::set_allocated_tb_age(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tb_age_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tb_age_.IsDefault()) {
          _impl_.tb_age_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.tb_age)
}

// int32 gender = 42;
inline void User::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::int32_t User::gender() const {
  // @@protoc_insertion_point(field_get:User.gender)
  return _internal_gender();
}
inline void User::set_gender(::int32_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:User.gender)
}
inline ::int32_t User::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gender_;
}
inline void User::_internal_set_gender(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// int32 is_mask = 43;
inline void User::clear_is_mask() {
  _impl_.is_mask_ = 0;
}
inline ::int32_t User::is_mask() const {
  // @@protoc_insertion_point(field_get:User.is_mask)
  return _internal_is_mask();
}
inline void User::set_is_mask(::int32_t value) {
  _internal_set_is_mask(value);
  // @@protoc_insertion_point(field_set:User.is_mask)
}
inline ::int32_t User::_internal_is_mask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_mask_;
}
inline void User::_internal_set_is_mask(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_mask_ = value;
}

// .User.PrivSets priv_sets = 45;
inline bool User::has_priv_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.priv_sets_ != nullptr);
  return value;
}
inline void User::clear_priv_sets() {
  if (_impl_.priv_sets_ != nullptr) _impl_.priv_sets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::User_PrivSets& User::_internal_priv_sets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_PrivSets* p = _impl_.priv_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_PrivSets&>(::_User_PrivSets_default_instance_);
}
inline const ::User_PrivSets& User::priv_sets() const {
  // @@protoc_insertion_point(field_get:User.priv_sets)
  return _internal_priv_sets();
}
inline void User::unsafe_arena_set_allocated_priv_sets(::User_PrivSets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.priv_sets_);
  }
  _impl_.priv_sets_ = reinterpret_cast<::User_PrivSets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.priv_sets)
}
inline ::User_PrivSets* User::release_priv_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::User_PrivSets* released = _impl_.priv_sets_;
  _impl_.priv_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_PrivSets* User::unsafe_arena_release_priv_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.priv_sets)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::User_PrivSets* temp = _impl_.priv_sets_;
  _impl_.priv_sets_ = nullptr;
  return temp;
}
inline ::User_PrivSets* User::_internal_mutable_priv_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.priv_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_PrivSets>(GetArenaForAllocation());
    _impl_.priv_sets_ = reinterpret_cast<::User_PrivSets*>(p);
  }
  return _impl_.priv_sets_;
}
inline ::User_PrivSets* User::mutable_priv_sets() {
  ::User_PrivSets* _msg = _internal_mutable_priv_sets();
  // @@protoc_insertion_point(field_mutable:User.priv_sets)
  return _msg;
}
inline void User::set_allocated_priv_sets(::User_PrivSets* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_PrivSets*>(_impl_.priv_sets_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_PrivSets*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.priv_sets_ = reinterpret_cast<::User_PrivSets*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.priv_sets)
}

// repeated .User.LikeForumInfo likeForum = 47;
inline int User::_internal_likeforum_size() const {
  return _internal_likeforum().size();
}
inline int User::likeforum_size() const {
  return _internal_likeforum_size();
}
inline void User::clear_likeforum() {
  _internal_mutable_likeforum()->Clear();
}
inline ::User_LikeForumInfo* User::mutable_likeforum(int index) {
  // @@protoc_insertion_point(field_mutable:User.likeForum)
  return _internal_mutable_likeforum()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >*
User::mutable_likeforum() {
  // @@protoc_insertion_point(field_mutable_list:User.likeForum)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_likeforum();
}
inline const ::User_LikeForumInfo& User::likeforum(int index) const {
  // @@protoc_insertion_point(field_get:User.likeForum)
    return _internal_likeforum().Get(index);
}
inline ::User_LikeForumInfo* User::add_likeforum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::User_LikeForumInfo* _add = _internal_mutable_likeforum()->Add();
  // @@protoc_insertion_point(field_add:User.likeForum)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >&
User::likeforum() const {
  // @@protoc_insertion_point(field_list:User.likeForum)
  return _internal_likeforum();
}
inline const ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>&
User::_internal_likeforum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.likeforum_;
}
inline ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>*
User::_internal_mutable_likeforum() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.likeforum_;
}

// int32 is_guanfang = 52;
inline void User::clear_is_guanfang() {
  _impl_.is_guanfang_ = 0;
}
inline ::int32_t User::is_guanfang() const {
  // @@protoc_insertion_point(field_get:User.is_guanfang)
  return _internal_is_guanfang();
}
inline void User::set_is_guanfang(::int32_t value) {
  _internal_set_is_guanfang(value);
  // @@protoc_insertion_point(field_set:User.is_guanfang)
}
inline ::int32_t User::_internal_is_guanfang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_guanfang_;
}
inline void User::_internal_set_is_guanfang(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_guanfang_ = value;
}

// .User.UserVipInfo vipInfo = 61;
inline bool User::has_vipinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vipinfo_ != nullptr);
  return value;
}
inline void User::clear_vipinfo() {
  if (_impl_.vipinfo_ != nullptr) _impl_.vipinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::User_UserVipInfo& User::_internal_vipinfo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_UserVipInfo* p = _impl_.vipinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_UserVipInfo&>(::_User_UserVipInfo_default_instance_);
}
inline const ::User_UserVipInfo& User::vipinfo() const {
  // @@protoc_insertion_point(field_get:User.vipInfo)
  return _internal_vipinfo();
}
inline void User::unsafe_arena_set_allocated_vipinfo(::User_UserVipInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vipinfo_);
  }
  _impl_.vipinfo_ = reinterpret_cast<::User_UserVipInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.vipInfo)
}
inline ::User_UserVipInfo* User::release_vipinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::User_UserVipInfo* released = _impl_.vipinfo_;
  _impl_.vipinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_UserVipInfo* User::unsafe_arena_release_vipinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.vipInfo)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::User_UserVipInfo* temp = _impl_.vipinfo_;
  _impl_.vipinfo_ = nullptr;
  return temp;
}
inline ::User_UserVipInfo* User::_internal_mutable_vipinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vipinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_UserVipInfo>(GetArenaForAllocation());
    _impl_.vipinfo_ = reinterpret_cast<::User_UserVipInfo*>(p);
  }
  return _impl_.vipinfo_;
}
inline ::User_UserVipInfo* User::mutable_vipinfo() {
  ::User_UserVipInfo* _msg = _internal_mutable_vipinfo();
  // @@protoc_insertion_point(field_mutable:User.vipInfo)
  return _msg;
}
inline void User::set_allocated_vipinfo(::User_UserVipInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_UserVipInfo*>(_impl_.vipinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_UserVipInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.vipinfo_ = reinterpret_cast<::User_UserVipInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.vipInfo)
}

// .User.GodInfo god_data = 62;
inline bool User::has_god_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.god_data_ != nullptr);
  return value;
}
inline void User::clear_god_data() {
  if (_impl_.god_data_ != nullptr) _impl_.god_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::User_GodInfo& User::_internal_god_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_GodInfo* p = _impl_.god_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_GodInfo&>(::_User_GodInfo_default_instance_);
}
inline const ::User_GodInfo& User::god_data() const {
  // @@protoc_insertion_point(field_get:User.god_data)
  return _internal_god_data();
}
inline void User::unsafe_arena_set_allocated_god_data(::User_GodInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.god_data_);
  }
  _impl_.god_data_ = reinterpret_cast<::User_GodInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.god_data)
}
inline ::User_GodInfo* User::release_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::User_GodInfo* released = _impl_.god_data_;
  _impl_.god_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_GodInfo* User::unsafe_arena_release_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.god_data)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::User_GodInfo* temp = _impl_.god_data_;
  _impl_.god_data_ = nullptr;
  return temp;
}
inline ::User_GodInfo* User::_internal_mutable_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.god_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_GodInfo>(GetArenaForAllocation());
    _impl_.god_data_ = reinterpret_cast<::User_GodInfo*>(p);
  }
  return _impl_.god_data_;
}
inline ::User_GodInfo* User::mutable_god_data() {
  ::User_GodInfo* _msg = _internal_mutable_god_data();
  // @@protoc_insertion_point(field_mutable:User.god_data)
  return _msg;
}
inline void User::set_allocated_god_data(::User_GodInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_GodInfo*>(_impl_.god_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_GodInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.god_data_ = reinterpret_cast<::User_GodInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.god_data)
}

// int32 heavy_user = 63;
inline void User::clear_heavy_user() {
  _impl_.heavy_user_ = 0;
}
inline ::int32_t User::heavy_user() const {
  // @@protoc_insertion_point(field_get:User.heavy_user)
  return _internal_heavy_user();
}
inline void User::set_heavy_user(::int32_t value) {
  _internal_set_heavy_user(value);
  // @@protoc_insertion_point(field_set:User.heavy_user)
}
inline ::int32_t User::_internal_heavy_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heavy_user_;
}
inline void User::_internal_set_heavy_user(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.heavy_user_ = value;
}

// .User.VipShowInfo vip_show_info = 64;
inline bool User::has_vip_show_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vip_show_info_ != nullptr);
  return value;
}
inline void User::clear_vip_show_info() {
  if (_impl_.vip_show_info_ != nullptr) _impl_.vip_show_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::User_VipShowInfo& User::_internal_vip_show_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_VipShowInfo* p = _impl_.vip_show_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_VipShowInfo&>(::_User_VipShowInfo_default_instance_);
}
inline const ::User_VipShowInfo& User::vip_show_info() const {
  // @@protoc_insertion_point(field_get:User.vip_show_info)
  return _internal_vip_show_info();
}
inline void User::unsafe_arena_set_allocated_vip_show_info(::User_VipShowInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vip_show_info_);
  }
  _impl_.vip_show_info_ = reinterpret_cast<::User_VipShowInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.vip_show_info)
}
inline ::User_VipShowInfo* User::release_vip_show_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::User_VipShowInfo* released = _impl_.vip_show_info_;
  _impl_.vip_show_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_VipShowInfo* User::unsafe_arena_release_vip_show_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.vip_show_info)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::User_VipShowInfo* temp = _impl_.vip_show_info_;
  _impl_.vip_show_info_ = nullptr;
  return temp;
}
inline ::User_VipShowInfo* User::_internal_mutable_vip_show_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.vip_show_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_VipShowInfo>(GetArenaForAllocation());
    _impl_.vip_show_info_ = reinterpret_cast<::User_VipShowInfo*>(p);
  }
  return _impl_.vip_show_info_;
}
inline ::User_VipShowInfo* User::mutable_vip_show_info() {
  ::User_VipShowInfo* _msg = _internal_mutable_vip_show_info();
  // @@protoc_insertion_point(field_mutable:User.vip_show_info)
  return _msg;
}
inline void User::set_allocated_vip_show_info(::User_VipShowInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_VipShowInfo*>(_impl_.vip_show_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_VipShowInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.vip_show_info_ = reinterpret_cast<::User_VipShowInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.vip_show_info)
}

// repeated .User.TshowInfo new_tshow_icon = 65;
inline int User::_internal_new_tshow_icon_size() const {
  return _internal_new_tshow_icon().size();
}
inline int User::new_tshow_icon_size() const {
  return _internal_new_tshow_icon_size();
}
inline void User::clear_new_tshow_icon() {
  _internal_mutable_new_tshow_icon()->Clear();
}
inline ::User_TshowInfo* User::mutable_new_tshow_icon(int index) {
  // @@protoc_insertion_point(field_mutable:User.new_tshow_icon)
  return _internal_mutable_new_tshow_icon()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >*
User::mutable_new_tshow_icon() {
  // @@protoc_insertion_point(field_mutable_list:User.new_tshow_icon)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_new_tshow_icon();
}
inline const ::User_TshowInfo& User::new_tshow_icon(int index) const {
  // @@protoc_insertion_point(field_get:User.new_tshow_icon)
    return _internal_new_tshow_icon().Get(index);
}
inline ::User_TshowInfo* User::add_new_tshow_icon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::User_TshowInfo* _add = _internal_mutable_new_tshow_icon()->Add();
  // @@protoc_insertion_point(field_add:User.new_tshow_icon)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_TshowInfo >&
User::new_tshow_icon() const {
  // @@protoc_insertion_point(field_list:User.new_tshow_icon)
  return _internal_new_tshow_icon();
}
inline const ::google::protobuf::RepeatedPtrField<::User_TshowInfo>&
User::_internal_new_tshow_icon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_tshow_icon_;
}
inline ::google::protobuf::RepeatedPtrField<::User_TshowInfo>*
User::_internal_mutable_new_tshow_icon() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.new_tshow_icon_;
}

// .User.TbVipInfo tb_vip = 72;
inline bool User::has_tb_vip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tb_vip_ != nullptr);
  return value;
}
inline void User::clear_tb_vip() {
  if (_impl_.tb_vip_ != nullptr) _impl_.tb_vip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::User_TbVipInfo& User::_internal_tb_vip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_TbVipInfo* p = _impl_.tb_vip_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_TbVipInfo&>(::_User_TbVipInfo_default_instance_);
}
inline const ::User_TbVipInfo& User::tb_vip() const {
  // @@protoc_insertion_point(field_get:User.tb_vip)
  return _internal_tb_vip();
}
inline void User::unsafe_arena_set_allocated_tb_vip(::User_TbVipInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tb_vip_);
  }
  _impl_.tb_vip_ = reinterpret_cast<::User_TbVipInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.tb_vip)
}
inline ::User_TbVipInfo* User::release_tb_vip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::User_TbVipInfo* released = _impl_.tb_vip_;
  _impl_.tb_vip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_TbVipInfo* User::unsafe_arena_release_tb_vip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.tb_vip)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::User_TbVipInfo* temp = _impl_.tb_vip_;
  _impl_.tb_vip_ = nullptr;
  return temp;
}
inline ::User_TbVipInfo* User::_internal_mutable_tb_vip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tb_vip_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_TbVipInfo>(GetArenaForAllocation());
    _impl_.tb_vip_ = reinterpret_cast<::User_TbVipInfo*>(p);
  }
  return _impl_.tb_vip_;
}
inline ::User_TbVipInfo* User::mutable_tb_vip() {
  ::User_TbVipInfo* _msg = _internal_mutable_tb_vip();
  // @@protoc_insertion_point(field_mutable:User.tb_vip)
  return _msg;
}
inline void User::set_allocated_tb_vip(::User_TbVipInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_TbVipInfo*>(_impl_.tb_vip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_TbVipInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.tb_vip_ = reinterpret_cast<::User_TbVipInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.tb_vip)
}

// string seal_prefix = 79;
inline void User::clear_seal_prefix() {
  _impl_.seal_prefix_.ClearToEmpty();
}
inline const std::string& User::seal_prefix() const {
  // @@protoc_insertion_point(field_get:User.seal_prefix)
  return _internal_seal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_seal_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seal_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.seal_prefix)
}
inline std::string* User::mutable_seal_prefix() {
  std::string* _s = _internal_mutable_seal_prefix();
  // @@protoc_insertion_point(field_mutable:User.seal_prefix)
  return _s;
}
inline const std::string& User::_internal_seal_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seal_prefix_.Get();
}
inline void User::_internal_set_seal_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seal_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_seal_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.seal_prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_seal_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.seal_prefix)
  return _impl_.seal_prefix_.Release();
}
inline void User::set_allocated_seal_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seal_prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.seal_prefix_.IsDefault()) {
          _impl_.seal_prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.seal_prefix)
}

// int32 nickname_update_time = 86;
inline void User::clear_nickname_update_time() {
  _impl_.nickname_update_time_ = 0;
}
inline ::int32_t User::nickname_update_time() const {
  // @@protoc_insertion_point(field_get:User.nickname_update_time)
  return _internal_nickname_update_time();
}
inline void User::set_nickname_update_time(::int32_t value) {
  _internal_set_nickname_update_time(value);
  // @@protoc_insertion_point(field_set:User.nickname_update_time)
}
inline ::int32_t User::_internal_nickname_update_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nickname_update_time_;
}
inline void User::_internal_set_nickname_update_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nickname_update_time_ = value;
}

// int32 thread_num = 87;
inline void User::clear_thread_num() {
  _impl_.thread_num_ = 0;
}
inline ::int32_t User::thread_num() const {
  // @@protoc_insertion_point(field_get:User.thread_num)
  return _internal_thread_num();
}
inline void User::set_thread_num(::int32_t value) {
  _internal_set_thread_num(value);
  // @@protoc_insertion_point(field_set:User.thread_num)
}
inline ::int32_t User::_internal_thread_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.thread_num_;
}
inline void User::_internal_set_thread_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.thread_num_ = value;
}

// int32 agree_num = 88;
inline void User::clear_agree_num() {
  _impl_.agree_num_ = 0;
}
inline ::int32_t User::agree_num() const {
  // @@protoc_insertion_point(field_get:User.agree_num)
  return _internal_agree_num();
}
inline void User::set_agree_num(::int32_t value) {
  _internal_set_agree_num(value);
  // @@protoc_insertion_point(field_set:User.agree_num)
}
inline ::int32_t User::_internal_agree_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agree_num_;
}
inline void User::_internal_set_agree_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.agree_num_ = value;
}

// int32 left_call_num = 89;
inline void User::clear_left_call_num() {
  _impl_.left_call_num_ = 0;
}
inline ::int32_t User::left_call_num() const {
  // @@protoc_insertion_point(field_get:User.left_call_num)
  return _internal_left_call_num();
}
inline void User::set_left_call_num(::int32_t value) {
  _internal_set_left_call_num(value);
  // @@protoc_insertion_point(field_set:User.left_call_num)
}
inline ::int32_t User::_internal_left_call_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.left_call_num_;
}
inline void User::_internal_set_left_call_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.left_call_num_ = value;
}

// int32 priv_thread = 92;
inline void User::clear_priv_thread() {
  _impl_.priv_thread_ = 0;
}
inline ::int32_t User::priv_thread() const {
  // @@protoc_insertion_point(field_get:User.priv_thread)
  return _internal_priv_thread();
}
inline void User::set_priv_thread(::int32_t value) {
  _internal_set_priv_thread(value);
  // @@protoc_insertion_point(field_set:User.priv_thread)
}
inline ::int32_t User::_internal_priv_thread() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.priv_thread_;
}
inline void User::_internal_set_priv_thread(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.priv_thread_ = value;
}

// int32 can_modify_avatar = 97;
inline void User::clear_can_modify_avatar() {
  _impl_.can_modify_avatar_ = 0;
}
inline ::int32_t User::can_modify_avatar() const {
  // @@protoc_insertion_point(field_get:User.can_modify_avatar)
  return _internal_can_modify_avatar();
}
inline void User::set_can_modify_avatar(::int32_t value) {
  _internal_set_can_modify_avatar(value);
  // @@protoc_insertion_point(field_set:User.can_modify_avatar)
}
inline ::int32_t User::_internal_can_modify_avatar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.can_modify_avatar_;
}
inline void User::_internal_set_can_modify_avatar(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.can_modify_avatar_ = value;
}

// string modify_avatar_desc = 98;
inline void User::clear_modify_avatar_desc() {
  _impl_.modify_avatar_desc_.ClearToEmpty();
}
inline const std::string& User::modify_avatar_desc() const {
  // @@protoc_insertion_point(field_get:User.modify_avatar_desc)
  return _internal_modify_avatar_desc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_modify_avatar_desc(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.modify_avatar_desc_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.modify_avatar_desc)
}
inline std::string* User::mutable_modify_avatar_desc() {
  std::string* _s = _internal_mutable_modify_avatar_desc();
  // @@protoc_insertion_point(field_mutable:User.modify_avatar_desc)
  return _s;
}
inline const std::string& User::_internal_modify_avatar_desc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.modify_avatar_desc_.Get();
}
inline void User::_internal_set_modify_avatar_desc(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.modify_avatar_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_modify_avatar_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.modify_avatar_desc_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_modify_avatar_desc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.modify_avatar_desc)
  return _impl_.modify_avatar_desc_.Release();
}
inline void User::set_allocated_modify_avatar_desc(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.modify_avatar_desc_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.modify_avatar_desc_.IsDefault()) {
          _impl_.modify_avatar_desc_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.modify_avatar_desc)
}

// int32 influence = 99;
inline void User::clear_influence() {
  _impl_.influence_ = 0;
}
inline ::int32_t User::influence() const {
  // @@protoc_insertion_point(field_get:User.influence)
  return _internal_influence();
}
inline void User::set_influence(::int32_t value) {
  _internal_set_influence(value);
  // @@protoc_insertion_point(field_set:User.influence)
}
inline ::int32_t User::_internal_influence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.influence_;
}
inline void User::_internal_set_influence(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.influence_ = value;
}

// string level_influence = 100;
inline void User::clear_level_influence() {
  _impl_.level_influence_.ClearToEmpty();
}
inline const std::string& User::level_influence() const {
  // @@protoc_insertion_point(field_get:User.level_influence)
  return _internal_level_influence();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_level_influence(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_influence_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.level_influence)
}
inline std::string* User::mutable_level_influence() {
  std::string* _s = _internal_mutable_level_influence();
  // @@protoc_insertion_point(field_mutable:User.level_influence)
  return _s;
}
inline const std::string& User::_internal_level_influence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_influence_.Get();
}
inline void User::_internal_set_level_influence(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_influence_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_level_influence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.level_influence_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_level_influence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.level_influence)
  return _impl_.level_influence_.Release();
}
inline void User::set_allocated_level_influence(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_influence_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.level_influence_.IsDefault()) {
          _impl_.level_influence_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.level_influence)
}

// .User.NewGodInfo new_god_data = 101;
inline bool User::has_new_god_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_god_data_ != nullptr);
  return value;
}
inline void User::clear_new_god_data() {
  if (_impl_.new_god_data_ != nullptr) _impl_.new_god_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::User_NewGodInfo& User::_internal_new_god_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_NewGodInfo* p = _impl_.new_god_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_NewGodInfo&>(::_User_NewGodInfo_default_instance_);
}
inline const ::User_NewGodInfo& User::new_god_data() const {
  // @@protoc_insertion_point(field_get:User.new_god_data)
  return _internal_new_god_data();
}
inline void User::unsafe_arena_set_allocated_new_god_data(::User_NewGodInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_god_data_);
  }
  _impl_.new_god_data_ = reinterpret_cast<::User_NewGodInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.new_god_data)
}
inline ::User_NewGodInfo* User::release_new_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::User_NewGodInfo* released = _impl_.new_god_data_;
  _impl_.new_god_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_NewGodInfo* User::unsafe_arena_release_new_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.new_god_data)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::User_NewGodInfo* temp = _impl_.new_god_data_;
  _impl_.new_god_data_ = nullptr;
  return temp;
}
inline ::User_NewGodInfo* User::_internal_mutable_new_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.new_god_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_NewGodInfo>(GetArenaForAllocation());
    _impl_.new_god_data_ = reinterpret_cast<::User_NewGodInfo*>(p);
  }
  return _impl_.new_god_data_;
}
inline ::User_NewGodInfo* User::mutable_new_god_data() {
  ::User_NewGodInfo* _msg = _internal_mutable_new_god_data();
  // @@protoc_insertion_point(field_mutable:User.new_god_data)
  return _msg;
}
inline void User::set_allocated_new_god_data(::User_NewGodInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_NewGodInfo*>(_impl_.new_god_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_NewGodInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.new_god_data_ = reinterpret_cast<::User_NewGodInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.new_god_data)
}

// int32 is_default_avatar = 106;
inline void User::clear_is_default_avatar() {
  _impl_.is_default_avatar_ = 0;
}
inline ::int32_t User::is_default_avatar() const {
  // @@protoc_insertion_point(field_get:User.is_default_avatar)
  return _internal_is_default_avatar();
}
inline void User::set_is_default_avatar(::int32_t value) {
  _internal_set_is_default_avatar(value);
  // @@protoc_insertion_point(field_set:User.is_default_avatar)
}
inline ::int32_t User::_internal_is_default_avatar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_default_avatar_;
}
inline void User::_internal_set_is_default_avatar(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_default_avatar_ = value;
}

// string uk = 107;
inline void User::clear_uk() {
  _impl_.uk_.ClearToEmpty();
}
inline const std::string& User::uk() const {
  // @@protoc_insertion_point(field_get:User.uk)
  return _internal_uk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_uk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uk_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.uk)
}
inline std::string* User::mutable_uk() {
  std::string* _s = _internal_mutable_uk();
  // @@protoc_insertion_point(field_mutable:User.uk)
  return _s;
}
inline const std::string& User::_internal_uk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uk_.Get();
}
inline void User::_internal_set_uk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uk_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_uk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uk_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_uk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.uk)
  return _impl_.uk_.Release();
}
inline void User::set_allocated_uk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uk_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uk_.IsDefault()) {
          _impl_.uk_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.uk)
}

// int32 favorite_num = 109;
inline void User::clear_favorite_num() {
  _impl_.favorite_num_ = 0;
}
inline ::int32_t User::favorite_num() const {
  // @@protoc_insertion_point(field_get:User.favorite_num)
  return _internal_favorite_num();
}
inline void User::set_favorite_num(::int32_t value) {
  _internal_set_favorite_num(value);
  // @@protoc_insertion_point(field_set:User.favorite_num)
}
inline ::int32_t User::_internal_favorite_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.favorite_num_;
}
inline void User::_internal_set_favorite_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.favorite_num_ = value;
}

// uint32 total_agree_num = 118;
inline void User::clear_total_agree_num() {
  _impl_.total_agree_num_ = 0u;
}
inline ::uint32_t User::total_agree_num() const {
  // @@protoc_insertion_point(field_get:User.total_agree_num)
  return _internal_total_agree_num();
}
inline void User::set_total_agree_num(::uint32_t value) {
  _internal_set_total_agree_num(value);
  // @@protoc_insertion_point(field_set:User.total_agree_num)
}
inline ::uint32_t User::_internal_total_agree_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_agree_num_;
}
inline void User::_internal_set_total_agree_num(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_agree_num_ = value;
}

// string tieba_uid = 120;
inline void User::clear_tieba_uid() {
  _impl_.tieba_uid_.ClearToEmpty();
}
inline const std::string& User::tieba_uid() const {
  // @@protoc_insertion_point(field_get:User.tieba_uid)
  return _internal_tieba_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_tieba_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tieba_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.tieba_uid)
}
inline std::string* User::mutable_tieba_uid() {
  std::string* _s = _internal_mutable_tieba_uid();
  // @@protoc_insertion_point(field_mutable:User.tieba_uid)
  return _s;
}
inline const std::string& User::_internal_tieba_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tieba_uid_.Get();
}
inline void User::_internal_set_tieba_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tieba_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_tieba_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tieba_uid_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_tieba_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.tieba_uid)
  return _impl_.tieba_uid_.Release();
}
inline void User::set_allocated_tieba_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tieba_uid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tieba_uid_.IsDefault()) {
          _impl_.tieba_uid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.tieba_uid)
}

// int32 display_auth_type = 123;
inline void User::clear_display_auth_type() {
  _impl_.display_auth_type_ = 0;
}
inline ::int32_t User::display_auth_type() const {
  // @@protoc_insertion_point(field_get:User.display_auth_type)
  return _internal_display_auth_type();
}
inline void User::set_display_auth_type(::int32_t value) {
  _internal_set_display_auth_type(value);
  // @@protoc_insertion_point(field_set:User.display_auth_type)
}
inline ::int32_t User::_internal_display_auth_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_auth_type_;
}
inline void User::_internal_set_display_auth_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_auth_type_ = value;
}

// string level_name = 125;
inline void User::clear_level_name() {
  _impl_.level_name_.ClearToEmpty();
}
inline const std::string& User::level_name() const {
  // @@protoc_insertion_point(field_get:User.level_name)
  return _internal_level_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_level_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.level_name)
}
inline std::string* User::mutable_level_name() {
  std::string* _s = _internal_mutable_level_name();
  // @@protoc_insertion_point(field_mutable:User.level_name)
  return _s;
}
inline const std::string& User::_internal_level_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_name_.Get();
}
inline void User::_internal_set_level_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_level_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.level_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_level_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.level_name)
  return _impl_.level_name_.Release();
}
inline void User::set_allocated_level_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.level_name_.IsDefault()) {
          _impl_.level_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.level_name)
}

// string ip_address = 127;
inline void User::clear_ip_address() {
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& User::ip_address() const {
  // @@protoc_insertion_point(field_get:User.ip_address)
  return _internal_ip_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_ip_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.ip_address)
}
inline std::string* User::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:User.ip_address)
  return _s;
}
inline const std::string& User::_internal_ip_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_address_.Get();
}
inline void User::_internal_set_ip_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_address_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_address_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_ip_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.ip_address)
  return _impl_.ip_address_.Release();
}
inline void User::set_allocated_ip_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_address_.IsDefault()) {
          _impl_.ip_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.ip_address)
}

// int32 is_nickname_editing = 128;
inline void User::clear_is_nickname_editing() {
  _impl_.is_nickname_editing_ = 0;
}
inline ::int32_t User::is_nickname_editing() const {
  // @@protoc_insertion_point(field_get:User.is_nickname_editing)
  return _internal_is_nickname_editing();
}
inline void User::set_is_nickname_editing(::int32_t value) {
  _internal_set_is_nickname_editing(value);
  // @@protoc_insertion_point(field_set:User.is_nickname_editing)
}
inline ::int32_t User::_internal_is_nickname_editing() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_nickname_editing_;
}
inline void User::_internal_set_is_nickname_editing(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_nickname_editing_ = value;
}

// string editing_nickname = 129;
inline void User::clear_editing_nickname() {
  _impl_.editing_nickname_.ClearToEmpty();
}
inline const std::string& User::editing_nickname() const {
  // @@protoc_insertion_point(field_get:User.editing_nickname)
  return _internal_editing_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_editing_nickname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.editing_nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.editing_nickname)
}
inline std::string* User::mutable_editing_nickname() {
  std::string* _s = _internal_mutable_editing_nickname();
  // @@protoc_insertion_point(field_mutable:User.editing_nickname)
  return _s;
}
inline const std::string& User::_internal_editing_nickname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.editing_nickname_.Get();
}
inline void User::_internal_set_editing_nickname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.editing_nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_editing_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.editing_nickname_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_editing_nickname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.editing_nickname)
  return _impl_.editing_nickname_.Release();
}
inline void User::set_allocated_editing_nickname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.editing_nickname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.editing_nickname_.IsDefault()) {
          _impl_.editing_nickname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.editing_nickname)
}

// .User.VirtualImageInfo virtual_image_info = 136;
inline bool User::has_virtual_image_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.virtual_image_info_ != nullptr);
  return value;
}
inline void User::clear_virtual_image_info() {
  if (_impl_.virtual_image_info_ != nullptr) _impl_.virtual_image_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::User_VirtualImageInfo& User::_internal_virtual_image_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_VirtualImageInfo* p = _impl_.virtual_image_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_VirtualImageInfo&>(::_User_VirtualImageInfo_default_instance_);
}
inline const ::User_VirtualImageInfo& User::virtual_image_info() const {
  // @@protoc_insertion_point(field_get:User.virtual_image_info)
  return _internal_virtual_image_info();
}
inline void User::unsafe_arena_set_allocated_virtual_image_info(::User_VirtualImageInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.virtual_image_info_);
  }
  _impl_.virtual_image_info_ = reinterpret_cast<::User_VirtualImageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.virtual_image_info)
}
inline ::User_VirtualImageInfo* User::release_virtual_image_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::User_VirtualImageInfo* released = _impl_.virtual_image_info_;
  _impl_.virtual_image_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_VirtualImageInfo* User::unsafe_arena_release_virtual_image_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.virtual_image_info)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::User_VirtualImageInfo* temp = _impl_.virtual_image_info_;
  _impl_.virtual_image_info_ = nullptr;
  return temp;
}
inline ::User_VirtualImageInfo* User::_internal_mutable_virtual_image_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.virtual_image_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_VirtualImageInfo>(GetArenaForAllocation());
    _impl_.virtual_image_info_ = reinterpret_cast<::User_VirtualImageInfo*>(p);
  }
  return _impl_.virtual_image_info_;
}
inline ::User_VirtualImageInfo* User::mutable_virtual_image_info() {
  ::User_VirtualImageInfo* _msg = _internal_mutable_virtual_image_info();
  // @@protoc_insertion_point(field_mutable:User.virtual_image_info)
  return _msg;
}
inline void User::set_allocated_virtual_image_info(::User_VirtualImageInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_VirtualImageInfo*>(_impl_.virtual_image_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_VirtualImageInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.virtual_image_info_ = reinterpret_cast<::User_VirtualImageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.virtual_image_info)
}

// .User.UserGrowth user_growth = 137;
inline bool User::has_user_growth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_growth_ != nullptr);
  return value;
}
inline void User::clear_user_growth() {
  if (_impl_.user_growth_ != nullptr) _impl_.user_growth_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::User_UserGrowth& User::_internal_user_growth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_UserGrowth* p = _impl_.user_growth_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_UserGrowth&>(::_User_UserGrowth_default_instance_);
}
inline const ::User_UserGrowth& User::user_growth() const {
  // @@protoc_insertion_point(field_get:User.user_growth)
  return _internal_user_growth();
}
inline void User::unsafe_arena_set_allocated_user_growth(::User_UserGrowth* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_growth_);
  }
  _impl_.user_growth_ = reinterpret_cast<::User_UserGrowth*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.user_growth)
}
inline ::User_UserGrowth* User::release_user_growth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::User_UserGrowth* released = _impl_.user_growth_;
  _impl_.user_growth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_UserGrowth* User::unsafe_arena_release_user_growth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.user_growth)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::User_UserGrowth* temp = _impl_.user_growth_;
  _impl_.user_growth_ = nullptr;
  return temp;
}
inline ::User_UserGrowth* User::_internal_mutable_user_growth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.user_growth_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_UserGrowth>(GetArenaForAllocation());
    _impl_.user_growth_ = reinterpret_cast<::User_UserGrowth*>(p);
  }
  return _impl_.user_growth_;
}
inline ::User_UserGrowth* User::mutable_user_growth() {
  ::User_UserGrowth* _msg = _internal_mutable_user_growth();
  // @@protoc_insertion_point(field_mutable:User.user_growth)
  return _msg;
}
inline void User::set_allocated_user_growth(::User_UserGrowth* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_UserGrowth*>(_impl_.user_growth_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_UserGrowth*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.user_growth_ = reinterpret_cast<::User_UserGrowth*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.user_growth)
}

// string display_intro = 138;
inline void User::clear_display_intro() {
  _impl_.display_intro_.ClearToEmpty();
}
inline const std::string& User::display_intro() const {
  // @@protoc_insertion_point(field_get:User.display_intro)
  return _internal_display_intro();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_display_intro(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_intro_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.display_intro)
}
inline std::string* User::mutable_display_intro() {
  std::string* _s = _internal_mutable_display_intro();
  // @@protoc_insertion_point(field_mutable:User.display_intro)
  return _s;
}
inline const std::string& User::_internal_display_intro() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_intro_.Get();
}
inline void User::_internal_set_display_intro(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_intro_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_display_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.display_intro_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_display_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.display_intro)
  return _impl_.display_intro_.Release();
}
inline void User::set_allocated_display_intro(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_intro_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_intro_.IsDefault()) {
          _impl_.display_intro_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.display_intro)
}

// string avatar_url = 152;
inline void User::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& User::avatar_url() const {
  // @@protoc_insertion_point(field_get:User.avatar_url)
  return _internal_avatar_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_avatar_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.avatar_url)
}
inline std::string* User::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:User.avatar_url)
  return _s;
}
inline const std::string& User::_internal_avatar_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avatar_url_.Get();
}
inline void User::_internal_set_avatar_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_avatar_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.avatar_url_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_avatar_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void User::set_allocated_avatar_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.avatar_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avatar_url_.IsDefault()) {
          _impl_.avatar_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.avatar_url)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_User_2eproto_2epb_2eh
