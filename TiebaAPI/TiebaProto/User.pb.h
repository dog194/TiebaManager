// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_User_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_User_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_User_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_User_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_User_2eproto;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_LikeForumInfo;
struct User_LikeForumInfoDefaultTypeInternal;
extern User_LikeForumInfoDefaultTypeInternal _User_LikeForumInfo_default_instance_;
class User_NewGodInfo;
struct User_NewGodInfoDefaultTypeInternal;
extern User_NewGodInfoDefaultTypeInternal _User_NewGodInfo_default_instance_;
class User_PrivSets;
struct User_PrivSetsDefaultTypeInternal;
extern User_PrivSetsDefaultTypeInternal _User_PrivSets_default_instance_;
class User_UserVipInfo;
struct User_UserVipInfoDefaultTypeInternal;
extern User_UserVipInfoDefaultTypeInternal _User_UserVipInfo_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class User_PrivSets final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.PrivSets) */ {
 public:
  inline User_PrivSets() : User_PrivSets(nullptr) {}
  ~User_PrivSets() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_PrivSets(::google::protobuf::internal::ConstantInitialized);

  User_PrivSets(const User_PrivSets& from);
  User_PrivSets(User_PrivSets&& from) noexcept
    : User_PrivSets() {
    *this = ::std::move(from);
  }

  inline User_PrivSets& operator=(const User_PrivSets& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_PrivSets& operator=(User_PrivSets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_PrivSets& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_PrivSets* internal_default_instance() {
    return reinterpret_cast<const User_PrivSets*>(
               &_User_PrivSets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User_PrivSets& a, User_PrivSets& b) {
    a.Swap(&b);
  }
  inline void Swap(User_PrivSets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_PrivSets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_PrivSets* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_PrivSets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_PrivSets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_PrivSets& from) {
    User_PrivSets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_PrivSets* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.PrivSets";
  }
  protected:
  explicit User_PrivSets(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kLikeFieldNumber = 2,
    kGroupFieldNumber = 3,
    kPostFieldNumber = 4,
    kFriendFieldNumber = 5,
    kLiveFieldNumber = 6,
    kReplyFieldNumber = 7,
    kBazhuShowInsideFieldNumber = 8,
    kBazhuShowOutsideFieldNumber = 9,
  };
  // int32 location = 1;
  void clear_location() ;
  ::int32_t location() const;
  void set_location(::int32_t value);

  private:
  ::int32_t _internal_location() const;
  void _internal_set_location(::int32_t value);

  public:
  // int32 like = 2;
  void clear_like() ;
  ::int32_t like() const;
  void set_like(::int32_t value);

  private:
  ::int32_t _internal_like() const;
  void _internal_set_like(::int32_t value);

  public:
  // int32 group = 3;
  void clear_group() ;
  ::int32_t group() const;
  void set_group(::int32_t value);

  private:
  ::int32_t _internal_group() const;
  void _internal_set_group(::int32_t value);

  public:
  // int32 post = 4;
  void clear_post() ;
  ::int32_t post() const;
  void set_post(::int32_t value);

  private:
  ::int32_t _internal_post() const;
  void _internal_set_post(::int32_t value);

  public:
  // int32 friend = 5;
  void clear_friend_() ;
  ::int32_t friend_() const;
  void set_friend_(::int32_t value);

  private:
  ::int32_t _internal_friend_() const;
  void _internal_set_friend_(::int32_t value);

  public:
  // int32 live = 6;
  void clear_live() ;
  ::int32_t live() const;
  void set_live(::int32_t value);

  private:
  ::int32_t _internal_live() const;
  void _internal_set_live(::int32_t value);

  public:
  // int32 reply = 7;
  void clear_reply() ;
  ::int32_t reply() const;
  void set_reply(::int32_t value);

  private:
  ::int32_t _internal_reply() const;
  void _internal_set_reply(::int32_t value);

  public:
  // int32 bazhu_show_inside = 8;
  void clear_bazhu_show_inside() ;
  ::int32_t bazhu_show_inside() const;
  void set_bazhu_show_inside(::int32_t value);

  private:
  ::int32_t _internal_bazhu_show_inside() const;
  void _internal_set_bazhu_show_inside(::int32_t value);

  public:
  // int32 bazhu_show_outside = 9;
  void clear_bazhu_show_outside() ;
  ::int32_t bazhu_show_outside() const;
  void set_bazhu_show_outside(::int32_t value);

  private:
  ::int32_t _internal_bazhu_show_outside() const;
  void _internal_set_bazhu_show_outside(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.PrivSets)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t location_;
    ::int32_t like_;
    ::int32_t group_;
    ::int32_t post_;
    ::int32_t friend__;
    ::int32_t live_;
    ::int32_t reply_;
    ::int32_t bazhu_show_inside_;
    ::int32_t bazhu_show_outside_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_LikeForumInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.LikeForumInfo) */ {
 public:
  inline User_LikeForumInfo() : User_LikeForumInfo(nullptr) {}
  ~User_LikeForumInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_LikeForumInfo(::google::protobuf::internal::ConstantInitialized);

  User_LikeForumInfo(const User_LikeForumInfo& from);
  User_LikeForumInfo(User_LikeForumInfo&& from) noexcept
    : User_LikeForumInfo() {
    *this = ::std::move(from);
  }

  inline User_LikeForumInfo& operator=(const User_LikeForumInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_LikeForumInfo& operator=(User_LikeForumInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_LikeForumInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_LikeForumInfo* internal_default_instance() {
    return reinterpret_cast<const User_LikeForumInfo*>(
               &_User_LikeForumInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User_LikeForumInfo& a, User_LikeForumInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_LikeForumInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_LikeForumInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_LikeForumInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_LikeForumInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_LikeForumInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_LikeForumInfo& from) {
    User_LikeForumInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_LikeForumInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.LikeForumInfo";
  }
  protected:
  explicit User_LikeForumInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForumNameFieldNumber = 1,
    kForumIdFieldNumber = 2,
  };
  // string forum_name = 1;
  void clear_forum_name() ;
  const std::string& forum_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_forum_name(Arg_&& arg, Args_... args);
  std::string* mutable_forum_name();
  PROTOBUF_NODISCARD std::string* release_forum_name();
  void set_allocated_forum_name(std::string* ptr);

  private:
  const std::string& _internal_forum_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_forum_name(
      const std::string& value);
  std::string* _internal_mutable_forum_name();

  public:
  // uint64 forum_id = 2;
  void clear_forum_id() ;
  ::uint64_t forum_id() const;
  void set_forum_id(::uint64_t value);

  private:
  ::uint64_t _internal_forum_id() const;
  void _internal_set_forum_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.LikeForumInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 37, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr forum_name_;
    ::uint64_t forum_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_UserVipInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.UserVipInfo) */ {
 public:
  inline User_UserVipInfo() : User_UserVipInfo(nullptr) {}
  ~User_UserVipInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_UserVipInfo(::google::protobuf::internal::ConstantInitialized);

  User_UserVipInfo(const User_UserVipInfo& from);
  User_UserVipInfo(User_UserVipInfo&& from) noexcept
    : User_UserVipInfo() {
    *this = ::std::move(from);
  }

  inline User_UserVipInfo& operator=(const User_UserVipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_UserVipInfo& operator=(User_UserVipInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_UserVipInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_UserVipInfo* internal_default_instance() {
    return reinterpret_cast<const User_UserVipInfo*>(
               &_User_UserVipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User_UserVipInfo& a, User_UserVipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_UserVipInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_UserVipInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_UserVipInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_UserVipInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_UserVipInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_UserVipInfo& from) {
    User_UserVipInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_UserVipInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.UserVipInfo";
  }
  protected:
  explicit User_UserVipInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconUrlFieldNumber = 8,
    kVStatusFieldNumber = 1,
    kSTimeFieldNumber = 2,
    kETimeFieldNumber = 3,
    kExtScoreFieldNumber = 4,
    kVLevelFieldNumber = 5,
    kAScoreFieldNumber = 6,
    kNScoreFieldNumber = 7,
  };
  // string icon_url = 8;
  void clear_icon_url() ;
  const std::string& icon_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon_url(Arg_&& arg, Args_... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* ptr);

  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(
      const std::string& value);
  std::string* _internal_mutable_icon_url();

  public:
  // uint32 v_status = 1;
  void clear_v_status() ;
  ::uint32_t v_status() const;
  void set_v_status(::uint32_t value);

  private:
  ::uint32_t _internal_v_status() const;
  void _internal_set_v_status(::uint32_t value);

  public:
  // uint32 s_time = 2;
  void clear_s_time() ;
  ::uint32_t s_time() const;
  void set_s_time(::uint32_t value);

  private:
  ::uint32_t _internal_s_time() const;
  void _internal_set_s_time(::uint32_t value);

  public:
  // uint32 e_time = 3;
  void clear_e_time() ;
  ::uint32_t e_time() const;
  void set_e_time(::uint32_t value);

  private:
  ::uint32_t _internal_e_time() const;
  void _internal_set_e_time(::uint32_t value);

  public:
  // uint32 ext_score = 4;
  void clear_ext_score() ;
  ::uint32_t ext_score() const;
  void set_ext_score(::uint32_t value);

  private:
  ::uint32_t _internal_ext_score() const;
  void _internal_set_ext_score(::uint32_t value);

  public:
  // uint32 v_level = 5;
  void clear_v_level() ;
  ::uint32_t v_level() const;
  void set_v_level(::uint32_t value);

  private:
  ::uint32_t _internal_v_level() const;
  void _internal_set_v_level(::uint32_t value);

  public:
  // int32 a_score = 6;
  void clear_a_score() ;
  ::int32_t a_score() const;
  void set_a_score(::int32_t value);

  private:
  ::int32_t _internal_a_score() const;
  void _internal_set_a_score(::int32_t value);

  public:
  // uint32 n_score = 7;
  void clear_n_score() ;
  ::uint32_t n_score() const;
  void set_n_score(::uint32_t value);

  private:
  ::uint32_t _internal_n_score() const;
  void _internal_set_n_score(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.UserVipInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr icon_url_;
    ::uint32_t v_status_;
    ::uint32_t s_time_;
    ::uint32_t e_time_;
    ::uint32_t ext_score_;
    ::uint32_t v_level_;
    ::int32_t a_score_;
    ::uint32_t n_score_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User_NewGodInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.NewGodInfo) */ {
 public:
  inline User_NewGodInfo() : User_NewGodInfo(nullptr) {}
  ~User_NewGodInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User_NewGodInfo(::google::protobuf::internal::ConstantInitialized);

  User_NewGodInfo(const User_NewGodInfo& from);
  User_NewGodInfo(User_NewGodInfo&& from) noexcept
    : User_NewGodInfo() {
    *this = ::std::move(from);
  }

  inline User_NewGodInfo& operator=(const User_NewGodInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_NewGodInfo& operator=(User_NewGodInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_NewGodInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_NewGodInfo* internal_default_instance() {
    return reinterpret_cast<const User_NewGodInfo*>(
               &_User_NewGodInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User_NewGodInfo& a, User_NewGodInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(User_NewGodInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_NewGodInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_NewGodInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_NewGodInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User_NewGodInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User_NewGodInfo& from) {
    User_NewGodInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_NewGodInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User.NewGodInfo";
  }
  protected:
  explicit User_NewGodInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 3,
    kTypeNameFieldNumber = 5,
    kStatusFieldNumber = 1,
    kFieldIdFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // string field_name = 3;
  void clear_field_name() ;
  const std::string& field_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_name(Arg_&& arg, Args_... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* ptr);

  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(
      const std::string& value);
  std::string* _internal_mutable_field_name();

  public:
  // string type_name = 5;
  void clear_type_name() ;
  const std::string& type_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* ptr);

  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(
      const std::string& value);
  std::string* _internal_mutable_type_name();

  public:
  // int32 status = 1;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // uint32 field_id = 2;
  void clear_field_id() ;
  ::uint32_t field_id() const;
  void set_field_id(::uint32_t value);

  private:
  ::uint32_t _internal_field_id() const;
  void _internal_set_field_id(::uint32_t value);

  public:
  // uint32 type = 4;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User.NewGodInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr field_name_;
    ::google::protobuf::internal::ArenaStringPtr type_name_;
    ::int32_t status_;
    ::uint32_t field_id_;
    ::uint32_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};// -------------------------------------------------------------------

class User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User(::google::protobuf::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef User_PrivSets PrivSets;
  typedef User_LikeForumInfo LikeForumInfo;
  typedef User_UserVipInfo UserVipInfo;
  typedef User_NewGodInfo NewGodInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kLikeForumFieldNumber = 47,
    kNameFieldNumber = 3,
    kNameShowFieldNumber = 4,
    kPortraitFieldNumber = 5,
    kBawuTypeFieldNumber = 26,
    kBDUSSFieldNumber = 29,
    kTbAgeFieldNumber = 38,
    kTiebaUidFieldNumber = 120,
    kPrivSetsFieldNumber = 45,
    kVipInfoFieldNumber = 61,
    kNewGodDataFieldNumber = 101,
    kIdFieldNumber = 2,
    kIsCoreuserFieldNumber = 20,
    kLevelIdFieldNumber = 23,
    kIsBawuFieldNumber = 25,
    kPostNumFieldNumber = 37,
    kGenderFieldNumber = 42,
    kIsFriendFieldNumber = 46,
    kIsGuanfangFieldNumber = 52,
    kIsFansFieldNumber = 91,
    kIsDefaultAvatarFieldNumber = 106,
  };
  // repeated .User.LikeForumInfo likeForum = 47;
  int likeforum_size() const;
  private:
  int _internal_likeforum_size() const;

  public:
  void clear_likeforum() ;
  ::User_LikeForumInfo* mutable_likeforum(int index);
  ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >*
      mutable_likeforum();
  private:
  const ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>& _internal_likeforum() const;
  ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>* _internal_mutable_likeforum();
  public:
  const ::User_LikeForumInfo& likeforum(int index) const;
  ::User_LikeForumInfo* add_likeforum();
  const ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >&
      likeforum() const;
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string name_show = 4;
  void clear_name_show() ;
  const std::string& name_show() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_show(Arg_&& arg, Args_... args);
  std::string* mutable_name_show();
  PROTOBUF_NODISCARD std::string* release_name_show();
  void set_allocated_name_show(std::string* ptr);

  private:
  const std::string& _internal_name_show() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_show(
      const std::string& value);
  std::string* _internal_mutable_name_show();

  public:
  // string portrait = 5;
  void clear_portrait() ;
  const std::string& portrait() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_portrait(Arg_&& arg, Args_... args);
  std::string* mutable_portrait();
  PROTOBUF_NODISCARD std::string* release_portrait();
  void set_allocated_portrait(std::string* ptr);

  private:
  const std::string& _internal_portrait() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_portrait(
      const std::string& value);
  std::string* _internal_mutable_portrait();

  public:
  // string bawu_type = 26;
  void clear_bawu_type() ;
  const std::string& bawu_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bawu_type(Arg_&& arg, Args_... args);
  std::string* mutable_bawu_type();
  PROTOBUF_NODISCARD std::string* release_bawu_type();
  void set_allocated_bawu_type(std::string* ptr);

  private:
  const std::string& _internal_bawu_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bawu_type(
      const std::string& value);
  std::string* _internal_mutable_bawu_type();

  public:
  // string BDUSS = 29;
  void clear_bduss() ;
  const std::string& bduss() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bduss(Arg_&& arg, Args_... args);
  std::string* mutable_bduss();
  PROTOBUF_NODISCARD std::string* release_bduss();
  void set_allocated_bduss(std::string* ptr);

  private:
  const std::string& _internal_bduss() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bduss(
      const std::string& value);
  std::string* _internal_mutable_bduss();

  public:
  // string tb_age = 38;
  void clear_tb_age() ;
  const std::string& tb_age() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tb_age(Arg_&& arg, Args_... args);
  std::string* mutable_tb_age();
  PROTOBUF_NODISCARD std::string* release_tb_age();
  void set_allocated_tb_age(std::string* ptr);

  private:
  const std::string& _internal_tb_age() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tb_age(
      const std::string& value);
  std::string* _internal_mutable_tb_age();

  public:
  // string tieba_uid = 120;
  void clear_tieba_uid() ;
  const std::string& tieba_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tieba_uid(Arg_&& arg, Args_... args);
  std::string* mutable_tieba_uid();
  PROTOBUF_NODISCARD std::string* release_tieba_uid();
  void set_allocated_tieba_uid(std::string* ptr);

  private:
  const std::string& _internal_tieba_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tieba_uid(
      const std::string& value);
  std::string* _internal_mutable_tieba_uid();

  public:
  // .User.PrivSets priv_sets = 45;
  bool has_priv_sets() const;
  void clear_priv_sets() ;
  const ::User_PrivSets& priv_sets() const;
  PROTOBUF_NODISCARD ::User_PrivSets* release_priv_sets();
  ::User_PrivSets* mutable_priv_sets();
  void set_allocated_priv_sets(::User_PrivSets* value);
  void unsafe_arena_set_allocated_priv_sets(::User_PrivSets* value);
  ::User_PrivSets* unsafe_arena_release_priv_sets();

  private:
  const ::User_PrivSets& _internal_priv_sets() const;
  ::User_PrivSets* _internal_mutable_priv_sets();

  public:
  // .User.UserVipInfo vipInfo = 61;
  bool has_vipinfo() const;
  void clear_vipinfo() ;
  const ::User_UserVipInfo& vipinfo() const;
  PROTOBUF_NODISCARD ::User_UserVipInfo* release_vipinfo();
  ::User_UserVipInfo* mutable_vipinfo();
  void set_allocated_vipinfo(::User_UserVipInfo* value);
  void unsafe_arena_set_allocated_vipinfo(::User_UserVipInfo* value);
  ::User_UserVipInfo* unsafe_arena_release_vipinfo();

  private:
  const ::User_UserVipInfo& _internal_vipinfo() const;
  ::User_UserVipInfo* _internal_mutable_vipinfo();

  public:
  // .User.NewGodInfo new_god_data = 101;
  bool has_new_god_data() const;
  void clear_new_god_data() ;
  const ::User_NewGodInfo& new_god_data() const;
  PROTOBUF_NODISCARD ::User_NewGodInfo* release_new_god_data();
  ::User_NewGodInfo* mutable_new_god_data();
  void set_allocated_new_god_data(::User_NewGodInfo* value);
  void unsafe_arena_set_allocated_new_god_data(::User_NewGodInfo* value);
  ::User_NewGodInfo* unsafe_arena_release_new_god_data();

  private:
  const ::User_NewGodInfo& _internal_new_god_data() const;
  ::User_NewGodInfo* _internal_mutable_new_god_data();

  public:
  // int64 id = 2;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int32 is_coreuser = 20;
  void clear_is_coreuser() ;
  ::int32_t is_coreuser() const;
  void set_is_coreuser(::int32_t value);

  private:
  ::int32_t _internal_is_coreuser() const;
  void _internal_set_is_coreuser(::int32_t value);

  public:
  // int32 level_id = 23;
  void clear_level_id() ;
  ::int32_t level_id() const;
  void set_level_id(::int32_t value);

  private:
  ::int32_t _internal_level_id() const;
  void _internal_set_level_id(::int32_t value);

  public:
  // int32 is_bawu = 25;
  void clear_is_bawu() ;
  ::int32_t is_bawu() const;
  void set_is_bawu(::int32_t value);

  private:
  ::int32_t _internal_is_bawu() const;
  void _internal_set_is_bawu(::int32_t value);

  public:
  // int32 post_num = 37;
  void clear_post_num() ;
  ::int32_t post_num() const;
  void set_post_num(::int32_t value);

  private:
  ::int32_t _internal_post_num() const;
  void _internal_set_post_num(::int32_t value);

  public:
  // int32 gender = 42;
  void clear_gender() ;
  ::int32_t gender() const;
  void set_gender(::int32_t value);

  private:
  ::int32_t _internal_gender() const;
  void _internal_set_gender(::int32_t value);

  public:
  // int32 is_friend = 46;
  void clear_is_friend() ;
  ::int32_t is_friend() const;
  void set_is_friend(::int32_t value);

  private:
  ::int32_t _internal_is_friend() const;
  void _internal_set_is_friend(::int32_t value);

  public:
  // int32 is_guanfang = 52;
  void clear_is_guanfang() ;
  ::int32_t is_guanfang() const;
  void set_is_guanfang(::int32_t value);

  private:
  ::int32_t _internal_is_guanfang() const;
  void _internal_set_is_guanfang(::int32_t value);

  public:
  // int32 is_fans = 91;
  void clear_is_fans() ;
  ::int32_t is_fans() const;
  void set_is_fans(::int32_t value);

  private:
  ::int32_t _internal_is_fans() const;
  void _internal_set_is_fans(::int32_t value);

  public:
  // int32 is_default_avatar = 106;
  void clear_is_default_avatar() ;
  ::int32_t is_default_avatar() const;
  void set_is_default_avatar(::int32_t value);

  private:
  ::int32_t _internal_is_default_avatar() const;
  void _internal_set_is_default_avatar(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 21, 4, 79, 17> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo > likeforum_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr name_show_;
    ::google::protobuf::internal::ArenaStringPtr portrait_;
    ::google::protobuf::internal::ArenaStringPtr bawu_type_;
    ::google::protobuf::internal::ArenaStringPtr bduss_;
    ::google::protobuf::internal::ArenaStringPtr tb_age_;
    ::google::protobuf::internal::ArenaStringPtr tieba_uid_;
    ::User_PrivSets* priv_sets_;
    ::User_UserVipInfo* vipinfo_;
    ::User_NewGodInfo* new_god_data_;
    ::int64_t id_;
    ::int32_t is_coreuser_;
    ::int32_t level_id_;
    ::int32_t is_bawu_;
    ::int32_t post_num_;
    ::int32_t gender_;
    ::int32_t is_friend_;
    ::int32_t is_guanfang_;
    ::int32_t is_fans_;
    ::int32_t is_default_avatar_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_User_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// User_PrivSets

// int32 location = 1;
inline void User_PrivSets::clear_location() {
  _impl_.location_ = 0;
}
inline ::int32_t User_PrivSets::location() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.location)
  return _internal_location();
}
inline void User_PrivSets::set_location(::int32_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.location)
}
inline ::int32_t User_PrivSets::_internal_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.location_;
}
inline void User_PrivSets::_internal_set_location(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.location_ = value;
}

// int32 like = 2;
inline void User_PrivSets::clear_like() {
  _impl_.like_ = 0;
}
inline ::int32_t User_PrivSets::like() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.like)
  return _internal_like();
}
inline void User_PrivSets::set_like(::int32_t value) {
  _internal_set_like(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.like)
}
inline ::int32_t User_PrivSets::_internal_like() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.like_;
}
inline void User_PrivSets::_internal_set_like(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.like_ = value;
}

// int32 group = 3;
inline void User_PrivSets::clear_group() {
  _impl_.group_ = 0;
}
inline ::int32_t User_PrivSets::group() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.group)
  return _internal_group();
}
inline void User_PrivSets::set_group(::int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.group)
}
inline ::int32_t User_PrivSets::_internal_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_;
}
inline void User_PrivSets::_internal_set_group(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.group_ = value;
}

// int32 post = 4;
inline void User_PrivSets::clear_post() {
  _impl_.post_ = 0;
}
inline ::int32_t User_PrivSets::post() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.post)
  return _internal_post();
}
inline void User_PrivSets::set_post(::int32_t value) {
  _internal_set_post(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.post)
}
inline ::int32_t User_PrivSets::_internal_post() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_;
}
inline void User_PrivSets::_internal_set_post(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_ = value;
}

// int32 friend = 5;
inline void User_PrivSets::clear_friend_() {
  _impl_.friend__ = 0;
}
inline ::int32_t User_PrivSets::friend_() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.friend)
  return _internal_friend_();
}
inline void User_PrivSets::set_friend_(::int32_t value) {
  _internal_set_friend_(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.friend)
}
inline ::int32_t User_PrivSets::_internal_friend_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.friend__;
}
inline void User_PrivSets::_internal_set_friend_(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.friend__ = value;
}

// int32 live = 6;
inline void User_PrivSets::clear_live() {
  _impl_.live_ = 0;
}
inline ::int32_t User_PrivSets::live() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.live)
  return _internal_live();
}
inline void User_PrivSets::set_live(::int32_t value) {
  _internal_set_live(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.live)
}
inline ::int32_t User_PrivSets::_internal_live() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.live_;
}
inline void User_PrivSets::_internal_set_live(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.live_ = value;
}

// int32 reply = 7;
inline void User_PrivSets::clear_reply() {
  _impl_.reply_ = 0;
}
inline ::int32_t User_PrivSets::reply() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.reply)
  return _internal_reply();
}
inline void User_PrivSets::set_reply(::int32_t value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.reply)
}
inline ::int32_t User_PrivSets::_internal_reply() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reply_;
}
inline void User_PrivSets::_internal_set_reply(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reply_ = value;
}

// int32 bazhu_show_inside = 8;
inline void User_PrivSets::clear_bazhu_show_inside() {
  _impl_.bazhu_show_inside_ = 0;
}
inline ::int32_t User_PrivSets::bazhu_show_inside() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.bazhu_show_inside)
  return _internal_bazhu_show_inside();
}
inline void User_PrivSets::set_bazhu_show_inside(::int32_t value) {
  _internal_set_bazhu_show_inside(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.bazhu_show_inside)
}
inline ::int32_t User_PrivSets::_internal_bazhu_show_inside() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bazhu_show_inside_;
}
inline void User_PrivSets::_internal_set_bazhu_show_inside(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bazhu_show_inside_ = value;
}

// int32 bazhu_show_outside = 9;
inline void User_PrivSets::clear_bazhu_show_outside() {
  _impl_.bazhu_show_outside_ = 0;
}
inline ::int32_t User_PrivSets::bazhu_show_outside() const {
  // @@protoc_insertion_point(field_get:User.PrivSets.bazhu_show_outside)
  return _internal_bazhu_show_outside();
}
inline void User_PrivSets::set_bazhu_show_outside(::int32_t value) {
  _internal_set_bazhu_show_outside(value);
  // @@protoc_insertion_point(field_set:User.PrivSets.bazhu_show_outside)
}
inline ::int32_t User_PrivSets::_internal_bazhu_show_outside() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bazhu_show_outside_;
}
inline void User_PrivSets::_internal_set_bazhu_show_outside(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bazhu_show_outside_ = value;
}

// -------------------------------------------------------------------

// User_LikeForumInfo

// string forum_name = 1;
inline void User_LikeForumInfo::clear_forum_name() {
  _impl_.forum_name_.ClearToEmpty();
}
inline const std::string& User_LikeForumInfo::forum_name() const {
  // @@protoc_insertion_point(field_get:User.LikeForumInfo.forum_name)
  return _internal_forum_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_LikeForumInfo::set_forum_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.LikeForumInfo.forum_name)
}
inline std::string* User_LikeForumInfo::mutable_forum_name() {
  std::string* _s = _internal_mutable_forum_name();
  // @@protoc_insertion_point(field_mutable:User.LikeForumInfo.forum_name)
  return _s;
}
inline const std::string& User_LikeForumInfo::_internal_forum_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_name_.Get();
}
inline void User_LikeForumInfo::_internal_set_forum_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_LikeForumInfo::_internal_mutable_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.forum_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_LikeForumInfo::release_forum_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.LikeForumInfo.forum_name)
  return _impl_.forum_name_.Release();
}
inline void User_LikeForumInfo::set_allocated_forum_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forum_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.forum_name_.IsDefault()) {
          _impl_.forum_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.LikeForumInfo.forum_name)
}

// uint64 forum_id = 2;
inline void User_LikeForumInfo::clear_forum_id() {
  _impl_.forum_id_ = ::uint64_t{0u};
}
inline ::uint64_t User_LikeForumInfo::forum_id() const {
  // @@protoc_insertion_point(field_get:User.LikeForumInfo.forum_id)
  return _internal_forum_id();
}
inline void User_LikeForumInfo::set_forum_id(::uint64_t value) {
  _internal_set_forum_id(value);
  // @@protoc_insertion_point(field_set:User.LikeForumInfo.forum_id)
}
inline ::uint64_t User_LikeForumInfo::_internal_forum_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forum_id_;
}
inline void User_LikeForumInfo::_internal_set_forum_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.forum_id_ = value;
}

// -------------------------------------------------------------------

// User_UserVipInfo

// uint32 v_status = 1;
inline void User_UserVipInfo::clear_v_status() {
  _impl_.v_status_ = 0u;
}
inline ::uint32_t User_UserVipInfo::v_status() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.v_status)
  return _internal_v_status();
}
inline void User_UserVipInfo::set_v_status(::uint32_t value) {
  _internal_set_v_status(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.v_status)
}
inline ::uint32_t User_UserVipInfo::_internal_v_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_status_;
}
inline void User_UserVipInfo::_internal_set_v_status(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_status_ = value;
}

// uint32 s_time = 2;
inline void User_UserVipInfo::clear_s_time() {
  _impl_.s_time_ = 0u;
}
inline ::uint32_t User_UserVipInfo::s_time() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.s_time)
  return _internal_s_time();
}
inline void User_UserVipInfo::set_s_time(::uint32_t value) {
  _internal_set_s_time(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.s_time)
}
inline ::uint32_t User_UserVipInfo::_internal_s_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.s_time_;
}
inline void User_UserVipInfo::_internal_set_s_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.s_time_ = value;
}

// uint32 e_time = 3;
inline void User_UserVipInfo::clear_e_time() {
  _impl_.e_time_ = 0u;
}
inline ::uint32_t User_UserVipInfo::e_time() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.e_time)
  return _internal_e_time();
}
inline void User_UserVipInfo::set_e_time(::uint32_t value) {
  _internal_set_e_time(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.e_time)
}
inline ::uint32_t User_UserVipInfo::_internal_e_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.e_time_;
}
inline void User_UserVipInfo::_internal_set_e_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.e_time_ = value;
}

// uint32 ext_score = 4;
inline void User_UserVipInfo::clear_ext_score() {
  _impl_.ext_score_ = 0u;
}
inline ::uint32_t User_UserVipInfo::ext_score() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.ext_score)
  return _internal_ext_score();
}
inline void User_UserVipInfo::set_ext_score(::uint32_t value) {
  _internal_set_ext_score(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.ext_score)
}
inline ::uint32_t User_UserVipInfo::_internal_ext_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ext_score_;
}
inline void User_UserVipInfo::_internal_set_ext_score(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ext_score_ = value;
}

// uint32 v_level = 5;
inline void User_UserVipInfo::clear_v_level() {
  _impl_.v_level_ = 0u;
}
inline ::uint32_t User_UserVipInfo::v_level() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.v_level)
  return _internal_v_level();
}
inline void User_UserVipInfo::set_v_level(::uint32_t value) {
  _internal_set_v_level(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.v_level)
}
inline ::uint32_t User_UserVipInfo::_internal_v_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_level_;
}
inline void User_UserVipInfo::_internal_set_v_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_level_ = value;
}

// int32 a_score = 6;
inline void User_UserVipInfo::clear_a_score() {
  _impl_.a_score_ = 0;
}
inline ::int32_t User_UserVipInfo::a_score() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.a_score)
  return _internal_a_score();
}
inline void User_UserVipInfo::set_a_score(::int32_t value) {
  _internal_set_a_score(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.a_score)
}
inline ::int32_t User_UserVipInfo::_internal_a_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.a_score_;
}
inline void User_UserVipInfo::_internal_set_a_score(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.a_score_ = value;
}

// uint32 n_score = 7;
inline void User_UserVipInfo::clear_n_score() {
  _impl_.n_score_ = 0u;
}
inline ::uint32_t User_UserVipInfo::n_score() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.n_score)
  return _internal_n_score();
}
inline void User_UserVipInfo::set_n_score(::uint32_t value) {
  _internal_set_n_score(value);
  // @@protoc_insertion_point(field_set:User.UserVipInfo.n_score)
}
inline ::uint32_t User_UserVipInfo::_internal_n_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.n_score_;
}
inline void User_UserVipInfo::_internal_set_n_score(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.n_score_ = value;
}

// string icon_url = 8;
inline void User_UserVipInfo::clear_icon_url() {
  _impl_.icon_url_.ClearToEmpty();
}
inline const std::string& User_UserVipInfo::icon_url() const {
  // @@protoc_insertion_point(field_get:User.UserVipInfo.icon_url)
  return _internal_icon_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_UserVipInfo::set_icon_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.UserVipInfo.icon_url)
}
inline std::string* User_UserVipInfo::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:User.UserVipInfo.icon_url)
  return _s;
}
inline const std::string& User_UserVipInfo::_internal_icon_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_url_.Get();
}
inline void User_UserVipInfo::_internal_set_icon_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* User_UserVipInfo::_internal_mutable_icon_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_url_.Mutable( GetArenaForAllocation());
}
inline std::string* User_UserVipInfo::release_icon_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.UserVipInfo.icon_url)
  return _impl_.icon_url_.Release();
}
inline void User_UserVipInfo::set_allocated_icon_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_url_.IsDefault()) {
          _impl_.icon_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.UserVipInfo.icon_url)
}

// -------------------------------------------------------------------

// User_NewGodInfo

// int32 status = 1;
inline void User_NewGodInfo::clear_status() {
  _impl_.status_ = 0;
}
inline ::int32_t User_NewGodInfo::status() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.status)
  return _internal_status();
}
inline void User_NewGodInfo::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:User.NewGodInfo.status)
}
inline ::int32_t User_NewGodInfo::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void User_NewGodInfo::_internal_set_status(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// uint32 field_id = 2;
inline void User_NewGodInfo::clear_field_id() {
  _impl_.field_id_ = 0u;
}
inline ::uint32_t User_NewGodInfo::field_id() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.field_id)
  return _internal_field_id();
}
inline void User_NewGodInfo::set_field_id(::uint32_t value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:User.NewGodInfo.field_id)
}
inline ::uint32_t User_NewGodInfo::_internal_field_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_id_;
}
inline void User_NewGodInfo::_internal_set_field_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_id_ = value;
}

// string field_name = 3;
inline void User_NewGodInfo::clear_field_name() {
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& User_NewGodInfo::field_name() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.field_name)
  return _internal_field_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_NewGodInfo::set_field_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.NewGodInfo.field_name)
}
inline std::string* User_NewGodInfo::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:User.NewGodInfo.field_name)
  return _s;
}
inline const std::string& User_NewGodInfo::_internal_field_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_name_.Get();
}
inline void User_NewGodInfo::_internal_set_field_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::_internal_mutable_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::release_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.NewGodInfo.field_name)
  return _impl_.field_name_.Release();
}
inline void User_NewGodInfo::set_allocated_field_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_name_.IsDefault()) {
          _impl_.field_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.NewGodInfo.field_name)
}

// uint32 type = 4;
inline void User_NewGodInfo::clear_type() {
  _impl_.type_ = 0u;
}
inline ::uint32_t User_NewGodInfo::type() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.type)
  return _internal_type();
}
inline void User_NewGodInfo::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:User.NewGodInfo.type)
}
inline ::uint32_t User_NewGodInfo::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void User_NewGodInfo::_internal_set_type(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string type_name = 5;
inline void User_NewGodInfo::clear_type_name() {
  _impl_.type_name_.ClearToEmpty();
}
inline const std::string& User_NewGodInfo::type_name() const {
  // @@protoc_insertion_point(field_get:User.NewGodInfo.type_name)
  return _internal_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User_NewGodInfo::set_type_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.NewGodInfo.type_name)
}
inline std::string* User_NewGodInfo::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:User.NewGodInfo.type_name)
  return _s;
}
inline const std::string& User_NewGodInfo::_internal_type_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_name_.Get();
}
inline void User_NewGodInfo::_internal_set_type_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::_internal_mutable_type_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_name_.Mutable( GetArenaForAllocation());
}
inline std::string* User_NewGodInfo::release_type_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.NewGodInfo.type_name)
  return _impl_.type_name_.Release();
}
inline void User_NewGodInfo::set_allocated_type_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_name_.IsDefault()) {
          _impl_.type_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.NewGodInfo.type_name)
}

// -------------------------------------------------------------------

// User

// int64 id = 2;
inline void User::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t User::id() const {
  // @@protoc_insertion_point(field_get:User.id)
  return _internal_id();
}
inline void User::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:User.id)
}
inline ::int64_t User::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void User::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 3;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// string name_show = 4;
inline void User::clear_name_show() {
  _impl_.name_show_.ClearToEmpty();
}
inline const std::string& User::name_show() const {
  // @@protoc_insertion_point(field_get:User.name_show)
  return _internal_name_show();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_name_show(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_show_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name_show)
}
inline std::string* User::mutable_name_show() {
  std::string* _s = _internal_mutable_name_show();
  // @@protoc_insertion_point(field_mutable:User.name_show)
  return _s;
}
inline const std::string& User::_internal_name_show() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_show_.Get();
}
inline void User::_internal_set_name_show(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_show_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_show_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_name_show() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.name_show)
  return _impl_.name_show_.Release();
}
inline void User::set_allocated_name_show(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_show_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_show_.IsDefault()) {
          _impl_.name_show_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name_show)
}

// string portrait = 5;
inline void User::clear_portrait() {
  _impl_.portrait_.ClearToEmpty();
}
inline const std::string& User::portrait() const {
  // @@protoc_insertion_point(field_get:User.portrait)
  return _internal_portrait();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_portrait(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.portrait_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.portrait)
}
inline std::string* User::mutable_portrait() {
  std::string* _s = _internal_mutable_portrait();
  // @@protoc_insertion_point(field_mutable:User.portrait)
  return _s;
}
inline const std::string& User::_internal_portrait() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.portrait_.Get();
}
inline void User::_internal_set_portrait(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.portrait_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.portrait_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_portrait() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.portrait)
  return _impl_.portrait_.Release();
}
inline void User::set_allocated_portrait(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.portrait_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.portrait_.IsDefault()) {
          _impl_.portrait_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.portrait)
}

// int32 is_coreuser = 20;
inline void User::clear_is_coreuser() {
  _impl_.is_coreuser_ = 0;
}
inline ::int32_t User::is_coreuser() const {
  // @@protoc_insertion_point(field_get:User.is_coreuser)
  return _internal_is_coreuser();
}
inline void User::set_is_coreuser(::int32_t value) {
  _internal_set_is_coreuser(value);
  // @@protoc_insertion_point(field_set:User.is_coreuser)
}
inline ::int32_t User::_internal_is_coreuser() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_coreuser_;
}
inline void User::_internal_set_is_coreuser(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_coreuser_ = value;
}

// int32 level_id = 23;
inline void User::clear_level_id() {
  _impl_.level_id_ = 0;
}
inline ::int32_t User::level_id() const {
  // @@protoc_insertion_point(field_get:User.level_id)
  return _internal_level_id();
}
inline void User::set_level_id(::int32_t value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:User.level_id)
}
inline ::int32_t User::_internal_level_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_id_;
}
inline void User::_internal_set_level_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_id_ = value;
}

// int32 is_bawu = 25;
inline void User::clear_is_bawu() {
  _impl_.is_bawu_ = 0;
}
inline ::int32_t User::is_bawu() const {
  // @@protoc_insertion_point(field_get:User.is_bawu)
  return _internal_is_bawu();
}
inline void User::set_is_bawu(::int32_t value) {
  _internal_set_is_bawu(value);
  // @@protoc_insertion_point(field_set:User.is_bawu)
}
inline ::int32_t User::_internal_is_bawu() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_bawu_;
}
inline void User::_internal_set_is_bawu(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_bawu_ = value;
}

// string bawu_type = 26;
inline void User::clear_bawu_type() {
  _impl_.bawu_type_.ClearToEmpty();
}
inline const std::string& User::bawu_type() const {
  // @@protoc_insertion_point(field_get:User.bawu_type)
  return _internal_bawu_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_bawu_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bawu_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.bawu_type)
}
inline std::string* User::mutable_bawu_type() {
  std::string* _s = _internal_mutable_bawu_type();
  // @@protoc_insertion_point(field_mutable:User.bawu_type)
  return _s;
}
inline const std::string& User::_internal_bawu_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bawu_type_.Get();
}
inline void User::_internal_set_bawu_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bawu_type_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_bawu_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bawu_type_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_bawu_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.bawu_type)
  return _impl_.bawu_type_.Release();
}
inline void User::set_allocated_bawu_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bawu_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bawu_type_.IsDefault()) {
          _impl_.bawu_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.bawu_type)
}

// string BDUSS = 29;
inline void User::clear_bduss() {
  _impl_.bduss_.ClearToEmpty();
}
inline const std::string& User::bduss() const {
  // @@protoc_insertion_point(field_get:User.BDUSS)
  return _internal_bduss();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_bduss(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bduss_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.BDUSS)
}
inline std::string* User::mutable_bduss() {
  std::string* _s = _internal_mutable_bduss();
  // @@protoc_insertion_point(field_mutable:User.BDUSS)
  return _s;
}
inline const std::string& User::_internal_bduss() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bduss_.Get();
}
inline void User::_internal_set_bduss(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bduss_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_bduss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bduss_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_bduss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.BDUSS)
  return _impl_.bduss_.Release();
}
inline void User::set_allocated_bduss(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bduss_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bduss_.IsDefault()) {
          _impl_.bduss_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.BDUSS)
}

// int32 post_num = 37;
inline void User::clear_post_num() {
  _impl_.post_num_ = 0;
}
inline ::int32_t User::post_num() const {
  // @@protoc_insertion_point(field_get:User.post_num)
  return _internal_post_num();
}
inline void User::set_post_num(::int32_t value) {
  _internal_set_post_num(value);
  // @@protoc_insertion_point(field_set:User.post_num)
}
inline ::int32_t User::_internal_post_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_num_;
}
inline void User::_internal_set_post_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_num_ = value;
}

// string tb_age = 38;
inline void User::clear_tb_age() {
  _impl_.tb_age_.ClearToEmpty();
}
inline const std::string& User::tb_age() const {
  // @@protoc_insertion_point(field_get:User.tb_age)
  return _internal_tb_age();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_tb_age(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tb_age_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.tb_age)
}
inline std::string* User::mutable_tb_age() {
  std::string* _s = _internal_mutable_tb_age();
  // @@protoc_insertion_point(field_mutable:User.tb_age)
  return _s;
}
inline const std::string& User::_internal_tb_age() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tb_age_.Get();
}
inline void User::_internal_set_tb_age(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tb_age_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_tb_age() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tb_age_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_tb_age() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.tb_age)
  return _impl_.tb_age_.Release();
}
inline void User::set_allocated_tb_age(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tb_age_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tb_age_.IsDefault()) {
          _impl_.tb_age_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.tb_age)
}

// int32 gender = 42;
inline void User::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::int32_t User::gender() const {
  // @@protoc_insertion_point(field_get:User.gender)
  return _internal_gender();
}
inline void User::set_gender(::int32_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:User.gender)
}
inline ::int32_t User::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gender_;
}
inline void User::_internal_set_gender(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// .User.PrivSets priv_sets = 45;
inline bool User::has_priv_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.priv_sets_ != nullptr);
  return value;
}
inline void User::clear_priv_sets() {
  if (_impl_.priv_sets_ != nullptr) _impl_.priv_sets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::User_PrivSets& User::_internal_priv_sets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_PrivSets* p = _impl_.priv_sets_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_PrivSets&>(::_User_PrivSets_default_instance_);
}
inline const ::User_PrivSets& User::priv_sets() const {
  // @@protoc_insertion_point(field_get:User.priv_sets)
  return _internal_priv_sets();
}
inline void User::unsafe_arena_set_allocated_priv_sets(::User_PrivSets* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.priv_sets_);
  }
  _impl_.priv_sets_ = reinterpret_cast<::User_PrivSets*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.priv_sets)
}
inline ::User_PrivSets* User::release_priv_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User_PrivSets* released = _impl_.priv_sets_;
  _impl_.priv_sets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_PrivSets* User::unsafe_arena_release_priv_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.priv_sets)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User_PrivSets* temp = _impl_.priv_sets_;
  _impl_.priv_sets_ = nullptr;
  return temp;
}
inline ::User_PrivSets* User::_internal_mutable_priv_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.priv_sets_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_PrivSets>(GetArenaForAllocation());
    _impl_.priv_sets_ = reinterpret_cast<::User_PrivSets*>(p);
  }
  return _impl_.priv_sets_;
}
inline ::User_PrivSets* User::mutable_priv_sets() {
  ::User_PrivSets* _msg = _internal_mutable_priv_sets();
  // @@protoc_insertion_point(field_mutable:User.priv_sets)
  return _msg;
}
inline void User::set_allocated_priv_sets(::User_PrivSets* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_PrivSets*>(_impl_.priv_sets_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_PrivSets*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.priv_sets_ = reinterpret_cast<::User_PrivSets*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.priv_sets)
}

// int32 is_friend = 46;
inline void User::clear_is_friend() {
  _impl_.is_friend_ = 0;
}
inline ::int32_t User::is_friend() const {
  // @@protoc_insertion_point(field_get:User.is_friend)
  return _internal_is_friend();
}
inline void User::set_is_friend(::int32_t value) {
  _internal_set_is_friend(value);
  // @@protoc_insertion_point(field_set:User.is_friend)
}
inline ::int32_t User::_internal_is_friend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_friend_;
}
inline void User::_internal_set_is_friend(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_friend_ = value;
}

// repeated .User.LikeForumInfo likeForum = 47;
inline int User::_internal_likeforum_size() const {
  return _internal_likeforum().size();
}
inline int User::likeforum_size() const {
  return _internal_likeforum_size();
}
inline void User::clear_likeforum() {
  _internal_mutable_likeforum()->Clear();
}
inline ::User_LikeForumInfo* User::mutable_likeforum(int index) {
  // @@protoc_insertion_point(field_mutable:User.likeForum)
  return _internal_mutable_likeforum()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >*
User::mutable_likeforum() {
  // @@protoc_insertion_point(field_mutable_list:User.likeForum)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_likeforum();
}
inline const ::User_LikeForumInfo& User::likeforum(int index) const {
  // @@protoc_insertion_point(field_get:User.likeForum)
    return _internal_likeforum().Get(index);
}
inline ::User_LikeForumInfo* User::add_likeforum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::User_LikeForumInfo* _add = _internal_mutable_likeforum()->Add();
  // @@protoc_insertion_point(field_add:User.likeForum)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_LikeForumInfo >&
User::likeforum() const {
  // @@protoc_insertion_point(field_list:User.likeForum)
  return _internal_likeforum();
}
inline const ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>&
User::_internal_likeforum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.likeforum_;
}
inline ::google::protobuf::RepeatedPtrField<::User_LikeForumInfo>*
User::_internal_mutable_likeforum() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.likeforum_;
}

// int32 is_guanfang = 52;
inline void User::clear_is_guanfang() {
  _impl_.is_guanfang_ = 0;
}
inline ::int32_t User::is_guanfang() const {
  // @@protoc_insertion_point(field_get:User.is_guanfang)
  return _internal_is_guanfang();
}
inline void User::set_is_guanfang(::int32_t value) {
  _internal_set_is_guanfang(value);
  // @@protoc_insertion_point(field_set:User.is_guanfang)
}
inline ::int32_t User::_internal_is_guanfang() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_guanfang_;
}
inline void User::_internal_set_is_guanfang(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_guanfang_ = value;
}

// .User.UserVipInfo vipInfo = 61;
inline bool User::has_vipinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vipinfo_ != nullptr);
  return value;
}
inline void User::clear_vipinfo() {
  if (_impl_.vipinfo_ != nullptr) _impl_.vipinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::User_UserVipInfo& User::_internal_vipinfo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_UserVipInfo* p = _impl_.vipinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_UserVipInfo&>(::_User_UserVipInfo_default_instance_);
}
inline const ::User_UserVipInfo& User::vipinfo() const {
  // @@protoc_insertion_point(field_get:User.vipInfo)
  return _internal_vipinfo();
}
inline void User::unsafe_arena_set_allocated_vipinfo(::User_UserVipInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vipinfo_);
  }
  _impl_.vipinfo_ = reinterpret_cast<::User_UserVipInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.vipInfo)
}
inline ::User_UserVipInfo* User::release_vipinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::User_UserVipInfo* released = _impl_.vipinfo_;
  _impl_.vipinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_UserVipInfo* User::unsafe_arena_release_vipinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.vipInfo)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::User_UserVipInfo* temp = _impl_.vipinfo_;
  _impl_.vipinfo_ = nullptr;
  return temp;
}
inline ::User_UserVipInfo* User::_internal_mutable_vipinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vipinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_UserVipInfo>(GetArenaForAllocation());
    _impl_.vipinfo_ = reinterpret_cast<::User_UserVipInfo*>(p);
  }
  return _impl_.vipinfo_;
}
inline ::User_UserVipInfo* User::mutable_vipinfo() {
  ::User_UserVipInfo* _msg = _internal_mutable_vipinfo();
  // @@protoc_insertion_point(field_mutable:User.vipInfo)
  return _msg;
}
inline void User::set_allocated_vipinfo(::User_UserVipInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_UserVipInfo*>(_impl_.vipinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_UserVipInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.vipinfo_ = reinterpret_cast<::User_UserVipInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.vipInfo)
}

// int32 is_fans = 91;
inline void User::clear_is_fans() {
  _impl_.is_fans_ = 0;
}
inline ::int32_t User::is_fans() const {
  // @@protoc_insertion_point(field_get:User.is_fans)
  return _internal_is_fans();
}
inline void User::set_is_fans(::int32_t value) {
  _internal_set_is_fans(value);
  // @@protoc_insertion_point(field_set:User.is_fans)
}
inline ::int32_t User::_internal_is_fans() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_fans_;
}
inline void User::_internal_set_is_fans(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_fans_ = value;
}

// .User.NewGodInfo new_god_data = 101;
inline bool User::has_new_god_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_god_data_ != nullptr);
  return value;
}
inline void User::clear_new_god_data() {
  if (_impl_.new_god_data_ != nullptr) _impl_.new_god_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::User_NewGodInfo& User::_internal_new_god_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User_NewGodInfo* p = _impl_.new_god_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::User_NewGodInfo&>(::_User_NewGodInfo_default_instance_);
}
inline const ::User_NewGodInfo& User::new_god_data() const {
  // @@protoc_insertion_point(field_get:User.new_god_data)
  return _internal_new_god_data();
}
inline void User::unsafe_arena_set_allocated_new_god_data(::User_NewGodInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_god_data_);
  }
  _impl_.new_god_data_ = reinterpret_cast<::User_NewGodInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.new_god_data)
}
inline ::User_NewGodInfo* User::release_new_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::User_NewGodInfo* released = _impl_.new_god_data_;
  _impl_.new_god_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User_NewGodInfo* User::unsafe_arena_release_new_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.new_god_data)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::User_NewGodInfo* temp = _impl_.new_god_data_;
  _impl_.new_god_data_ = nullptr;
  return temp;
}
inline ::User_NewGodInfo* User::_internal_mutable_new_god_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.new_god_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::User_NewGodInfo>(GetArenaForAllocation());
    _impl_.new_god_data_ = reinterpret_cast<::User_NewGodInfo*>(p);
  }
  return _impl_.new_god_data_;
}
inline ::User_NewGodInfo* User::mutable_new_god_data() {
  ::User_NewGodInfo* _msg = _internal_mutable_new_god_data();
  // @@protoc_insertion_point(field_mutable:User.new_god_data)
  return _msg;
}
inline void User::set_allocated_new_god_data(::User_NewGodInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::User_NewGodInfo*>(_impl_.new_god_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::User_NewGodInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.new_god_data_ = reinterpret_cast<::User_NewGodInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:User.new_god_data)
}

// int32 is_default_avatar = 106;
inline void User::clear_is_default_avatar() {
  _impl_.is_default_avatar_ = 0;
}
inline ::int32_t User::is_default_avatar() const {
  // @@protoc_insertion_point(field_get:User.is_default_avatar)
  return _internal_is_default_avatar();
}
inline void User::set_is_default_avatar(::int32_t value) {
  _internal_set_is_default_avatar(value);
  // @@protoc_insertion_point(field_set:User.is_default_avatar)
}
inline ::int32_t User::_internal_is_default_avatar() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_default_avatar_;
}
inline void User::_internal_set_is_default_avatar(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_default_avatar_ = value;
}

// string tieba_uid = 120;
inline void User::clear_tieba_uid() {
  _impl_.tieba_uid_.ClearToEmpty();
}
inline const std::string& User::tieba_uid() const {
  // @@protoc_insertion_point(field_get:User.tieba_uid)
  return _internal_tieba_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_tieba_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tieba_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.tieba_uid)
}
inline std::string* User::mutable_tieba_uid() {
  std::string* _s = _internal_mutable_tieba_uid();
  // @@protoc_insertion_point(field_mutable:User.tieba_uid)
  return _s;
}
inline const std::string& User::_internal_tieba_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tieba_uid_.Get();
}
inline void User::_internal_set_tieba_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tieba_uid_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_tieba_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tieba_uid_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_tieba_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:User.tieba_uid)
  return _impl_.tieba_uid_.Release();
}
inline void User::set_allocated_tieba_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tieba_uid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tieba_uid_.IsDefault()) {
          _impl_.tieba_uid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.tieba_uid)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_User_2eproto_2epb_2eh
