// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleForum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SimpleForum_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_SimpleForum_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "FrsTabInfo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_SimpleForum_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_SimpleForum_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_SimpleForum_2eproto;
class SimpleForum;
struct SimpleForumDefaultTypeInternal;
extern SimpleForumDefaultTypeInternal _SimpleForum_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class SimpleForum final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SimpleForum) */ {
 public:
  inline SimpleForum() : SimpleForum(nullptr) {}
  ~SimpleForum() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleForum(::google::protobuf::internal::ConstantInitialized);

  SimpleForum(const SimpleForum& from);
  SimpleForum(SimpleForum&& from) noexcept
    : SimpleForum() {
    *this = ::std::move(from);
  }

  inline SimpleForum& operator=(const SimpleForum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleForum& operator=(SimpleForum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleForum& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleForum* internal_default_instance() {
    return reinterpret_cast<const SimpleForum*>(
               &_SimpleForum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimpleForum& a, SimpleForum& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleForum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleForum* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleForum* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleForum>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleForum& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SimpleForum& from) {
    SimpleForum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleForum* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SimpleForum";
  }
  protected:
  explicit SimpleForum(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTabInfoFieldNumber = 15,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kMemberNumFieldNumber = 12,
    kPostNumFieldNumber = 13,
  };
  // repeated .FrsTabInfo tab_info = 15;
  int tab_info_size() const;
  private:
  int _internal_tab_info_size() const;

  public:
  void clear_tab_info() ;
  ::FrsTabInfo* mutable_tab_info(int index);
  ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >*
      mutable_tab_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::FrsTabInfo>& _internal_tab_info() const;
  ::google::protobuf::RepeatedPtrField<::FrsTabInfo>* _internal_mutable_tab_info();
  public:
  const ::FrsTabInfo& tab_info(int index) const;
  ::FrsTabInfo* add_tab_info();
  const ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >&
      tab_info() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int32 member_num = 12;
  void clear_member_num() ;
  ::int32_t member_num() const;
  void set_member_num(::int32_t value);

  private:
  ::int32_t _internal_member_num() const;
  void _internal_set_member_num(::int32_t value);

  public:
  // int32 post_num = 13;
  void clear_post_num() ;
  ::int32_t post_num() const;
  void set_post_num(::int32_t value);

  private:
  ::int32_t _internal_post_num() const;
  void _internal_set_post_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:SimpleForum)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 24, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::FrsTabInfo > tab_info_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t id_;
    ::int32_t member_num_;
    ::int32_t post_num_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SimpleForum_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SimpleForum

// int64 id = 1;
inline void SimpleForum::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SimpleForum::id() const {
  // @@protoc_insertion_point(field_get:SimpleForum.id)
  return _internal_id();
}
inline void SimpleForum::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SimpleForum.id)
}
inline ::int64_t SimpleForum::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SimpleForum::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void SimpleForum::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SimpleForum::name() const {
  // @@protoc_insertion_point(field_get:SimpleForum.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleForum::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SimpleForum.name)
}
inline std::string* SimpleForum::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SimpleForum.name)
  return _s;
}
inline const std::string& SimpleForum::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SimpleForum::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleForum::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SimpleForum::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SimpleForum.name)
  return _impl_.name_.Release();
}
inline void SimpleForum::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SimpleForum.name)
}

// int32 member_num = 12;
inline void SimpleForum::clear_member_num() {
  _impl_.member_num_ = 0;
}
inline ::int32_t SimpleForum::member_num() const {
  // @@protoc_insertion_point(field_get:SimpleForum.member_num)
  return _internal_member_num();
}
inline void SimpleForum::set_member_num(::int32_t value) {
  _internal_set_member_num(value);
  // @@protoc_insertion_point(field_set:SimpleForum.member_num)
}
inline ::int32_t SimpleForum::_internal_member_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.member_num_;
}
inline void SimpleForum::_internal_set_member_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.member_num_ = value;
}

// int32 post_num = 13;
inline void SimpleForum::clear_post_num() {
  _impl_.post_num_ = 0;
}
inline ::int32_t SimpleForum::post_num() const {
  // @@protoc_insertion_point(field_get:SimpleForum.post_num)
  return _internal_post_num();
}
inline void SimpleForum::set_post_num(::int32_t value) {
  _internal_set_post_num(value);
  // @@protoc_insertion_point(field_set:SimpleForum.post_num)
}
inline ::int32_t SimpleForum::_internal_post_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_num_;
}
inline void SimpleForum::_internal_set_post_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.post_num_ = value;
}

// repeated .FrsTabInfo tab_info = 15;
inline int SimpleForum::_internal_tab_info_size() const {
  return _internal_tab_info().size();
}
inline int SimpleForum::tab_info_size() const {
  return _internal_tab_info_size();
}
inline ::FrsTabInfo* SimpleForum::mutable_tab_info(int index) {
  // @@protoc_insertion_point(field_mutable:SimpleForum.tab_info)
  return _internal_mutable_tab_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >*
SimpleForum::mutable_tab_info() {
  // @@protoc_insertion_point(field_mutable_list:SimpleForum.tab_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tab_info();
}
inline const ::FrsTabInfo& SimpleForum::tab_info(int index) const {
  // @@protoc_insertion_point(field_get:SimpleForum.tab_info)
    return _internal_tab_info().Get(index);
}
inline ::FrsTabInfo* SimpleForum::add_tab_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::FrsTabInfo* _add = _internal_mutable_tab_info()->Add();
  // @@protoc_insertion_point(field_add:SimpleForum.tab_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::FrsTabInfo >&
SimpleForum::tab_info() const {
  // @@protoc_insertion_point(field_list:SimpleForum.tab_info)
  return _internal_tab_info();
}
inline const ::google::protobuf::RepeatedPtrField<::FrsTabInfo>&
SimpleForum::_internal_tab_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tab_info_;
}
inline ::google::protobuf::RepeatedPtrField<::FrsTabInfo>*
SimpleForum::_internal_mutable_tab_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tab_info_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_SimpleForum_2eproto_2epb_2eh
