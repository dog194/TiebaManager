// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Page.proto
#include "Page.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR Page::Page(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.page_size_)*/ 0,
      /*decltype(_impl_.offset_)*/ 0,
      /*decltype(_impl_.current_page_)*/ 0,
      /*decltype(_impl_.total_count_)*/ 0,
      /*decltype(_impl_.total_page_)*/ 0,
      /*decltype(_impl_.has_more_)*/ 0,
      /*decltype(_impl_.has_prev_)*/ 0,
      /*decltype(_impl_.cur_good_id_)*/ 0,
      /*decltype(_impl_.req_num_)*/ 0,
      /*decltype(_impl_.pnum_)*/ 0,
      /*decltype(_impl_.tnum_)*/ 0,
      /*decltype(_impl_.total_num_)*/ 0,
      /*decltype(_impl_.lz_total_floor_)*/ 0,
      /*decltype(_impl_.new_total_page_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageDefaultTypeInternal() {}
  union {
    Page _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageDefaultTypeInternal _Page_default_instance_;
static ::_pb::Metadata file_level_metadata_Page_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Page_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Page_2eproto = nullptr;
const ::uint32_t TableStruct_Page_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Page, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.page_size_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.current_page_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.total_count_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.total_page_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.has_more_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.has_prev_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.cur_good_id_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.req_num_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.pnum_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.tnum_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.total_num_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.lz_total_floor_),
    PROTOBUF_FIELD_OFFSET(::Page, _impl_.new_total_page_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Page)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Page_default_instance_._instance,
};
const char descriptor_table_protodef_Page_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nPage.proto\"\221\002\n\004Page\022\021\n\tpage_size\030\001 \001(\005"
    "\022\016\n\006offset\030\002 \001(\005\022\024\n\014current_page\030\003 \001(\005\022\023"
    "\n\013total_count\030\004 \001(\005\022\022\n\ntotal_page\030\005 \001(\005\022"
    "\020\n\010has_more\030\006 \001(\005\022\020\n\010has_prev\030\007 \001(\005\022\023\n\013c"
    "ur_good_id\030\010 \001(\005\022\017\n\007req_num\030\t \001(\005\022\014\n\004pnu"
    "m\030\n \001(\005\022\014\n\004tnum\030\013 \001(\005\022\021\n\ttotal_num\030\014 \001(\005"
    "\022\026\n\016lz_total_floor\030\r \001(\005\022\026\n\016new_total_pa"
    "ge\030\016 \001(\005b\006proto3"
};
static ::absl::once_flag descriptor_table_Page_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Page_2eproto = {
    false,
    false,
    296,
    descriptor_table_protodef_Page_2eproto,
    "Page.proto",
    &descriptor_table_Page_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_Page_2eproto::offsets,
    file_level_metadata_Page_2eproto,
    file_level_enum_descriptors_Page_2eproto,
    file_level_service_descriptors_Page_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Page_2eproto_getter() {
  return &descriptor_table_Page_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Page_2eproto(&descriptor_table_Page_2eproto);
// ===================================================================

class Page::_Internal {
 public:
};

Page::Page(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Page)
}
Page::Page(const Page& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Page)
}
inline void Page::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.page_size_){0},
      decltype(_impl_.offset_){0},
      decltype(_impl_.current_page_){0},
      decltype(_impl_.total_count_){0},
      decltype(_impl_.total_page_){0},
      decltype(_impl_.has_more_){0},
      decltype(_impl_.has_prev_){0},
      decltype(_impl_.cur_good_id_){0},
      decltype(_impl_.req_num_){0},
      decltype(_impl_.pnum_){0},
      decltype(_impl_.tnum_){0},
      decltype(_impl_.total_num_){0},
      decltype(_impl_.lz_total_floor_){0},
      decltype(_impl_.new_total_page_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Page::~Page() {
  // @@protoc_insertion_point(destructor:Page)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Page::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Page::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:Page)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.new_total_page_) -
      reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.new_total_page_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Page::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 0, 2> Page::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Page_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 page_size = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.page_size_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.page_size_)}},
    // int32 offset = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.offset_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.offset_)}},
    // int32 current_page = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.current_page_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.current_page_)}},
    // int32 total_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.total_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.total_count_)}},
    // int32 total_page = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.total_page_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.total_page_)}},
    // int32 has_more = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.has_more_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.has_more_)}},
    // int32 has_prev = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.has_prev_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.has_prev_)}},
    // int32 cur_good_id = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.cur_good_id_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.cur_good_id_)}},
    // int32 req_num = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.req_num_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.req_num_)}},
    // int32 pnum = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.pnum_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.pnum_)}},
    // int32 tnum = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.tnum_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.tnum_)}},
    // int32 total_num = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.total_num_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.total_num_)}},
    // int32 lz_total_floor = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.lz_total_floor_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.lz_total_floor_)}},
    // int32 new_total_page = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Page, _impl_.new_total_page_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Page, _impl_.new_total_page_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 page_size = 1;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.page_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 offset = 2;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 current_page = 3;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.current_page_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_count = 4;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.total_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_page = 5;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.total_page_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 has_more = 6;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.has_more_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 has_prev = 7;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.has_prev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_good_id = 8;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.cur_good_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 req_num = 9;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.req_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 pnum = 10;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.pnum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tnum = 11;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.tnum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_num = 12;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.total_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lz_total_floor = 13;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.lz_total_floor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 new_total_page = 14;
    {PROTOBUF_FIELD_OFFSET(Page, _impl_.new_total_page_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Page::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Page)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_page_size(), target);
  }

  // int32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_offset(), target);
  }

  // int32 current_page = 3;
  if (this->_internal_current_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_current_page(), target);
  }

  // int32 total_count = 4;
  if (this->_internal_total_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_total_count(), target);
  }

  // int32 total_page = 5;
  if (this->_internal_total_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_total_page(), target);
  }

  // int32 has_more = 6;
  if (this->_internal_has_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_has_more(), target);
  }

  // int32 has_prev = 7;
  if (this->_internal_has_prev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_has_prev(), target);
  }

  // int32 cur_good_id = 8;
  if (this->_internal_cur_good_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_cur_good_id(), target);
  }

  // int32 req_num = 9;
  if (this->_internal_req_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_req_num(), target);
  }

  // int32 pnum = 10;
  if (this->_internal_pnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_pnum(), target);
  }

  // int32 tnum = 11;
  if (this->_internal_tnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_tnum(), target);
  }

  // int32 total_num = 12;
  if (this->_internal_total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_total_num(), target);
  }

  // int32 lz_total_floor = 13;
  if (this->_internal_lz_total_floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_lz_total_floor(), target);
  }

  // int32 new_total_page = 14;
  if (this->_internal_new_total_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_new_total_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Page)
  return target;
}

::size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Page)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_page_size());
  }

  // int32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_offset());
  }

  // int32 current_page = 3;
  if (this->_internal_current_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_current_page());
  }

  // int32 total_count = 4;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_count());
  }

  // int32 total_page = 5;
  if (this->_internal_total_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_page());
  }

  // int32 has_more = 6;
  if (this->_internal_has_more() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_has_more());
  }

  // int32 has_prev = 7;
  if (this->_internal_has_prev() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_has_prev());
  }

  // int32 cur_good_id = 8;
  if (this->_internal_cur_good_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cur_good_id());
  }

  // int32 req_num = 9;
  if (this->_internal_req_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_req_num());
  }

  // int32 pnum = 10;
  if (this->_internal_pnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pnum());
  }

  // int32 tnum = 11;
  if (this->_internal_tnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tnum());
  }

  // int32 total_num = 12;
  if (this->_internal_total_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_num());
  }

  // int32 lz_total_floor = 13;
  if (this->_internal_lz_total_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lz_total_floor());
  }

  // int32 new_total_page = 14;
  if (this->_internal_new_total_page() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_new_total_page());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Page::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Page::MergeImpl
};
const ::google::protobuf::Message::ClassData*Page::GetClassData() const { return &_class_data_; }


void Page::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Page*>(&to_msg);
  auto& from = static_cast<const Page&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Page)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_current_page() != 0) {
    _this->_internal_set_current_page(from._internal_current_page());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  if (from._internal_total_page() != 0) {
    _this->_internal_set_total_page(from._internal_total_page());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  if (from._internal_has_prev() != 0) {
    _this->_internal_set_has_prev(from._internal_has_prev());
  }
  if (from._internal_cur_good_id() != 0) {
    _this->_internal_set_cur_good_id(from._internal_cur_good_id());
  }
  if (from._internal_req_num() != 0) {
    _this->_internal_set_req_num(from._internal_req_num());
  }
  if (from._internal_pnum() != 0) {
    _this->_internal_set_pnum(from._internal_pnum());
  }
  if (from._internal_tnum() != 0) {
    _this->_internal_set_tnum(from._internal_tnum());
  }
  if (from._internal_total_num() != 0) {
    _this->_internal_set_total_num(from._internal_total_num());
  }
  if (from._internal_lz_total_floor() != 0) {
    _this->_internal_set_lz_total_floor(from._internal_lz_total_floor());
  }
  if (from._internal_new_total_page() != 0) {
    _this->_internal_set_new_total_page(from._internal_new_total_page());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Page::IsInitialized() const {
  return true;
}

void Page::InternalSwap(Page* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Page, _impl_.new_total_page_)
      + sizeof(Page::_impl_.new_total_page_)
      - PROTOBUF_FIELD_OFFSET(Page, _impl_.page_size_)>(
          reinterpret_cast<char*>(&_impl_.page_size_),
          reinterpret_cast<char*>(&other->_impl_.page_size_));
}

::google::protobuf::Metadata Page::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Page_2eproto_getter, &descriptor_table_Page_2eproto_once,
      file_level_metadata_Page_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
