// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Page.proto

#include "Page.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class PageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Page>
      _instance;
} _Page_default_instance_;
namespace protobuf_Page_2eproto {
void InitDefaultsPageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_Page_default_instance_;
    new (ptr) ::Page();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Page::InitAsDefaultInstance();
}

void InitDefaultsPage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPageImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, current_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, total_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, total_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, has_more_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, has_prev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, cur_good_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, req_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, pnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, tnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, total_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, lz_total_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Page, new_total_page_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Page)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Page_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Page.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nPage.proto\"\221\002\n\004Page\022\021\n\tpage_size\030\001 \001(\005"
      "\022\016\n\006offset\030\002 \001(\005\022\024\n\014current_page\030\003 \001(\005\022\023"
      "\n\013total_count\030\004 \001(\005\022\022\n\ntotal_page\030\005 \001(\005\022"
      "\020\n\010has_more\030\006 \001(\005\022\020\n\010has_prev\030\007 \001(\005\022\023\n\013c"
      "ur_good_id\030\010 \001(\005\022\017\n\007req_num\030\t \001(\005\022\014\n\004pnu"
      "m\030\n \001(\005\022\014\n\004tnum\030\013 \001(\005\022\021\n\ttotal_num\030\014 \001(\005"
      "\022\026\n\016lz_total_floor\030\r \001(\005\022\026\n\016new_total_pa"
      "ge\030\016 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Page.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Page_2eproto

// ===================================================================

void Page::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Page::kPageSizeFieldNumber;
const int Page::kOffsetFieldNumber;
const int Page::kCurrentPageFieldNumber;
const int Page::kTotalCountFieldNumber;
const int Page::kTotalPageFieldNumber;
const int Page::kHasMoreFieldNumber;
const int Page::kHasPrevFieldNumber;
const int Page::kCurGoodIdFieldNumber;
const int Page::kReqNumFieldNumber;
const int Page::kPnumFieldNumber;
const int Page::kTnumFieldNumber;
const int Page::kTotalNumFieldNumber;
const int Page::kLzTotalFloorFieldNumber;
const int Page::kNewTotalPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Page::Page()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Page_2eproto::InitDefaultsPage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Page)
}
Page::Page(const Page& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_total_page_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(new_total_page_));
  // @@protoc_insertion_point(copy_constructor:Page)
}

void Page::SharedCtor() {
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_total_page_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(new_total_page_));
  _cached_size_ = 0;
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:Page)
  SharedDtor();
}

void Page::SharedDtor() {
}

void Page::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Page::descriptor() {
  ::protobuf_Page_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Page_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Page& Page::default_instance() {
  ::protobuf_Page_2eproto::InitDefaultsPage();
  return *internal_default_instance();
}

Page* Page::New(::google::protobuf::Arena* arena) const {
  Page* n = new Page;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_total_page_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(new_total_page_));
  _internal_metadata_.Clear();
}

bool Page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Page)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 page_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_page = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_page = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 has_more = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 has_prev = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_prev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cur_good_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_good_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 req_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pnum = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tnum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lz_total_floor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lz_total_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 new_total_page = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_total_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Page)
  return false;
#undef DO_
}

void Page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page_size(), output);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // int32 current_page = 3;
  if (this->current_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_page(), output);
  }

  // int32 total_count = 4;
  if (this->total_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_count(), output);
  }

  // int32 total_page = 5;
  if (this->total_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_page(), output);
  }

  // int32 has_more = 6;
  if (this->has_more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->has_more(), output);
  }

  // int32 has_prev = 7;
  if (this->has_prev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->has_prev(), output);
  }

  // int32 cur_good_id = 8;
  if (this->cur_good_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cur_good_id(), output);
  }

  // int32 req_num = 9;
  if (this->req_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->req_num(), output);
  }

  // int32 pnum = 10;
  if (this->pnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pnum(), output);
  }

  // int32 tnum = 11;
  if (this->tnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tnum(), output);
  }

  // int32 total_num = 12;
  if (this->total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_num(), output);
  }

  // int32 lz_total_floor = 13;
  if (this->lz_total_floor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lz_total_floor(), output);
  }

  // int32 new_total_page = 14;
  if (this->new_total_page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->new_total_page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Page)
}

::google::protobuf::uint8* Page::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page_size(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // int32 current_page = 3;
  if (this->current_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_page(), target);
  }

  // int32 total_count = 4;
  if (this->total_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_count(), target);
  }

  // int32 total_page = 5;
  if (this->total_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_page(), target);
  }

  // int32 has_more = 6;
  if (this->has_more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->has_more(), target);
  }

  // int32 has_prev = 7;
  if (this->has_prev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->has_prev(), target);
  }

  // int32 cur_good_id = 8;
  if (this->cur_good_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cur_good_id(), target);
  }

  // int32 req_num = 9;
  if (this->req_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->req_num(), target);
  }

  // int32 pnum = 10;
  if (this->pnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pnum(), target);
  }

  // int32 tnum = 11;
  if (this->tnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tnum(), target);
  }

  // int32 total_num = 12;
  if (this->total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_num(), target);
  }

  // int32 lz_total_floor = 13;
  if (this->lz_total_floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lz_total_floor(), target);
  }

  // int32 new_total_page = 14;
  if (this->new_total_page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->new_total_page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Page)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 page_size = 1;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  // int32 current_page = 3;
  if (this->current_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_page());
  }

  // int32 total_count = 4;
  if (this->total_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_count());
  }

  // int32 total_page = 5;
  if (this->total_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_page());
  }

  // int32 has_more = 6;
  if (this->has_more() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->has_more());
  }

  // int32 has_prev = 7;
  if (this->has_prev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->has_prev());
  }

  // int32 cur_good_id = 8;
  if (this->cur_good_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cur_good_id());
  }

  // int32 req_num = 9;
  if (this->req_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->req_num());
  }

  // int32 pnum = 10;
  if (this->pnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pnum());
  }

  // int32 tnum = 11;
  if (this->tnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tnum());
  }

  // int32 total_num = 12;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_num());
  }

  // int32 lz_total_floor = 13;
  if (this->lz_total_floor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lz_total_floor());
  }

  // int32 new_total_page = 14;
  if (this->new_total_page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_total_page());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Page)
  GOOGLE_DCHECK_NE(&from, this);
  const Page* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Page>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Page)
    MergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.current_page() != 0) {
    set_current_page(from.current_page());
  }
  if (from.total_count() != 0) {
    set_total_count(from.total_count());
  }
  if (from.total_page() != 0) {
    set_total_page(from.total_page());
  }
  if (from.has_more() != 0) {
    set_has_more(from.has_more());
  }
  if (from.has_prev() != 0) {
    set_has_prev(from.has_prev());
  }
  if (from.cur_good_id() != 0) {
    set_cur_good_id(from.cur_good_id());
  }
  if (from.req_num() != 0) {
    set_req_num(from.req_num());
  }
  if (from.pnum() != 0) {
    set_pnum(from.pnum());
  }
  if (from.tnum() != 0) {
    set_tnum(from.tnum());
  }
  if (from.total_num() != 0) {
    set_total_num(from.total_num());
  }
  if (from.lz_total_floor() != 0) {
    set_lz_total_floor(from.lz_total_floor());
  }
  if (from.new_total_page() != 0) {
    set_new_total_page(from.new_total_page());
  }
}

void Page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  return true;
}

void Page::Swap(Page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Page::InternalSwap(Page* other) {
  using std::swap;
  swap(page_size_, other->page_size_);
  swap(offset_, other->offset_);
  swap(current_page_, other->current_page_);
  swap(total_count_, other->total_count_);
  swap(total_page_, other->total_page_);
  swap(has_more_, other->has_more_);
  swap(has_prev_, other->has_prev_);
  swap(cur_good_id_, other->cur_good_id_);
  swap(req_num_, other->req_num_);
  swap(pnum_, other->pnum_);
  swap(tnum_, other->tnum_);
  swap(total_num_, other->total_num_);
  swap(lz_total_floor_, other->lz_total_floor_);
  swap(new_total_page_, other->new_total_page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Page::GetMetadata() const {
  protobuf_Page_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Page_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
