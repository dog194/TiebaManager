// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Post.proto

#include "Post.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR Post_SubPost::Post_SubPost(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.sub_post_list_)*/ {},
      /*decltype(_impl_.pid_)*/ ::uint64_t{0u},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Post_SubPostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Post_SubPostDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Post_SubPostDefaultTypeInternal() {}
  union {
    Post_SubPost _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Post_SubPostDefaultTypeInternal _Post_SubPost_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Post_SignatureData_SignatureContent::Post_SignatureData_SignatureContent(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Post_SignatureData_SignatureContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Post_SignatureData_SignatureContentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Post_SignatureData_SignatureContentDefaultTypeInternal() {}
  union {
    Post_SignatureData_SignatureContent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Post_SignatureData_SignatureContentDefaultTypeInternal _Post_SignatureData_SignatureContent_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Post_SignatureData::Post_SignatureData(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.content_)*/ {},
      /*decltype(_impl_.fontkeyname_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.fontcolor_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.signature_id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Post_SignatureDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Post_SignatureDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Post_SignatureDataDefaultTypeInternal() {}
  union {
    Post_SignatureData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Post_SignatureDataDefaultTypeInternal _Post_SignatureData_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Post::Post(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.content_)*/ {},
      /*decltype(_impl_.title_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.sub_post_list_)*/ nullptr,
      /*decltype(_impl_.signature_)*/ nullptr,
      /*decltype(_impl_.agree_)*/ nullptr,
      /*decltype(_impl_.from_forum_)*/ nullptr,
      /*decltype(_impl_.id_)*/ ::int64_t{0},
      /*decltype(_impl_.floor_)*/ 0u,
      /*decltype(_impl_.time_)*/ 0u,
      /*decltype(_impl_.author_id_)*/ ::int64_t{0},
      /*decltype(_impl_.tid_)*/ ::int64_t{0},
      /*decltype(_impl_.sub_post_number_)*/ 0u,
    } {}
struct PostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostDefaultTypeInternal() {}
  union {
    Post _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostDefaultTypeInternal _Post_default_instance_;
static ::_pb::Metadata file_level_metadata_Post_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Post_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Post_2eproto = nullptr;
const ::uint32_t TableStruct_Post_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Post_SubPost, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Post_SubPost, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::Post_SubPost, _impl_.sub_post_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData_SignatureContent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData_SignatureContent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData_SignatureContent, _impl_.text_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData, _impl_.signature_id_),
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData, _impl_.fontkeyname_),
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData, _impl_.fontcolor_),
    PROTOBUF_FIELD_OFFSET(::Post_SignatureData, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::Post, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.floor_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.sub_post_number_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.author_id_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.sub_post_list_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.agree_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.from_forum_),
    PROTOBUF_FIELD_OFFSET(::Post, _impl_.tid_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Post_SubPost)},
        {10, -1, -1, sizeof(::Post_SignatureData_SignatureContent)},
        {20, -1, -1, sizeof(::Post_SignatureData)},
        {32, 52, -1, sizeof(::Post)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_Post_SubPost_default_instance_._instance,
    &::_Post_SignatureData_SignatureContent_default_instance_._instance,
    &::_Post_SignatureData_default_instance_._instance,
    &::_Post_default_instance_._instance,
};
const char descriptor_table_protodef_Post_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nPost.proto\032\017PbContent.proto\032\021SubPostLi"
    "st.proto\032\013Agree.proto\032\021SimpleForum.proto"
    "\"\217\004\n\004Post\022\n\n\002id\030\001 \001(\003\022\r\n\005title\030\002 \001(\t\022\r\n\005"
    "floor\030\003 \001(\r\022\014\n\004time\030\004 \001(\r\022\033\n\007content\030\005 \003"
    "(\0132\n.PbContent\022\027\n\017sub_post_number\030\r \001(\r\022"
    "\021\n\tauthor_id\030\023 \001(\003\022$\n\rsub_post_list\030\017 \001("
    "\0132\r.Post.SubPost\022&\n\tsignature\030\025 \001(\0132\023.Po"
    "st.SignatureData\022\025\n\005agree\030% \001(\0132\006.Agree\022"
    " \n\nfrom_forum\030& \001(\0132\014.SimpleForum\022\013\n\003tid"
    "\030. \001(\003\032;\n\007SubPost\022\013\n\003pid\030\001 \001(\004\022#\n\rsub_po"
    "st_list\030\002 \003(\0132\014.SubPostList\032\264\001\n\rSignatur"
    "eData\022\024\n\014signature_id\030\001 \001(\005\022\023\n\013fontKeyNa"
    "me\030\002 \001(\t\022\021\n\tfontColor\030\003 \001(\t\0225\n\007content\030\004"
    " \003(\0132$.Post.SignatureData.SignatureConte"
    "nt\032.\n\020SignatureContent\022\014\n\004type\030\001 \001(\005\022\014\n\004"
    "text\030\002 \001(\tb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Post_2eproto_deps[4] =
    {
        &::descriptor_table_Agree_2eproto,
        &::descriptor_table_PbContent_2eproto,
        &::descriptor_table_SimpleForum_2eproto,
        &::descriptor_table_SubPostList_2eproto,
};
static ::absl::once_flag descriptor_table_Post_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Post_2eproto = {
    false,
    false,
    618,
    descriptor_table_protodef_Post_2eproto,
    "Post.proto",
    &descriptor_table_Post_2eproto_once,
    descriptor_table_Post_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_Post_2eproto::offsets,
    file_level_metadata_Post_2eproto,
    file_level_enum_descriptors_Post_2eproto,
    file_level_service_descriptors_Post_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Post_2eproto_getter() {
  return &descriptor_table_Post_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Post_2eproto(&descriptor_table_Post_2eproto);
// ===================================================================

class Post_SubPost::_Internal {
 public:
};

void Post_SubPost::clear_sub_post_list() {
  _internal_mutable_sub_post_list()->Clear();
}
Post_SubPost::Post_SubPost(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Post.SubPost)
}
Post_SubPost::Post_SubPost(const Post_SubPost& from) : ::google::protobuf::Message() {
  Post_SubPost* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_post_list_){from._impl_.sub_post_list_},
      decltype(_impl_.pid_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;

  // @@protoc_insertion_point(copy_constructor:Post.SubPost)
}
inline void Post_SubPost::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sub_post_list_){arena},
      decltype(_impl_.pid_){::uint64_t{0u}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Post_SubPost::~Post_SubPost() {
  // @@protoc_insertion_point(destructor:Post.SubPost)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Post_SubPost::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sub_post_list_.~RepeatedPtrField();
}
void Post_SubPost::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Post_SubPost::Clear() {
// @@protoc_insertion_point(message_clear_start:Post.SubPost)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sub_post_list()->Clear();
  _impl_.pid_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Post_SubPost::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Post_SubPost::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Post_SubPost_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .SubPostList sub_post_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SubPost, _impl_.sub_post_list_)}},
    // uint64 pid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Post_SubPost, _impl_.pid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SubPost, _impl_.pid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 pid = 1;
    {PROTOBUF_FIELD_OFFSET(Post_SubPost, _impl_.pid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // repeated .SubPostList sub_post_list = 2;
    {PROTOBUF_FIELD_OFFSET(Post_SubPost, _impl_.sub_post_list_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SubPostList>()},
  }}, {{
  }},
};

::uint8_t* Post_SubPost::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Post.SubPost)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_pid(), target);
  }

  // repeated .SubPostList sub_post_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sub_post_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_sub_post_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post.SubPost)
  return target;
}

::size_t Post_SubPost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post.SubPost)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubPostList sub_post_list = 2;
  total_size += 1UL * this->_internal_sub_post_list_size();
  for (const auto& msg : this->_internal_sub_post_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // uint64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Post_SubPost::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Post_SubPost::MergeImpl
};
const ::google::protobuf::Message::ClassData*Post_SubPost::GetClassData() const { return &_class_data_; }


void Post_SubPost::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Post_SubPost*>(&to_msg);
  auto& from = static_cast<const Post_SubPost&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Post.SubPost)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sub_post_list()->MergeFrom(from._internal_sub_post_list());
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Post_SubPost::CopyFrom(const Post_SubPost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post.SubPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Post_SubPost::IsInitialized() const {
  return true;
}

void Post_SubPost::InternalSwap(Post_SubPost* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sub_post_list_.InternalSwap(&other->_impl_.sub_post_list_);
        swap(_impl_.pid_, other->_impl_.pid_);
}

::google::protobuf::Metadata Post_SubPost::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Post_2eproto_getter, &descriptor_table_Post_2eproto_once,
      file_level_metadata_Post_2eproto[0]);
}
// ===================================================================

class Post_SignatureData_SignatureContent::_Internal {
 public:
};

Post_SignatureData_SignatureContent::Post_SignatureData_SignatureContent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Post.SignatureData.SignatureContent)
}
Post_SignatureData_SignatureContent::Post_SignatureData_SignatureContent(const Post_SignatureData_SignatureContent& from) : ::google::protobuf::Message() {
  Post_SignatureData_SignatureContent* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){},
      decltype(_impl_.type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:Post.SignatureData.SignatureContent)
}
inline void Post_SignatureData_SignatureContent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){},
      decltype(_impl_.type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Post_SignatureData_SignatureContent::~Post_SignatureData_SignatureContent() {
  // @@protoc_insertion_point(destructor:Post.SignatureData.SignatureContent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Post_SignatureData_SignatureContent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}
void Post_SignatureData_SignatureContent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Post_SignatureData_SignatureContent::Clear() {
// @@protoc_insertion_point(message_clear_start:Post.SignatureData.SignatureContent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Post_SignatureData_SignatureContent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 48, 2> Post_SignatureData_SignatureContent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Post_SignatureData_SignatureContent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SignatureData_SignatureContent, _impl_.text_)}},
    // int32 type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Post_SignatureData_SignatureContent, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SignatureData_SignatureContent, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 type = 1;
    {PROTOBUF_FIELD_OFFSET(Post_SignatureData_SignatureContent, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(Post_SignatureData_SignatureContent, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\43\0\4\0\0\0\0\0"
    "Post.SignatureData.SignatureContent"
    "text"
  }},
};

::uint8_t* Post_SignatureData_SignatureContent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Post.SignatureData.SignatureContent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_type(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Post.SignatureData.SignatureContent.text");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post.SignatureData.SignatureContent)
  return target;
}

::size_t Post_SignatureData_SignatureContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post.SignatureData.SignatureContent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Post_SignatureData_SignatureContent::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Post_SignatureData_SignatureContent::MergeImpl
};
const ::google::protobuf::Message::ClassData*Post_SignatureData_SignatureContent::GetClassData() const { return &_class_data_; }


void Post_SignatureData_SignatureContent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Post_SignatureData_SignatureContent*>(&to_msg);
  auto& from = static_cast<const Post_SignatureData_SignatureContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Post.SignatureData.SignatureContent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Post_SignatureData_SignatureContent::CopyFrom(const Post_SignatureData_SignatureContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post.SignatureData.SignatureContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Post_SignatureData_SignatureContent::IsInitialized() const {
  return true;
}

void Post_SignatureData_SignatureContent::InternalSwap(Post_SignatureData_SignatureContent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
        swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata Post_SignatureData_SignatureContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Post_2eproto_getter, &descriptor_table_Post_2eproto_once,
      file_level_metadata_Post_2eproto[1]);
}
// ===================================================================

class Post_SignatureData::_Internal {
 public:
};

Post_SignatureData::Post_SignatureData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Post.SignatureData)
}
Post_SignatureData::Post_SignatureData(const Post_SignatureData& from) : ::google::protobuf::Message() {
  Post_SignatureData* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){from._impl_.content_},
      decltype(_impl_.fontkeyname_){},
      decltype(_impl_.fontcolor_){},
      decltype(_impl_.signature_id_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.fontkeyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fontkeyname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fontkeyname().empty()) {
    _this->_impl_.fontkeyname_.Set(from._internal_fontkeyname(), _this->GetArenaForAllocation());
  }
  _impl_.fontcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fontcolor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fontcolor().empty()) {
    _this->_impl_.fontcolor_.Set(from._internal_fontcolor(), _this->GetArenaForAllocation());
  }
  _this->_impl_.signature_id_ = from._impl_.signature_id_;

  // @@protoc_insertion_point(copy_constructor:Post.SignatureData)
}
inline void Post_SignatureData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){arena},
      decltype(_impl_.fontkeyname_){},
      decltype(_impl_.fontcolor_){},
      decltype(_impl_.signature_id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.fontkeyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fontkeyname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fontcolor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fontcolor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Post_SignatureData::~Post_SignatureData() {
  // @@protoc_insertion_point(destructor:Post.SignatureData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Post_SignatureData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedPtrField();
  _impl_.fontkeyname_.Destroy();
  _impl_.fontcolor_.Destroy();
}
void Post_SignatureData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Post_SignatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:Post.SignatureData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_content()->Clear();
  _impl_.fontkeyname_.ClearToEmpty();
  _impl_.fontcolor_.ClearToEmpty();
  _impl_.signature_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Post_SignatureData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 47, 2> Post_SignatureData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Post_SignatureData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .Post.SignatureData.SignatureContent content = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.content_)}},
    // int32 signature_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Post_SignatureData, _impl_.signature_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.signature_id_)}},
    // string fontKeyName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.fontkeyname_)}},
    // string fontColor = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.fontcolor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 signature_id = 1;
    {PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.signature_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string fontKeyName = 2;
    {PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.fontkeyname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string fontColor = 3;
    {PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.fontcolor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Post.SignatureData.SignatureContent content = 4;
    {PROTOBUF_FIELD_OFFSET(Post_SignatureData, _impl_.content_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Post_SignatureData_SignatureContent>()},
  }}, {{
    "\22\0\13\11\0\0\0\0"
    "Post.SignatureData"
    "fontKeyName"
    "fontColor"
  }},
};

::uint8_t* Post_SignatureData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Post.SignatureData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 signature_id = 1;
  if (this->_internal_signature_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_signature_id(), target);
  }

  // string fontKeyName = 2;
  if (!this->_internal_fontkeyname().empty()) {
    const std::string& _s = this->_internal_fontkeyname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Post.SignatureData.fontKeyName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string fontColor = 3;
  if (!this->_internal_fontcolor().empty()) {
    const std::string& _s = this->_internal_fontcolor();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Post.SignatureData.fontColor");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .Post.SignatureData.SignatureContent content = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post.SignatureData)
  return target;
}

::size_t Post_SignatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post.SignatureData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Post.SignatureData.SignatureContent content = 4;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->_internal_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string fontKeyName = 2;
  if (!this->_internal_fontkeyname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_fontkeyname());
  }

  // string fontColor = 3;
  if (!this->_internal_fontcolor().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_fontcolor());
  }

  // int32 signature_id = 1;
  if (this->_internal_signature_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_signature_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Post_SignatureData::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Post_SignatureData::MergeImpl
};
const ::google::protobuf::Message::ClassData*Post_SignatureData::GetClassData() const { return &_class_data_; }


void Post_SignatureData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Post_SignatureData*>(&to_msg);
  auto& from = static_cast<const Post_SignatureData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Post.SignatureData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content()->MergeFrom(from._internal_content());
  if (!from._internal_fontkeyname().empty()) {
    _this->_internal_set_fontkeyname(from._internal_fontkeyname());
  }
  if (!from._internal_fontcolor().empty()) {
    _this->_internal_set_fontcolor(from._internal_fontcolor());
  }
  if (from._internal_signature_id() != 0) {
    _this->_internal_set_signature_id(from._internal_signature_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Post_SignatureData::CopyFrom(const Post_SignatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post.SignatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Post_SignatureData::IsInitialized() const {
  return true;
}

void Post_SignatureData::InternalSwap(Post_SignatureData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fontkeyname_, lhs_arena,
                                       &other->_impl_.fontkeyname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fontcolor_, lhs_arena,
                                       &other->_impl_.fontcolor_, rhs_arena);
        swap(_impl_.signature_id_, other->_impl_.signature_id_);
}

::google::protobuf::Metadata Post_SignatureData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Post_2eproto_getter, &descriptor_table_Post_2eproto_once,
      file_level_metadata_Post_2eproto[2]);
}
// ===================================================================

class Post::_Internal {
 public:
  using HasBits = decltype(std::declval<Post>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Post, _impl_._has_bits_);
  static const ::Post_SubPost& sub_post_list(const Post* msg);
  static void set_has_sub_post_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Post_SignatureData& signature(const Post* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Agree& agree(const Post* msg);
  static void set_has_agree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SimpleForum& from_forum(const Post* msg);
  static void set_has_from_forum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Post_SubPost& Post::_Internal::sub_post_list(const Post* msg) {
  return *msg->_impl_.sub_post_list_;
}
const ::Post_SignatureData& Post::_Internal::signature(const Post* msg) {
  return *msg->_impl_.signature_;
}
const ::Agree& Post::_Internal::agree(const Post* msg) {
  return *msg->_impl_.agree_;
}
const ::SimpleForum& Post::_Internal::from_forum(const Post* msg) {
  return *msg->_impl_.from_forum_;
}
void Post::clear_content() {
  _internal_mutable_content()->Clear();
}
void Post::clear_agree() {
  if (_impl_.agree_ != nullptr) _impl_.agree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Post::clear_from_forum() {
  if (_impl_.from_forum_ != nullptr) _impl_.from_forum_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Post::Post(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Post)
}
Post::Post(const Post& from) : ::google::protobuf::Message() {
  Post* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){from._impl_.content_},
      decltype(_impl_.title_){},
      decltype(_impl_.sub_post_list_){nullptr},
      decltype(_impl_.signature_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.from_forum_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.floor_){},
      decltype(_impl_.time_){},
      decltype(_impl_.author_id_){},
      decltype(_impl_.tid_){},
      decltype(_impl_.sub_post_number_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.sub_post_list_ = new ::Post_SubPost(*from._impl_.sub_post_list_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.signature_ = new ::Post_SignatureData(*from._impl_.signature_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.agree_ = new ::Agree(*from._impl_.agree_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.from_forum_ = new ::SimpleForum(*from._impl_.from_forum_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sub_post_number_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sub_post_number_));

  // @@protoc_insertion_point(copy_constructor:Post)
}
inline void Post::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.content_){arena},
      decltype(_impl_.title_){},
      decltype(_impl_.sub_post_list_){nullptr},
      decltype(_impl_.signature_){nullptr},
      decltype(_impl_.agree_){nullptr},
      decltype(_impl_.from_forum_){nullptr},
      decltype(_impl_.id_){::int64_t{0}},
      decltype(_impl_.floor_){0u},
      decltype(_impl_.time_){0u},
      decltype(_impl_.author_id_){::int64_t{0}},
      decltype(_impl_.tid_){::int64_t{0}},
      decltype(_impl_.sub_post_number_){0u},
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Post::~Post() {
  // @@protoc_insertion_point(destructor:Post)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Post::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sub_post_list_;
  if (this != internal_default_instance()) delete _impl_.signature_;
  if (this != internal_default_instance()) delete _impl_.agree_;
  if (this != internal_default_instance()) delete _impl_.from_forum_;
}
void Post::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Post::Clear() {
// @@protoc_insertion_point(message_clear_start:Post)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_content()->Clear();
  _impl_.title_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.sub_post_list_ != nullptr);
      _impl_.sub_post_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.signature_ != nullptr);
      _impl_.signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.agree_ != nullptr);
      _impl_.agree_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.from_forum_ != nullptr);
      _impl_.from_forum_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sub_post_number_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sub_post_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Post::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 5, 26, 7> Post::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Post, _impl_._has_bits_),
    0, // no _extensions_
    46, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293636064,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Post_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Post, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.id_)}},
    // string title = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.title_)}},
    // uint32 floor = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Post, _impl_.floor_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.floor_)}},
    // uint32 time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Post, _impl_.time_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.time_)}},
    // repeated .PbContent content = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.content_)}},
    // .SimpleForum from_forum = 38;
    {::_pbi::TcParser::FastMtS2,
     {690, 3, 4, PROTOBUF_FIELD_OFFSET(Post, _impl_.from_forum_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 sub_post_number = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Post, _impl_.sub_post_number_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.sub_post_number_)}},
    // int64 tid = 46;
    {::_pbi::TcParser::FastV64S2,
     {752, 63, 0, PROTOBUF_FIELD_OFFSET(Post, _impl_.tid_)}},
    // .Post.SubPost sub_post_list = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 0, 1, PROTOBUF_FIELD_OFFSET(Post, _impl_.sub_post_list_)}},
  }}, {{
    37, 0, 1,
    65020, 9,
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string title = 2;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.title_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 floor = 3;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.floor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 time = 4;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .PbContent content = 5;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 sub_post_number = 13;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.sub_post_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .Post.SubPost sub_post_list = 15;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.sub_post_list_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 author_id = 19;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.author_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .Post.SignatureData signature = 21;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.signature_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Agree agree = 37;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.agree_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .SimpleForum from_forum = 38;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.from_forum_), _Internal::kHasBitsOffset + 3, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 tid = 46;
    {PROTOBUF_FIELD_OFFSET(Post, _impl_.tid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PbContent>()},
    {::_pbi::TcParser::GetTable<::Post_SubPost>()},
    {::_pbi::TcParser::GetTable<::Post_SignatureData>()},
    {::_pbi::TcParser::GetTable<::Agree>()},
    {::_pbi::TcParser::GetTable<::SimpleForum>()},
  }}, {{
    "\4\0\5\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "Post"
    "title"
  }},
};

::uint8_t* Post::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Post)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Post.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 floor = 3;
  if (this->_internal_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_floor(), target);
  }

  // uint32 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_time(), target);
  }

  // repeated .PbContent content = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_size()); i < n; i++) {
    const auto& repfield = this->_internal_content().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 sub_post_number = 13;
  if (this->_internal_sub_post_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_sub_post_number(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .Post.SubPost sub_post_list = 15;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::sub_post_list(this),
        _Internal::sub_post_list(this).GetCachedSize(), target, stream);
  }

  // int64 author_id = 19;
  if (this->_internal_author_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        19, this->_internal_author_id(), target);
  }

  // .Post.SignatureData signature = 21;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::signature(this),
        _Internal::signature(this).GetCachedSize(), target, stream);
  }

  // .Agree agree = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::agree(this),
        _Internal::agree(this).GetCachedSize(), target, stream);
  }

  // .SimpleForum from_forum = 38;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::from_forum(this),
        _Internal::from_forum(this).GetCachedSize(), target, stream);
  }

  // int64 tid = 46;
  if (this->_internal_tid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        46, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post)
  return target;
}

::size_t Post::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PbContent content = 5;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->_internal_content()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .Post.SubPost sub_post_list = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.sub_post_list_);
    }

    // .Post.SignatureData signature = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.signature_);
    }

    // .Agree agree = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.agree_);
    }

    // .SimpleForum from_forum = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.from_forum_);
    }

  }
  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // uint32 floor = 3;
  if (this->_internal_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_floor());
  }

  // uint32 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_time());
  }

  // int64 author_id = 19;
  if (this->_internal_author_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_author_id());
  }

  // int64 tid = 46;
  if (this->_internal_tid() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_tid());
  }

  // uint32 sub_post_number = 13;
  if (this->_internal_sub_post_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sub_post_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Post::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Post::MergeImpl
};
const ::google::protobuf::Message::ClassData*Post::GetClassData() const { return &_class_data_; }


void Post::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Post*>(&to_msg);
  auto& from = static_cast<const Post&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Post)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content()->MergeFrom(from._internal_content());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sub_post_list()->::Post_SubPost::MergeFrom(
          from._internal_sub_post_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_signature()->::Post_SignatureData::MergeFrom(
          from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_agree()->::Agree::MergeFrom(
          from._internal_agree());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_from_forum()->::SimpleForum::MergeFrom(
          from._internal_from_forum());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_floor() != 0) {
    _this->_internal_set_floor(from._internal_floor());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_author_id() != 0) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (from._internal_tid() != 0) {
    _this->_internal_set_tid(from._internal_tid());
  }
  if (from._internal_sub_post_number() != 0) {
    _this->_internal_set_sub_post_number(from._internal_sub_post_number());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Post::CopyFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Post::IsInitialized() const {
  return true;
}

void Post::InternalSwap(Post* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Post, _impl_.sub_post_number_)
      + sizeof(Post::_impl_.sub_post_number_)
      - PROTOBUF_FIELD_OFFSET(Post, _impl_.sub_post_list_)>(
          reinterpret_cast<char*>(&_impl_.sub_post_list_),
          reinterpret_cast<char*>(&other->_impl_.sub_post_list_));
}

::google::protobuf::Metadata Post::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Post_2eproto_getter, &descriptor_table_Post_2eproto_once,
      file_level_metadata_Post_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
