// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Post.proto

#include "Post.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class Post_SubPostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Post_SubPost>
      _instance;
} _Post_SubPost_default_instance_;
class Post_SignatureData_SignatureContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Post_SignatureData_SignatureContent>
      _instance;
} _Post_SignatureData_SignatureContent_default_instance_;
class Post_SignatureDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Post_SignatureData>
      _instance;
} _Post_SignatureData_default_instance_;
class PostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Post>
      _instance;
} _Post_default_instance_;
namespace protobuf_Post_2eproto {
void InitDefaultsPost_SubPostImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_SubPostList_2eproto::InitDefaultsSubPostList();
  {
    void* ptr = &::_Post_SubPost_default_instance_;
    new (ptr) ::Post_SubPost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Post_SubPost::InitAsDefaultInstance();
}

void InitDefaultsPost_SubPost() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPost_SubPostImpl);
}

void InitDefaultsPost_SignatureData_SignatureContentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_Post_SignatureData_SignatureContent_default_instance_;
    new (ptr) ::Post_SignatureData_SignatureContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Post_SignatureData_SignatureContent::InitAsDefaultInstance();
}

void InitDefaultsPost_SignatureData_SignatureContent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPost_SignatureData_SignatureContentImpl);
}

void InitDefaultsPost_SignatureDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Post_2eproto::InitDefaultsPost_SignatureData_SignatureContent();
  {
    void* ptr = &::_Post_SignatureData_default_instance_;
    new (ptr) ::Post_SignatureData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Post_SignatureData::InitAsDefaultInstance();
}

void InitDefaultsPost_SignatureData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPost_SignatureDataImpl);
}

void InitDefaultsPostImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_PbContent_2eproto::InitDefaultsPbContent();
  protobuf_Post_2eproto::InitDefaultsPost_SubPost();
  protobuf_Post_2eproto::InitDefaultsPost_SignatureData();
  protobuf_Agree_2eproto::InitDefaultsAgree();
  protobuf_SimpleForum_2eproto::InitDefaultsSimpleForum();
  {
    void* ptr = &::_Post_default_instance_;
    new (ptr) ::Post();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Post::InitAsDefaultInstance();
}

void InitDefaultsPost() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPostImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SubPost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SubPost, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SubPost, sub_post_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData_SignatureContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData_SignatureContent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData_SignatureContent, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData, signature_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData, fontkeyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData, fontcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post_SignatureData, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, sub_post_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, author_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, sub_post_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, from_forum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Post, tid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Post_SubPost)},
  { 7, -1, sizeof(::Post_SignatureData_SignatureContent)},
  { 14, -1, sizeof(::Post_SignatureData)},
  { 23, -1, sizeof(::Post)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Post_SubPost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Post_SignatureData_SignatureContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Post_SignatureData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Post_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Post.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nPost.proto\032\017PbContent.proto\032\021SubPostLi"
      "st.proto\032\013Agree.proto\032\021SimpleForum.proto"
      "\"\217\004\n\004Post\022\n\n\002id\030\001 \001(\003\022\r\n\005title\030\002 \001(\t\022\r\n\005"
      "floor\030\003 \001(\r\022\014\n\004time\030\004 \001(\r\022\033\n\007content\030\005 \003"
      "(\0132\n.PbContent\022\027\n\017sub_post_number\030\r \001(\r\022"
      "\021\n\tauthor_id\030\023 \001(\003\022$\n\rsub_post_list\030\017 \001("
      "\0132\r.Post.SubPost\022&\n\tsignature\030\025 \001(\0132\023.Po"
      "st.SignatureData\022\025\n\005agree\030% \001(\0132\006.Agree\022"
      " \n\nfrom_forum\030& \001(\0132\014.SimpleForum\022\013\n\003tid"
      "\030. \001(\003\032;\n\007SubPost\022\013\n\003pid\030\001 \001(\004\022#\n\rsub_po"
      "st_list\030\002 \001(\0132\014.SubPostList\032\264\001\n\rSignatur"
      "eData\022\024\n\014signature_id\030\001 \001(\005\022\023\n\013fontKeyNa"
      "me\030\002 \001(\t\022\021\n\tfontColor\030\003 \001(\t\0225\n\007content\030\004"
      " \003(\0132$.Post.SignatureData.SignatureConte"
      "nt\032.\n\020SignatureContent\022\014\n\004type\030\001 \001(\005\022\014\n\004"
      "text\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Post.proto", &protobuf_RegisterTypes);
  ::protobuf_PbContent_2eproto::AddDescriptors();
  ::protobuf_SubPostList_2eproto::AddDescriptors();
  ::protobuf_Agree_2eproto::AddDescriptors();
  ::protobuf_SimpleForum_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Post_2eproto

// ===================================================================

void Post_SubPost::InitAsDefaultInstance() {
  ::_Post_SubPost_default_instance_._instance.get_mutable()->sub_post_list_ = const_cast< ::SubPostList*>(
      ::SubPostList::internal_default_instance());
}
void Post_SubPost::clear_sub_post_list() {
  if (GetArenaNoVirtual() == NULL && sub_post_list_ != NULL) {
    delete sub_post_list_;
  }
  sub_post_list_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Post_SubPost::kPidFieldNumber;
const int Post_SubPost::kSubPostListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Post_SubPost::Post_SubPost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Post_2eproto::InitDefaultsPost_SubPost();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Post.SubPost)
}
Post_SubPost::Post_SubPost(const Post_SubPost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sub_post_list()) {
    sub_post_list_ = new ::SubPostList(*from.sub_post_list_);
  } else {
    sub_post_list_ = NULL;
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:Post.SubPost)
}

void Post_SubPost::SharedCtor() {
  ::memset(&sub_post_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&sub_post_list_)) + sizeof(pid_));
  _cached_size_ = 0;
}

Post_SubPost::~Post_SubPost() {
  // @@protoc_insertion_point(destructor:Post.SubPost)
  SharedDtor();
}

void Post_SubPost::SharedDtor() {
  if (this != internal_default_instance()) delete sub_post_list_;
}

void Post_SubPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post_SubPost::descriptor() {
  ::protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Post_SubPost& Post_SubPost::default_instance() {
  ::protobuf_Post_2eproto::InitDefaultsPost_SubPost();
  return *internal_default_instance();
}

Post_SubPost* Post_SubPost::New(::google::protobuf::Arena* arena) const {
  Post_SubPost* n = new Post_SubPost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Post_SubPost::Clear() {
// @@protoc_insertion_point(message_clear_start:Post.SubPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sub_post_list_ != NULL) {
    delete sub_post_list_;
  }
  sub_post_list_ = NULL;
  pid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Post_SubPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Post.SubPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SubPostList sub_post_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sub_post_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Post.SubPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Post.SubPost)
  return false;
#undef DO_
}

void Post_SubPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Post.SubPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  // .SubPostList sub_post_list = 2;
  if (this->has_sub_post_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sub_post_list_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Post.SubPost)
}

::google::protobuf::uint8* Post_SubPost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Post.SubPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pid = 1;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  // .SubPostList sub_post_list = 2;
  if (this->has_sub_post_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sub_post_list_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post.SubPost)
  return target;
}

size_t Post_SubPost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post.SubPost)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .SubPostList sub_post_list = 2;
  if (this->has_sub_post_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sub_post_list_);
  }

  // uint64 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post_SubPost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Post.SubPost)
  GOOGLE_DCHECK_NE(&from, this);
  const Post_SubPost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Post_SubPost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Post.SubPost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Post.SubPost)
    MergeFrom(*source);
  }
}

void Post_SubPost::MergeFrom(const Post_SubPost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Post.SubPost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sub_post_list()) {
    mutable_sub_post_list()->::SubPostList::MergeFrom(from.sub_post_list());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void Post_SubPost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Post.SubPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post_SubPost::CopyFrom(const Post_SubPost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post.SubPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post_SubPost::IsInitialized() const {
  return true;
}

void Post_SubPost::Swap(Post_SubPost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Post_SubPost::InternalSwap(Post_SubPost* other) {
  using std::swap;
  swap(sub_post_list_, other->sub_post_list_);
  swap(pid_, other->pid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Post_SubPost::GetMetadata() const {
  protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Post_SignatureData_SignatureContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Post_SignatureData_SignatureContent::kTypeFieldNumber;
const int Post_SignatureData_SignatureContent::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Post_SignatureData_SignatureContent::Post_SignatureData_SignatureContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Post_2eproto::InitDefaultsPost_SignatureData_SignatureContent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Post.SignatureData.SignatureContent)
}
Post_SignatureData_SignatureContent::Post_SignatureData_SignatureContent(const Post_SignatureData_SignatureContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Post.SignatureData.SignatureContent)
}

void Post_SignatureData_SignatureContent::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Post_SignatureData_SignatureContent::~Post_SignatureData_SignatureContent() {
  // @@protoc_insertion_point(destructor:Post.SignatureData.SignatureContent)
  SharedDtor();
}

void Post_SignatureData_SignatureContent::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Post_SignatureData_SignatureContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post_SignatureData_SignatureContent::descriptor() {
  ::protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Post_SignatureData_SignatureContent& Post_SignatureData_SignatureContent::default_instance() {
  ::protobuf_Post_2eproto::InitDefaultsPost_SignatureData_SignatureContent();
  return *internal_default_instance();
}

Post_SignatureData_SignatureContent* Post_SignatureData_SignatureContent::New(::google::protobuf::Arena* arena) const {
  Post_SignatureData_SignatureContent* n = new Post_SignatureData_SignatureContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Post_SignatureData_SignatureContent::Clear() {
// @@protoc_insertion_point(message_clear_start:Post.SignatureData.SignatureContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Post_SignatureData_SignatureContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Post.SignatureData.SignatureContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.SignatureData.SignatureContent.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Post.SignatureData.SignatureContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Post.SignatureData.SignatureContent)
  return false;
#undef DO_
}

void Post_SignatureData_SignatureContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Post.SignatureData.SignatureContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.SignatureData.SignatureContent.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Post.SignatureData.SignatureContent)
}

::google::protobuf::uint8* Post_SignatureData_SignatureContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Post.SignatureData.SignatureContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.SignatureData.SignatureContent.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post.SignatureData.SignatureContent)
  return target;
}

size_t Post_SignatureData_SignatureContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post.SignatureData.SignatureContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post_SignatureData_SignatureContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Post.SignatureData.SignatureContent)
  GOOGLE_DCHECK_NE(&from, this);
  const Post_SignatureData_SignatureContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Post_SignatureData_SignatureContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Post.SignatureData.SignatureContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Post.SignatureData.SignatureContent)
    MergeFrom(*source);
  }
}

void Post_SignatureData_SignatureContent::MergeFrom(const Post_SignatureData_SignatureContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Post.SignatureData.SignatureContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Post_SignatureData_SignatureContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Post.SignatureData.SignatureContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post_SignatureData_SignatureContent::CopyFrom(const Post_SignatureData_SignatureContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post.SignatureData.SignatureContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post_SignatureData_SignatureContent::IsInitialized() const {
  return true;
}

void Post_SignatureData_SignatureContent::Swap(Post_SignatureData_SignatureContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Post_SignatureData_SignatureContent::InternalSwap(Post_SignatureData_SignatureContent* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Post_SignatureData_SignatureContent::GetMetadata() const {
  protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Post_SignatureData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Post_SignatureData::kSignatureIdFieldNumber;
const int Post_SignatureData::kFontKeyNameFieldNumber;
const int Post_SignatureData::kFontColorFieldNumber;
const int Post_SignatureData::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Post_SignatureData::Post_SignatureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Post_2eproto::InitDefaultsPost_SignatureData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Post.SignatureData)
}
Post_SignatureData::Post_SignatureData(const Post_SignatureData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      content_(from.content_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fontkeyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fontkeyname().size() > 0) {
    fontkeyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fontkeyname_);
  }
  fontcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fontcolor().size() > 0) {
    fontcolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fontcolor_);
  }
  signature_id_ = from.signature_id_;
  // @@protoc_insertion_point(copy_constructor:Post.SignatureData)
}

void Post_SignatureData::SharedCtor() {
  fontkeyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_id_ = 0;
  _cached_size_ = 0;
}

Post_SignatureData::~Post_SignatureData() {
  // @@protoc_insertion_point(destructor:Post.SignatureData)
  SharedDtor();
}

void Post_SignatureData::SharedDtor() {
  fontkeyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Post_SignatureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post_SignatureData::descriptor() {
  ::protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Post_SignatureData& Post_SignatureData::default_instance() {
  ::protobuf_Post_2eproto::InitDefaultsPost_SignatureData();
  return *internal_default_instance();
}

Post_SignatureData* Post_SignatureData::New(::google::protobuf::Arena* arena) const {
  Post_SignatureData* n = new Post_SignatureData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Post_SignatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:Post.SignatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  fontkeyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_id_ = 0;
  _internal_metadata_.Clear();
}

bool Post_SignatureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Post.SignatureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 signature_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fontKeyName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontkeyname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fontkeyname().data(), static_cast<int>(this->fontkeyname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.SignatureData.fontKeyName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fontColor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontcolor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fontcolor().data(), static_cast<int>(this->fontcolor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.SignatureData.fontColor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Post.SignatureData.SignatureContent content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Post.SignatureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Post.SignatureData)
  return false;
#undef DO_
}

void Post_SignatureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Post.SignatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 signature_id = 1;
  if (this->signature_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signature_id(), output);
  }

  // string fontKeyName = 2;
  if (this->fontkeyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fontkeyname().data(), static_cast<int>(this->fontkeyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.SignatureData.fontKeyName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fontkeyname(), output);
  }

  // string fontColor = 3;
  if (this->fontcolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fontcolor().data(), static_cast<int>(this->fontcolor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.SignatureData.fontColor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fontcolor(), output);
  }

  // repeated .Post.SignatureData.SignatureContent content = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->content(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Post.SignatureData)
}

::google::protobuf::uint8* Post_SignatureData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Post.SignatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 signature_id = 1;
  if (this->signature_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signature_id(), target);
  }

  // string fontKeyName = 2;
  if (this->fontkeyname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fontkeyname().data(), static_cast<int>(this->fontkeyname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.SignatureData.fontKeyName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fontkeyname(), target);
  }

  // string fontColor = 3;
  if (this->fontcolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fontcolor().data(), static_cast<int>(this->fontcolor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.SignatureData.fontColor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fontcolor(), target);
  }

  // repeated .Post.SignatureData.SignatureContent content = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->content(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post.SignatureData)
  return target;
}

size_t Post_SignatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post.SignatureData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Post.SignatureData.SignatureContent content = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->content_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content(static_cast<int>(i)));
    }
  }

  // string fontKeyName = 2;
  if (this->fontkeyname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fontkeyname());
  }

  // string fontColor = 3;
  if (this->fontcolor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fontcolor());
  }

  // int32 signature_id = 1;
  if (this->signature_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signature_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post_SignatureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Post.SignatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const Post_SignatureData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Post_SignatureData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Post.SignatureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Post.SignatureData)
    MergeFrom(*source);
  }
}

void Post_SignatureData::MergeFrom(const Post_SignatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Post.SignatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  if (from.fontkeyname().size() > 0) {

    fontkeyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fontkeyname_);
  }
  if (from.fontcolor().size() > 0) {

    fontcolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fontcolor_);
  }
  if (from.signature_id() != 0) {
    set_signature_id(from.signature_id());
  }
}

void Post_SignatureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Post.SignatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post_SignatureData::CopyFrom(const Post_SignatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post.SignatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post_SignatureData::IsInitialized() const {
  return true;
}

void Post_SignatureData::Swap(Post_SignatureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Post_SignatureData::InternalSwap(Post_SignatureData* other) {
  using std::swap;
  content_.InternalSwap(&other->content_);
  fontkeyname_.Swap(&other->fontkeyname_);
  fontcolor_.Swap(&other->fontcolor_);
  swap(signature_id_, other->signature_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Post_SignatureData::GetMetadata() const {
  protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Post::InitAsDefaultInstance() {
  ::_Post_default_instance_._instance.get_mutable()->sub_post_list_ = const_cast< ::Post_SubPost*>(
      ::Post_SubPost::internal_default_instance());
  ::_Post_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Post_SignatureData*>(
      ::Post_SignatureData::internal_default_instance());
  ::_Post_default_instance_._instance.get_mutable()->agree_ = const_cast< ::Agree*>(
      ::Agree::internal_default_instance());
  ::_Post_default_instance_._instance.get_mutable()->from_forum_ = const_cast< ::SimpleForum*>(
      ::SimpleForum::internal_default_instance());
}
void Post::clear_content() {
  content_.Clear();
}
void Post::clear_agree() {
  if (GetArenaNoVirtual() == NULL && agree_ != NULL) {
    delete agree_;
  }
  agree_ = NULL;
}
void Post::clear_from_forum() {
  if (GetArenaNoVirtual() == NULL && from_forum_ != NULL) {
    delete from_forum_;
  }
  from_forum_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Post::kIdFieldNumber;
const int Post::kTitleFieldNumber;
const int Post::kFloorFieldNumber;
const int Post::kTimeFieldNumber;
const int Post::kContentFieldNumber;
const int Post::kSubPostNumberFieldNumber;
const int Post::kAuthorIdFieldNumber;
const int Post::kSubPostListFieldNumber;
const int Post::kSignatureFieldNumber;
const int Post::kAgreeFieldNumber;
const int Post::kFromForumFieldNumber;
const int Post::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Post::Post()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Post_2eproto::InitDefaultsPost();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Post)
}
Post::Post(const Post& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      content_(from.content_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_sub_post_list()) {
    sub_post_list_ = new ::Post_SubPost(*from.sub_post_list_);
  } else {
    sub_post_list_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::Post_SignatureData(*from.signature_);
  } else {
    signature_ = NULL;
  }
  if (from.has_agree()) {
    agree_ = new ::Agree(*from.agree_);
  } else {
    agree_ = NULL;
  }
  if (from.has_from_forum()) {
    from_forum_ = new ::SimpleForum(*from.from_forum_);
  } else {
    from_forum_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:Post)
}

void Post::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sub_post_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&sub_post_list_)) + sizeof(tid_));
  _cached_size_ = 0;
}

Post::~Post() {
  // @@protoc_insertion_point(destructor:Post)
  SharedDtor();
}

void Post::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sub_post_list_;
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete agree_;
  if (this != internal_default_instance()) delete from_forum_;
}

void Post::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post::descriptor() {
  ::protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Post& Post::default_instance() {
  ::protobuf_Post_2eproto::InitDefaultsPost();
  return *internal_default_instance();
}

Post* Post::New(::google::protobuf::Arena* arena) const {
  Post* n = new Post;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Post::Clear() {
// @@protoc_insertion_point(message_clear_start:Post)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sub_post_list_ != NULL) {
    delete sub_post_list_;
  }
  sub_post_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
  if (GetArenaNoVirtual() == NULL && agree_ != NULL) {
    delete agree_;
  }
  agree_ = NULL;
  if (GetArenaNoVirtual() == NULL && from_forum_ != NULL) {
    delete from_forum_;
  }
  from_forum_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(tid_));
  _internal_metadata_.Clear();
}

bool Post::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Post)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 floor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PbContent content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sub_post_number = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_post_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Post.SubPost sub_post_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sub_post_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 author_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &author_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Post.SignatureData signature = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Agree agree = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_agree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SimpleForum from_forum = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_forum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tid = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Post)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Post)
  return false;
#undef DO_
}

void Post::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Post)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // uint32 floor = 3;
  if (this->floor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->floor(), output);
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // repeated .PbContent content = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->content(static_cast<int>(i)), output);
  }

  // uint32 sub_post_number = 13;
  if (this->sub_post_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sub_post_number(), output);
  }

  // .Post.SubPost sub_post_list = 15;
  if (this->has_sub_post_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->sub_post_list_, output);
  }

  // int64 author_id = 19;
  if (this->author_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->author_id(), output);
  }

  // .Post.SignatureData signature = 21;
  if (this->has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->signature_, output);
  }

  // .Agree agree = 37;
  if (this->has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->agree_, output);
  }

  // .SimpleForum from_forum = 38;
  if (this->has_from_forum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->from_forum_, output);
  }

  // int64 tid = 46;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->tid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Post)
}

::google::protobuf::uint8* Post::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Post)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // uint32 floor = 3;
  if (this->floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->floor(), target);
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // repeated .PbContent content = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->content(static_cast<int>(i)), deterministic, target);
  }

  // uint32 sub_post_number = 13;
  if (this->sub_post_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sub_post_number(), target);
  }

  // .Post.SubPost sub_post_list = 15;
  if (this->has_sub_post_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->sub_post_list_, deterministic, target);
  }

  // int64 author_id = 19;
  if (this->author_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->author_id(), target);
  }

  // .Post.SignatureData signature = 21;
  if (this->has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *this->signature_, deterministic, target);
  }

  // .Agree agree = 37;
  if (this->has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, *this->agree_, deterministic, target);
  }

  // .SimpleForum from_forum = 38;
  if (this->has_from_forum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, *this->from_forum_, deterministic, target);
  }

  // int64 tid = 46;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->tid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Post)
  return target;
}

size_t Post::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PbContent content = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->content_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content(static_cast<int>(i)));
    }
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // .Post.SubPost sub_post_list = 15;
  if (this->has_sub_post_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sub_post_list_);
  }

  // .Post.SignatureData signature = 21;
  if (this->has_signature()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->signature_);
  }

  // .Agree agree = 37;
  if (this->has_agree()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->agree_);
  }

  // .SimpleForum from_forum = 38;
  if (this->has_from_forum()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->from_forum_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // uint32 floor = 3;
  if (this->floor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor());
  }

  // uint32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  // uint32 sub_post_number = 13;
  if (this->sub_post_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sub_post_number());
  }

  // int64 author_id = 19;
  if (this->author_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->author_id());
  }

  // int64 tid = 46;
  if (this->tid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Post)
  GOOGLE_DCHECK_NE(&from, this);
  const Post* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Post>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Post)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Post)
    MergeFrom(*source);
  }
}

void Post::MergeFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Post)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_sub_post_list()) {
    mutable_sub_post_list()->::Post_SubPost::MergeFrom(from.sub_post_list());
  }
  if (from.has_signature()) {
    mutable_signature()->::Post_SignatureData::MergeFrom(from.signature());
  }
  if (from.has_agree()) {
    mutable_agree()->::Agree::MergeFrom(from.agree());
  }
  if (from.has_from_forum()) {
    mutable_from_forum()->::SimpleForum::MergeFrom(from.from_forum());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.floor() != 0) {
    set_floor(from.floor());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.sub_post_number() != 0) {
    set_sub_post_number(from.sub_post_number());
  }
  if (from.author_id() != 0) {
    set_author_id(from.author_id());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
}

void Post::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post::CopyFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post::IsInitialized() const {
  return true;
}

void Post::Swap(Post* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Post::InternalSwap(Post* other) {
  using std::swap;
  content_.InternalSwap(&other->content_);
  title_.Swap(&other->title_);
  swap(sub_post_list_, other->sub_post_list_);
  swap(signature_, other->signature_);
  swap(agree_, other->agree_);
  swap(from_forum_, other->from_forum_);
  swap(id_, other->id_);
  swap(floor_, other->floor_);
  swap(time_, other->time_);
  swap(sub_post_number_, other->sub_post_number_);
  swap(author_id_, other->author_id_);
  swap(tid_, other->tid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Post::GetMetadata() const {
  protobuf_Post_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Post_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
