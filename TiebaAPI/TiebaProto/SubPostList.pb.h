// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubPostList.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SubPostList_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_SubPostList_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "PbContent.pb.h"
#include "User.pb.h"
#include "Agree.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_SubPostList_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_SubPostList_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_SubPostList_2eproto;
class SubPostList;
struct SubPostListDefaultTypeInternal;
extern SubPostListDefaultTypeInternal _SubPostList_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class SubPostList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubPostList) */ {
 public:
  inline SubPostList() : SubPostList(nullptr) {}
  ~SubPostList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubPostList(::google::protobuf::internal::ConstantInitialized);

  SubPostList(const SubPostList& from);
  SubPostList(SubPostList&& from) noexcept
    : SubPostList() {
    *this = ::std::move(from);
  }

  inline SubPostList& operator=(const SubPostList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubPostList& operator=(SubPostList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubPostList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubPostList* internal_default_instance() {
    return reinterpret_cast<const SubPostList*>(
               &_SubPostList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubPostList& a, SubPostList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubPostList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubPostList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubPostList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubPostList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubPostList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubPostList& from) {
    SubPostList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubPostList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SubPostList";
  }
  protected:
  explicit SubPostList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTitleFieldNumber = 5,
    kAuthorFieldNumber = 7,
    kAgreeFieldNumber = 9,
    kIdFieldNumber = 1,
    kAuthorIdFieldNumber = 4,
    kTimeFieldNumber = 3,
    kFloorFieldNumber = 6,
    kIsGiftpostFieldNumber = 8,
  };
  // repeated .PbContent content = 2;
  int content_size() const;
  private:
  int _internal_content_size() const;

  public:
  void clear_content() ;
  ::PbContent* mutable_content(int index);
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_content();
  private:
  const ::google::protobuf::RepeatedPtrField<::PbContent>& _internal_content() const;
  ::google::protobuf::RepeatedPtrField<::PbContent>* _internal_mutable_content();
  public:
  const ::PbContent& content(int index) const;
  ::PbContent* add_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      content() const;
  // string title = 5;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .User author = 7;
  bool has_author() const;
  void clear_author() ;
  const ::User& author() const;
  PROTOBUF_NODISCARD ::User* release_author();
  ::User* mutable_author();
  void set_allocated_author(::User* value);
  void unsafe_arena_set_allocated_author(::User* value);
  ::User* unsafe_arena_release_author();

  private:
  const ::User& _internal_author() const;
  ::User* _internal_mutable_author();

  public:
  // .Agree agree = 9;
  bool has_agree() const;
  void clear_agree() ;
  const ::Agree& agree() const;
  PROTOBUF_NODISCARD ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* value);
  void unsafe_arena_set_allocated_agree(::Agree* value);
  ::Agree* unsafe_arena_release_agree();

  private:
  const ::Agree& _internal_agree() const;
  ::Agree* _internal_mutable_agree();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 author_id = 4;
  void clear_author_id() ;
  ::int64_t author_id() const;
  void set_author_id(::int64_t value);

  private:
  ::int64_t _internal_author_id() const;
  void _internal_set_author_id(::int64_t value);

  public:
  // uint32 time = 3;
  void clear_time() ;
  ::uint32_t time() const;
  void set_time(::uint32_t value);

  private:
  ::uint32_t _internal_time() const;
  void _internal_set_time(::uint32_t value);

  public:
  // uint32 floor = 6;
  void clear_floor() ;
  ::uint32_t floor() const;
  void set_floor(::uint32_t value);

  private:
  ::uint32_t _internal_floor() const;
  void _internal_set_floor(::uint32_t value);

  public:
  // int32 is_giftpost = 8;
  void clear_is_giftpost() ;
  ::int32_t is_giftpost() const;
  void set_is_giftpost(::int32_t value);

  private:
  ::int32_t _internal_is_giftpost() const;
  void _internal_set_is_giftpost(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:SubPostList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 3, 33, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::PbContent > content_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::User* author_;
    ::Agree* agree_;
    ::int64_t id_;
    ::int64_t author_id_;
    ::uint32_t time_;
    ::uint32_t floor_;
    ::int32_t is_giftpost_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SubPostList_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubPostList

// int64 id = 1;
inline void SubPostList::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SubPostList::id() const {
  // @@protoc_insertion_point(field_get:SubPostList.id)
  return _internal_id();
}
inline void SubPostList::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SubPostList.id)
}
inline ::int64_t SubPostList::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SubPostList::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated .PbContent content = 2;
inline int SubPostList::_internal_content_size() const {
  return _internal_content().size();
}
inline int SubPostList::content_size() const {
  return _internal_content_size();
}
inline ::PbContent* SubPostList::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:SubPostList.content)
  return _internal_mutable_content()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
SubPostList::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:SubPostList.content)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_content();
}
inline const ::PbContent& SubPostList::content(int index) const {
  // @@protoc_insertion_point(field_get:SubPostList.content)
    return _internal_content().Get(index);
}
inline ::PbContent* SubPostList::add_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PbContent* _add = _internal_mutable_content()->Add();
  // @@protoc_insertion_point(field_add:SubPostList.content)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
SubPostList::content() const {
  // @@protoc_insertion_point(field_list:SubPostList.content)
  return _internal_content();
}
inline const ::google::protobuf::RepeatedPtrField<::PbContent>&
SubPostList::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_;
}
inline ::google::protobuf::RepeatedPtrField<::PbContent>*
SubPostList::_internal_mutable_content() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.content_;
}

// uint32 time = 3;
inline void SubPostList::clear_time() {
  _impl_.time_ = 0u;
}
inline ::uint32_t SubPostList::time() const {
  // @@protoc_insertion_point(field_get:SubPostList.time)
  return _internal_time();
}
inline void SubPostList::set_time(::uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:SubPostList.time)
}
inline ::uint32_t SubPostList::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void SubPostList::_internal_set_time(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// int64 author_id = 4;
inline void SubPostList::clear_author_id() {
  _impl_.author_id_ = ::int64_t{0};
}
inline ::int64_t SubPostList::author_id() const {
  // @@protoc_insertion_point(field_get:SubPostList.author_id)
  return _internal_author_id();
}
inline void SubPostList::set_author_id(::int64_t value) {
  _internal_set_author_id(value);
  // @@protoc_insertion_point(field_set:SubPostList.author_id)
}
inline ::int64_t SubPostList::_internal_author_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_id_;
}
inline void SubPostList::_internal_set_author_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_id_ = value;
}

// string title = 5;
inline void SubPostList::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SubPostList::title() const {
  // @@protoc_insertion_point(field_get:SubPostList.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubPostList::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SubPostList.title)
}
inline std::string* SubPostList::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:SubPostList.title)
  return _s;
}
inline const std::string& SubPostList::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void SubPostList::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SubPostList::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* SubPostList::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubPostList.title)
  return _impl_.title_.Release();
}
inline void SubPostList::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubPostList.title)
}

// uint32 floor = 6;
inline void SubPostList::clear_floor() {
  _impl_.floor_ = 0u;
}
inline ::uint32_t SubPostList::floor() const {
  // @@protoc_insertion_point(field_get:SubPostList.floor)
  return _internal_floor();
}
inline void SubPostList::set_floor(::uint32_t value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:SubPostList.floor)
}
inline ::uint32_t SubPostList::_internal_floor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.floor_;
}
inline void SubPostList::_internal_set_floor(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.floor_ = value;
}

// .User author = 7;
inline bool SubPostList::has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.author_ != nullptr);
  return value;
}
inline const ::User& SubPostList::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::User* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::User&>(::_User_default_instance_);
}
inline const ::User& SubPostList::author() const {
  // @@protoc_insertion_point(field_get:SubPostList.author)
  return _internal_author();
}
inline void SubPostList::unsafe_arena_set_allocated_author(::User* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = reinterpret_cast<::User*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubPostList.author)
}
inline ::User* SubPostList::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User* released = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::User* SubPostList::unsafe_arena_release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubPostList.author)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::User* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::User* SubPostList::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::User>(GetArenaForAllocation());
    _impl_.author_ = reinterpret_cast<::User*>(p);
  }
  return _impl_.author_;
}
inline ::User* SubPostList::mutable_author() {
  ::User* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:SubPostList.author)
  return _msg;
}
inline void SubPostList::set_allocated_author(::User* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.author_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.author_ = reinterpret_cast<::User*>(value);
  // @@protoc_insertion_point(field_set_allocated:SubPostList.author)
}

// int32 is_giftpost = 8;
inline void SubPostList::clear_is_giftpost() {
  _impl_.is_giftpost_ = 0;
}
inline ::int32_t SubPostList::is_giftpost() const {
  // @@protoc_insertion_point(field_get:SubPostList.is_giftpost)
  return _internal_is_giftpost();
}
inline void SubPostList::set_is_giftpost(::int32_t value) {
  _internal_set_is_giftpost(value);
  // @@protoc_insertion_point(field_set:SubPostList.is_giftpost)
}
inline ::int32_t SubPostList::_internal_is_giftpost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_giftpost_;
}
inline void SubPostList::_internal_set_is_giftpost(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_giftpost_ = value;
}

// .Agree agree = 9;
inline bool SubPostList::has_agree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.agree_ != nullptr);
  return value;
}
inline const ::Agree& SubPostList::_internal_agree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Agree* p = _impl_.agree_;
  return p != nullptr ? *p : reinterpret_cast<const ::Agree&>(::_Agree_default_instance_);
}
inline const ::Agree& SubPostList::agree() const {
  // @@protoc_insertion_point(field_get:SubPostList.agree)
  return _internal_agree();
}
inline void SubPostList::unsafe_arena_set_allocated_agree(::Agree* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }
  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SubPostList.agree)
}
inline ::Agree* SubPostList::release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Agree* released = _impl_.agree_;
  _impl_.agree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Agree* SubPostList::unsafe_arena_release_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubPostList.agree)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Agree* temp = _impl_.agree_;
  _impl_.agree_ = nullptr;
  return temp;
}
inline ::Agree* SubPostList::_internal_mutable_agree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.agree_ == nullptr) {
    auto* p = CreateMaybeMessage<::Agree>(GetArenaForAllocation());
    _impl_.agree_ = reinterpret_cast<::Agree*>(p);
  }
  return _impl_.agree_;
}
inline ::Agree* SubPostList::mutable_agree() {
  ::Agree* _msg = _internal_mutable_agree();
  // @@protoc_insertion_point(field_mutable:SubPostList.agree)
  return _msg;
}
inline void SubPostList::set_allocated_agree(::Agree* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.agree_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.agree_ = reinterpret_cast<::Agree*>(value);
  // @@protoc_insertion_point(field_set_allocated:SubPostList.agree)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_SubPostList_2eproto_2epb_2eh
