// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SubPostList.proto
#define PROTOBUF_USE_DLLS
#ifndef PROTOBUF_SubPostList_2eproto__INCLUDED
#define PROTOBUF_SubPostList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PbContent.pb.h"
#include "User.pb.h"
#include "Agree.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_SubPostList_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSubPostListImpl();
void InitDefaultsSubPostList();
inline void InitDefaults() {
  InitDefaultsSubPostList();
}
}  // namespace protobuf_SubPostList_2eproto
class SubPostList;
class SubPostListDefaultTypeInternal;
extern SubPostListDefaultTypeInternal _SubPostList_default_instance_;

// ===================================================================

class SubPostList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubPostList) */ {
 public:
  SubPostList();
  virtual ~SubPostList();

  SubPostList(const SubPostList& from);

  inline SubPostList& operator=(const SubPostList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubPostList(SubPostList&& from) noexcept
    : SubPostList() {
    *this = ::std::move(from);
  }

  inline SubPostList& operator=(SubPostList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubPostList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubPostList* internal_default_instance() {
    return reinterpret_cast<const SubPostList*>(
               &_SubPostList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SubPostList* other);
  friend void swap(SubPostList& a, SubPostList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubPostList* New() const PROTOBUF_FINAL { return New(NULL); }

  SubPostList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubPostList& from);
  void MergeFrom(const SubPostList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubPostList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbContent content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::PbContent& content(int index) const;
  ::PbContent* mutable_content(int index);
  ::PbContent* add_content();
  ::google::protobuf::RepeatedPtrField< ::PbContent >*
      mutable_content();
  const ::google::protobuf::RepeatedPtrField< ::PbContent >&
      content() const;

  // string title = 5;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .User author = 7;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 7;
  const ::User& author() const;
  ::User* release_author();
  ::User* mutable_author();
  void set_allocated_author(::User* author);

  // .Agree agree = 9;
  bool has_agree() const;
  void clear_agree();
  static const int kAgreeFieldNumber = 9;
  const ::Agree& agree() const;
  ::Agree* release_agree();
  ::Agree* mutable_agree();
  void set_allocated_agree(::Agree* agree);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // uint32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // uint32 floor = 6;
  void clear_floor();
  static const int kFloorFieldNumber = 6;
  ::google::protobuf::uint32 floor() const;
  void set_floor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SubPostList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PbContent > content_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::User* author_;
  ::Agree* agree_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 floor_;
  mutable int _cached_size_;
  friend struct ::protobuf_SubPostList_2eproto::TableStruct;
  friend void ::protobuf_SubPostList_2eproto::InitDefaultsSubPostListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubPostList

// int64 id = 1;
inline void SubPostList::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SubPostList::id() const {
  // @@protoc_insertion_point(field_get:SubPostList.id)
  return id_;
}
inline void SubPostList::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SubPostList.id)
}

// repeated .PbContent content = 2;
inline int SubPostList::content_size() const {
  return content_.size();
}
inline const ::PbContent& SubPostList::content(int index) const {
  // @@protoc_insertion_point(field_get:SubPostList.content)
  return content_.Get(index);
}
inline ::PbContent* SubPostList::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:SubPostList.content)
  return content_.Mutable(index);
}
inline ::PbContent* SubPostList::add_content() {
  // @@protoc_insertion_point(field_add:SubPostList.content)
  return content_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PbContent >*
SubPostList::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:SubPostList.content)
  return &content_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PbContent >&
SubPostList::content() const {
  // @@protoc_insertion_point(field_list:SubPostList.content)
  return content_;
}

// uint32 time = 3;
inline void SubPostList::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 SubPostList::time() const {
  // @@protoc_insertion_point(field_get:SubPostList.time)
  return time_;
}
inline void SubPostList::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SubPostList.time)
}

// string title = 5;
inline void SubPostList::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubPostList::title() const {
  // @@protoc_insertion_point(field_get:SubPostList.title)
  return title_.GetNoArena();
}
inline void SubPostList::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SubPostList.title)
}
#if LANG_CXX11
inline void SubPostList::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SubPostList.title)
}
#endif
inline void SubPostList::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SubPostList.title)
}
inline void SubPostList::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SubPostList.title)
}
inline ::std::string* SubPostList::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:SubPostList.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubPostList::release_title() {
  // @@protoc_insertion_point(field_release:SubPostList.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubPostList::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:SubPostList.title)
}

// uint32 floor = 6;
inline void SubPostList::clear_floor() {
  floor_ = 0u;
}
inline ::google::protobuf::uint32 SubPostList::floor() const {
  // @@protoc_insertion_point(field_get:SubPostList.floor)
  return floor_;
}
inline void SubPostList::set_floor(::google::protobuf::uint32 value) {
  
  floor_ = value;
  // @@protoc_insertion_point(field_set:SubPostList.floor)
}

// .User author = 7;
inline bool SubPostList::has_author() const {
  return this != internal_default_instance() && author_ != NULL;
}
inline const ::User& SubPostList::author() const {
  const ::User* p = author_;
  // @@protoc_insertion_point(field_get:SubPostList.author)
  return p != NULL ? *p : *reinterpret_cast<const ::User*>(
      &::_User_default_instance_);
}
inline ::User* SubPostList::release_author() {
  // @@protoc_insertion_point(field_release:SubPostList.author)
  
  ::User* temp = author_;
  author_ = NULL;
  return temp;
}
inline ::User* SubPostList::mutable_author() {
  
  if (author_ == NULL) {
    author_ = new ::User;
  }
  // @@protoc_insertion_point(field_mutable:SubPostList.author)
  return author_;
}
inline void SubPostList::set_allocated_author(::User* author) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(author_);
  }
  if (author) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      author = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:SubPostList.author)
}

// .Agree agree = 9;
inline bool SubPostList::has_agree() const {
  return this != internal_default_instance() && agree_ != NULL;
}
inline const ::Agree& SubPostList::agree() const {
  const ::Agree* p = agree_;
  // @@protoc_insertion_point(field_get:SubPostList.agree)
  return p != NULL ? *p : *reinterpret_cast<const ::Agree*>(
      &::_Agree_default_instance_);
}
inline ::Agree* SubPostList::release_agree() {
  // @@protoc_insertion_point(field_release:SubPostList.agree)
  
  ::Agree* temp = agree_;
  agree_ = NULL;
  return temp;
}
inline ::Agree* SubPostList::mutable_agree() {
  
  if (agree_ == NULL) {
    agree_ = new ::Agree;
  }
  // @@protoc_insertion_point(field_mutable:SubPostList.agree)
  return agree_;
}
inline void SubPostList::set_allocated_agree(::Agree* agree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(agree_);
  }
  if (agree) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      agree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, agree, submessage_arena);
    }
    
  } else {
    
  }
  agree_ = agree;
  // @@protoc_insertion_point(field_set_allocated:SubPostList.agree)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SubPostList_2eproto__INCLUDED
